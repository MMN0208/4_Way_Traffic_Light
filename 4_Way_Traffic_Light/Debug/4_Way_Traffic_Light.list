
4_Way_Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004568  08004568  00020390  2**0
                  CONTENTS
  4 .ARM          00000000  08004568  08004568  00020390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004568  08004568  00020390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800456c  0800456c  0001456c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  08004570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000390  08004900  00020390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  08004900  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c37c  00000000  00000000  000203b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002759  00000000  00000000  0002c735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0002ee90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  0002fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7db  00000000  00000000  00030880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c6a  00000000  00000000  0004b05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b61f  00000000  00000000  0005dcc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e92e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003928  00000000  00000000  000e9334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000390 	.word	0x20000390
 8000128:	00000000 	.word	0x00000000
 800012c:	080044e8 	.word	0x080044e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000394 	.word	0x20000394
 8000148:	080044e8 	.word	0x080044e8

0800014c <grnBuzzer>:
  4,16,4,
  4,8,4,4,4,
  4,20,
};

void grnBuzzer(void) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	int counter = sizeof(music1)/sizeof(music1[0]);
 8000152:	234e      	movs	r3, #78	; 0x4e
 8000154:	607b      	str	r3, [r7, #4]
//		grnBuzzerCounter++;
//	}
//	else {
//		grnBuzzerCounter = 10;
//	}
	if (grnBuzzerCounter < counter){
 8000156:	4b16      	ldr	r3, [pc, #88]	; (80001b0 <grnBuzzer+0x64>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	687a      	ldr	r2, [r7, #4]
 800015c:	429a      	cmp	r2, r3
 800015e:	dd1f      	ble.n	80001a0 <grnBuzzer+0x54>
		__HAL_TIM_SET_AUTORELOAD(&htim3, 1000000/music1[grnBuzzerCounter]);
 8000160:	4b13      	ldr	r3, [pc, #76]	; (80001b0 <grnBuzzer+0x64>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a13      	ldr	r2, [pc, #76]	; (80001b4 <grnBuzzer+0x68>)
 8000166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800016a:	4a13      	ldr	r2, [pc, #76]	; (80001b8 <grnBuzzer+0x6c>)
 800016c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000170:	4b12      	ldr	r3, [pc, #72]	; (80001bc <grnBuzzer+0x70>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	62da      	str	r2, [r3, #44]	; 0x2c
 8000176:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <grnBuzzer+0x64>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a0e      	ldr	r2, [pc, #56]	; (80001b4 <grnBuzzer+0x68>)
 800017c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000180:	4a0d      	ldr	r2, [pc, #52]	; (80001b8 <grnBuzzer+0x6c>)
 8000182:	fb92 f3f3 	sdiv	r3, r2, r3
 8000186:	461a      	mov	r2, r3
 8000188:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <grnBuzzer+0x70>)
 800018a:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 15);
 800018c:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <grnBuzzer+0x70>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	220f      	movs	r2, #15
 8000192:	635a      	str	r2, [r3, #52]	; 0x34
		grnBuzzerCounter++;
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <grnBuzzer+0x64>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	4a05      	ldr	r2, [pc, #20]	; (80001b0 <grnBuzzer+0x64>)
 800019c:	6013      	str	r3, [r2, #0]
	} else {
		grnBuzzerCounter = 0;
	}
}
 800019e:	e002      	b.n	80001a6 <grnBuzzer+0x5a>
		grnBuzzerCounter = 0;
 80001a0:	4b03      	ldr	r3, [pc, #12]	; (80001b0 <grnBuzzer+0x64>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
}
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	200003ac 	.word	0x200003ac
 80001b4:	20000000 	.word	0x20000000
 80001b8:	000f4240 	.word	0x000f4240
 80001bc:	2000076c 	.word	0x2000076c

080001c0 <redBuzzer>:

void redBuzzer(void) {
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
	int counter = sizeof(music2)/sizeof(music2[0]);
 80001c6:	2363      	movs	r3, #99	; 0x63
 80001c8:	607b      	str	r3, [r7, #4]
	if(redBuzzerCounter < counter) {
 80001ca:	4b13      	ldr	r3, [pc, #76]	; (8000218 <redBuzzer+0x58>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	687a      	ldr	r2, [r7, #4]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	dd19      	ble.n	8000208 <redBuzzer+0x48>
		__HAL_TIM_SET_AUTORELOAD(&htim3, music2[redBuzzerCounter]);
 80001d4:	4b10      	ldr	r3, [pc, #64]	; (8000218 <redBuzzer+0x58>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a10      	ldr	r2, [pc, #64]	; (800021c <redBuzzer+0x5c>)
 80001da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001de:	4b10      	ldr	r3, [pc, #64]	; (8000220 <redBuzzer+0x60>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <redBuzzer+0x58>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0c      	ldr	r2, [pc, #48]	; (800021c <redBuzzer+0x5c>)
 80001ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ee:	461a      	mov	r2, r3
 80001f0:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <redBuzzer+0x60>)
 80001f2:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 15);
 80001f4:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <redBuzzer+0x60>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	220f      	movs	r2, #15
 80001fa:	635a      	str	r2, [r3, #52]	; 0x34
//		__HAL_TIM_SET_PRESCALER(&htim3,music2[redBuzzerCounter]);
		redBuzzerCounter ++;
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <redBuzzer+0x58>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	3301      	adds	r3, #1
 8000202:	4a05      	ldr	r2, [pc, #20]	; (8000218 <redBuzzer+0x58>)
 8000204:	6013      	str	r3, [r2, #0]
	}
	else {
		redBuzzerCounter  = 0;
	}
}
 8000206:	e002      	b.n	800020e <redBuzzer+0x4e>
		redBuzzerCounter  = 0;
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <redBuzzer+0x58>)
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	200003b0 	.word	0x200003b0
 800021c:	20000138 	.word	0x20000138
 8000220:	2000076c 	.word	0x2000076c

08000224 <stopBuzzer>:

void stopBuzzer(void) {
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim3, 0);
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <stopBuzzer+0x24>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2200      	movs	r2, #0
 800022e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <stopBuzzer+0x24>)
 8000232:	2200      	movs	r2, #0
 8000234:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <stopBuzzer+0x24>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2200      	movs	r2, #0
 800023c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	2000076c 	.word	0x2000076c

0800024c <fsm_multi_mode_run>:
#include "fsm_for_multi_mode.h"

int newGrnTime = 0;
int newYelTime = 0;

void fsm_multi_mode_run(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	switch(sysStatus) {
 8000250:	4ba5      	ldr	r3, [pc, #660]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b06      	cmp	r3, #6
 8000256:	f200 827a 	bhi.w	800074e <fsm_multi_mode_run+0x502>
 800025a:	a201      	add	r2, pc, #4	; (adr r2, 8000260 <fsm_multi_mode_run+0x14>)
 800025c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000260:	0800027d 	.word	0x0800027d
 8000264:	080002b1 	.word	0x080002b1
 8000268:	0800036b 	.word	0x0800036b
 800026c:	08000429 	.word	0x08000429
 8000270:	08000509 	.word	0x08000509
 8000274:	0800069d 	.word	0x0800069d
 8000278:	080005c7 	.word	0x080005c7
	case INIT:
		//init timer 1 for countdown updating
		setTimer1(SECOND);
 800027c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000280:	f001 f826 	bl	80012d0 <setTimer1>

		//init countdown
		countdown = redTime;
 8000284:	4b99      	ldr	r3, [pc, #612]	; (80004ec <fsm_multi_mode_run+0x2a0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a99      	ldr	r2, [pc, #612]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 800028a:	6013      	str	r3, [r2, #0]

		auto_mode = 1;
 800028c:	4b99      	ldr	r3, [pc, #612]	; (80004f4 <fsm_multi_mode_run+0x2a8>)
 800028e:	2201      	movs	r2, #1
 8000290:	601a      	str	r2, [r3, #0]

		sysStatus = RED__GRN;
 8000292:	4b95      	ldr	r3, [pc, #596]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
		trafficLightRed(TRAFFIC_LIGHT_1);
 8000298:	2000      	movs	r0, #0
 800029a:	f001 fb1b 	bl	80018d4 <trafficLightRed>
		trafficLightGrn(TRAFFIC_LIGHT_2);
 800029e:	2001      	movs	r0, #1
 80002a0:	f001 facc 	bl	800183c <trafficLightGrn>
		displayCountdown(countdown);
 80002a4:	4b92      	ldr	r3, [pc, #584]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fb39 	bl	8001920 <displayCountdown>
		break;
 80002ae:	e25b      	b.n	8000768 <fsm_multi_mode_run+0x51c>

	case RED__GRN:
		if(auto_mode == 1) {
 80002b0:	4b90      	ldr	r3, [pc, #576]	; (80004f4 <fsm_multi_mode_run+0x2a8>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d12b      	bne.n	8000310 <fsm_multi_mode_run+0xc4>
			if(timer1_flag == 1) {
 80002b8:	4b8f      	ldr	r3, [pc, #572]	; (80004f8 <fsm_multi_mode_run+0x2ac>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d11c      	bne.n	80002fa <fsm_multi_mode_run+0xae>
				setTimer1(SECOND);
 80002c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c4:	f001 f804 	bl	80012d0 <setTimer1>
				countdown--;
 80002c8:	4b89      	ldr	r3, [pc, #548]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	4a88      	ldr	r2, [pc, #544]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 80002d0:	6013      	str	r3, [r2, #0]
				if(countdown == yelTime) {
 80002d2:	4b87      	ldr	r3, [pc, #540]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	4b89      	ldr	r3, [pc, #548]	; (80004fc <fsm_multi_mode_run+0x2b0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d108      	bne.n	80002f0 <fsm_multi_mode_run+0xa4>
					sysStatus = RED__YEL;
 80002de:	4b82      	ldr	r3, [pc, #520]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 80002e0:	2202      	movs	r2, #2
 80002e2:	701a      	strb	r2, [r3, #0]
					trafficLightRed(TRAFFIC_LIGHT_1);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f001 faf5 	bl	80018d4 <trafficLightRed>
					trafficLightYel(TRAFFIC_LIGHT_2);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f001 facc 	bl	8001888 <trafficLightYel>
				}
				displayCountdown(countdown);
 80002f0:	4b7f      	ldr	r3, [pc, #508]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 fb13 	bl	8001920 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 fd10 	bl	8000d20 <isButtonPressed>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	f000 8225 	beq.w	8000752 <fsm_multi_mode_run+0x506>
				auto_mode = 0;
 8000308:	4b7a      	ldr	r3, [pc, #488]	; (80004f4 <fsm_multi_mode_run+0x2a8>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
				trafficLightYel(TRAFFIC_LIGHT_2);
			}
		}

		break;
 800030e:	e220      	b.n	8000752 <fsm_multi_mode_run+0x506>
			if(isButtonPressed(BUTTON_1)) {
 8000310:	2001      	movs	r0, #1
 8000312:	f000 fd05 	bl	8000d20 <isButtonPressed>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d015      	beq.n	8000348 <fsm_multi_mode_run+0xfc>
				setTimer1(LED_BLINK);
 800031c:	2064      	movs	r0, #100	; 0x64
 800031e:	f000 ffd7 	bl	80012d0 <setTimer1>
				newGrnTime = grnTime;
 8000322:	4b77      	ldr	r3, [pc, #476]	; (8000500 <fsm_multi_mode_run+0x2b4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a77      	ldr	r2, [pc, #476]	; (8000504 <fsm_multi_mode_run+0x2b8>)
 8000328:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 800032a:	4b6f      	ldr	r3, [pc, #444]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 800032c:	2206      	movs	r2, #6
 800032e:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 8000330:	2000      	movs	r0, #0
 8000332:	f001 fa83 	bl	800183c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 8000336:	2001      	movs	r0, #1
 8000338:	f001 fa80 	bl	800183c <trafficLightGrn>
				displayCountdown(newGrnTime);
 800033c:	4b71      	ldr	r3, [pc, #452]	; (8000504 <fsm_multi_mode_run+0x2b8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f001 faed 	bl	8001920 <displayCountdown>
		break;
 8000346:	e204      	b.n	8000752 <fsm_multi_mode_run+0x506>
			else if(isButtonPressed(BUTTON_2)) {
 8000348:	2002      	movs	r0, #2
 800034a:	f000 fce9 	bl	8000d20 <isButtonPressed>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	f000 81fe 	beq.w	8000752 <fsm_multi_mode_run+0x506>
				sysStatus = RED__YEL;
 8000356:	4b64      	ldr	r3, [pc, #400]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 8000358:	2202      	movs	r2, #2
 800035a:	701a      	strb	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
 800035c:	2000      	movs	r0, #0
 800035e:	f001 fab9 	bl	80018d4 <trafficLightRed>
				trafficLightYel(TRAFFIC_LIGHT_2);
 8000362:	2001      	movs	r0, #1
 8000364:	f001 fa90 	bl	8001888 <trafficLightYel>
		break;
 8000368:	e1f3      	b.n	8000752 <fsm_multi_mode_run+0x506>

	case RED__YEL:
		if(auto_mode == 1) {
 800036a:	4b62      	ldr	r3, [pc, #392]	; (80004f4 <fsm_multi_mode_run+0x2a8>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d12d      	bne.n	80003ce <fsm_multi_mode_run+0x182>
			if(timer1_flag == 1) {
 8000372:	4b61      	ldr	r3, [pc, #388]	; (80004f8 <fsm_multi_mode_run+0x2ac>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d11e      	bne.n	80003b8 <fsm_multi_mode_run+0x16c>
				setTimer1(SECOND);
 800037a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037e:	f000 ffa7 	bl	80012d0 <setTimer1>
				countdown--;
 8000382:	4b5b      	ldr	r3, [pc, #364]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	3b01      	subs	r3, #1
 8000388:	4a59      	ldr	r2, [pc, #356]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 800038a:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 800038c:	4b58      	ldr	r3, [pc, #352]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d10c      	bne.n	80003ae <fsm_multi_mode_run+0x162>
					countdown = grnTime;
 8000394:	4b5a      	ldr	r3, [pc, #360]	; (8000500 <fsm_multi_mode_run+0x2b4>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a55      	ldr	r2, [pc, #340]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 800039a:	6013      	str	r3, [r2, #0]
					sysStatus = GRN__RED;
 800039c:	4b52      	ldr	r3, [pc, #328]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 800039e:	2203      	movs	r2, #3
 80003a0:	701a      	strb	r2, [r3, #0]
					trafficLightGrn(TRAFFIC_LIGHT_1);
 80003a2:	2000      	movs	r0, #0
 80003a4:	f001 fa4a 	bl	800183c <trafficLightGrn>
					trafficLightRed(TRAFFIC_LIGHT_2);
 80003a8:	2001      	movs	r0, #1
 80003aa:	f001 fa93 	bl	80018d4 <trafficLightRed>
				}
				displayCountdown(countdown);
 80003ae:	4b50      	ldr	r3, [pc, #320]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fab4 	bl	8001920 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 fcb1 	bl	8000d20 <isButtonPressed>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f000 81c8 	beq.w	8000756 <fsm_multi_mode_run+0x50a>
				auto_mode = 0;
 80003c6:	4b4b      	ldr	r3, [pc, #300]	; (80004f4 <fsm_multi_mode_run+0x2a8>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
				sysStatus = GRN__RED;
				trafficLightGrn(TRAFFIC_LIGHT_1);
				trafficLightRed(TRAFFIC_LIGHT_2);
			}
		}
		break;
 80003cc:	e1c3      	b.n	8000756 <fsm_multi_mode_run+0x50a>
			if(isButtonPressed(BUTTON_1)) {
 80003ce:	2001      	movs	r0, #1
 80003d0:	f000 fca6 	bl	8000d20 <isButtonPressed>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d015      	beq.n	8000406 <fsm_multi_mode_run+0x1ba>
				setTimer1(LED_BLINK);
 80003da:	2064      	movs	r0, #100	; 0x64
 80003dc:	f000 ff78 	bl	80012d0 <setTimer1>
				newGrnTime = grnTime;
 80003e0:	4b47      	ldr	r3, [pc, #284]	; (8000500 <fsm_multi_mode_run+0x2b4>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a47      	ldr	r2, [pc, #284]	; (8000504 <fsm_multi_mode_run+0x2b8>)
 80003e6:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 80003e8:	4b3f      	ldr	r3, [pc, #252]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 80003ea:	2206      	movs	r2, #6
 80003ec:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f001 fa24 	bl	800183c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f001 fa21 	bl	800183c <trafficLightGrn>
				displayCountdown(newGrnTime);
 80003fa:	4b42      	ldr	r3, [pc, #264]	; (8000504 <fsm_multi_mode_run+0x2b8>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 fa8e 	bl	8001920 <displayCountdown>
		break;
 8000404:	e1a7      	b.n	8000756 <fsm_multi_mode_run+0x50a>
			else if(isButtonPressed(BUTTON_2)) {
 8000406:	2002      	movs	r0, #2
 8000408:	f000 fc8a 	bl	8000d20 <isButtonPressed>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	f000 81a1 	beq.w	8000756 <fsm_multi_mode_run+0x50a>
				sysStatus = GRN__RED;
 8000414:	4b34      	ldr	r3, [pc, #208]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 800041a:	2000      	movs	r0, #0
 800041c:	f001 fa0e 	bl	800183c <trafficLightGrn>
				trafficLightRed(TRAFFIC_LIGHT_2);
 8000420:	2001      	movs	r0, #1
 8000422:	f001 fa57 	bl	80018d4 <trafficLightRed>
		break;
 8000426:	e196      	b.n	8000756 <fsm_multi_mode_run+0x50a>

	case GRN__RED:
		if(auto_mode == 1) {
 8000428:	4b32      	ldr	r3, [pc, #200]	; (80004f4 <fsm_multi_mode_run+0x2a8>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d12d      	bne.n	800048c <fsm_multi_mode_run+0x240>
			if(timer1_flag == 1) {
 8000430:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <fsm_multi_mode_run+0x2ac>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d11e      	bne.n	8000476 <fsm_multi_mode_run+0x22a>
				setTimer1(SECOND);
 8000438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800043c:	f000 ff48 	bl	80012d0 <setTimer1>
				countdown--;
 8000440:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	4a2a      	ldr	r2, [pc, #168]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 8000448:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 800044a:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d10c      	bne.n	800046c <fsm_multi_mode_run+0x220>
					countdown = yelTime;
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <fsm_multi_mode_run+0x2b0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a26      	ldr	r2, [pc, #152]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 8000458:	6013      	str	r3, [r2, #0]
					sysStatus = YEL__RED;
 800045a:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 800045c:	2204      	movs	r2, #4
 800045e:	701a      	strb	r2, [r3, #0]
					trafficLightYel(TRAFFIC_LIGHT_1);
 8000460:	2000      	movs	r0, #0
 8000462:	f001 fa11 	bl	8001888 <trafficLightYel>
					trafficLightRed(TRAFFIC_LIGHT_2);
 8000466:	2001      	movs	r0, #1
 8000468:	f001 fa34 	bl	80018d4 <trafficLightRed>
				}
				displayCountdown(countdown);
 800046c:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <fsm_multi_mode_run+0x2a4>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f001 fa55 	bl	8001920 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 8000476:	2001      	movs	r0, #1
 8000478:	f000 fc52 	bl	8000d20 <isButtonPressed>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	f000 816b 	beq.w	800075a <fsm_multi_mode_run+0x50e>
				auto_mode = 0;
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <fsm_multi_mode_run+0x2a8>)
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
				sysStatus = YEL__RED;
				trafficLightYel(TRAFFIC_LIGHT_1);
				trafficLightRed(TRAFFIC_LIGHT_2);
			}
		}
		break;
 800048a:	e166      	b.n	800075a <fsm_multi_mode_run+0x50e>
			if(isButtonPressed(BUTTON_1)) {
 800048c:	2001      	movs	r0, #1
 800048e:	f000 fc47 	bl	8000d20 <isButtonPressed>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d015      	beq.n	80004c4 <fsm_multi_mode_run+0x278>
				setTimer1(LED_BLINK);
 8000498:	2064      	movs	r0, #100	; 0x64
 800049a:	f000 ff19 	bl	80012d0 <setTimer1>
				newGrnTime = grnTime;
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <fsm_multi_mode_run+0x2b4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a18      	ldr	r2, [pc, #96]	; (8000504 <fsm_multi_mode_run+0x2b8>)
 80004a4:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 80004a8:	2206      	movs	r2, #6
 80004aa:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 80004ac:	2000      	movs	r0, #0
 80004ae:	f001 f9c5 	bl	800183c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 80004b2:	2001      	movs	r0, #1
 80004b4:	f001 f9c2 	bl	800183c <trafficLightGrn>
				displayCountdown(newGrnTime);
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <fsm_multi_mode_run+0x2b8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 fa2f 	bl	8001920 <displayCountdown>
		break;
 80004c2:	e14a      	b.n	800075a <fsm_multi_mode_run+0x50e>
			else if(isButtonPressed(BUTTON_2)) {
 80004c4:	2002      	movs	r0, #2
 80004c6:	f000 fc2b 	bl	8000d20 <isButtonPressed>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	f000 8144 	beq.w	800075a <fsm_multi_mode_run+0x50e>
				sysStatus = YEL__RED;
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <fsm_multi_mode_run+0x29c>)
 80004d4:	2204      	movs	r2, #4
 80004d6:	701a      	strb	r2, [r3, #0]
				trafficLightYel(TRAFFIC_LIGHT_1);
 80004d8:	2000      	movs	r0, #0
 80004da:	f001 f9d5 	bl	8001888 <trafficLightYel>
				trafficLightRed(TRAFFIC_LIGHT_2);
 80004de:	2001      	movs	r0, #1
 80004e0:	f001 f9f8 	bl	80018d4 <trafficLightRed>
		break;
 80004e4:	e139      	b.n	800075a <fsm_multi_mode_run+0x50e>
 80004e6:	bf00      	nop
 80004e8:	200003c0 	.word	0x200003c0
 80004ec:	200002c4 	.word	0x200002c4
 80004f0:	200003c4 	.word	0x200003c4
 80004f4:	200002d0 	.word	0x200002d0
 80004f8:	2000070c 	.word	0x2000070c
 80004fc:	200002c8 	.word	0x200002c8
 8000500:	200002cc 	.word	0x200002cc
 8000504:	200003b4 	.word	0x200003b4

	case YEL__RED:
		if(auto_mode == 1) {
 8000508:	4b98      	ldr	r3, [pc, #608]	; (800076c <fsm_multi_mode_run+0x520>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d12d      	bne.n	800056c <fsm_multi_mode_run+0x320>
			if(timer1_flag == 1) {
 8000510:	4b97      	ldr	r3, [pc, #604]	; (8000770 <fsm_multi_mode_run+0x524>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d11e      	bne.n	8000556 <fsm_multi_mode_run+0x30a>
				setTimer1(SECOND);
 8000518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051c:	f000 fed8 	bl	80012d0 <setTimer1>
				countdown--;
 8000520:	4b94      	ldr	r3, [pc, #592]	; (8000774 <fsm_multi_mode_run+0x528>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3b01      	subs	r3, #1
 8000526:	4a93      	ldr	r2, [pc, #588]	; (8000774 <fsm_multi_mode_run+0x528>)
 8000528:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 800052a:	4b92      	ldr	r3, [pc, #584]	; (8000774 <fsm_multi_mode_run+0x528>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d10c      	bne.n	800054c <fsm_multi_mode_run+0x300>
					countdown = redTime;
 8000532:	4b91      	ldr	r3, [pc, #580]	; (8000778 <fsm_multi_mode_run+0x52c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a8f      	ldr	r2, [pc, #572]	; (8000774 <fsm_multi_mode_run+0x528>)
 8000538:	6013      	str	r3, [r2, #0]
					sysStatus = RED__GRN;
 800053a:	4b90      	ldr	r3, [pc, #576]	; (800077c <fsm_multi_mode_run+0x530>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
					trafficLightRed(TRAFFIC_LIGHT_1);
 8000540:	2000      	movs	r0, #0
 8000542:	f001 f9c7 	bl	80018d4 <trafficLightRed>
					trafficLightGrn(TRAFFIC_LIGHT_2);
 8000546:	2001      	movs	r0, #1
 8000548:	f001 f978 	bl	800183c <trafficLightGrn>
				}
				displayCountdown(countdown);
 800054c:	4b89      	ldr	r3, [pc, #548]	; (8000774 <fsm_multi_mode_run+0x528>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f001 f9e5 	bl	8001920 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 8000556:	2001      	movs	r0, #1
 8000558:	f000 fbe2 	bl	8000d20 <isButtonPressed>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	f000 80fd 	beq.w	800075e <fsm_multi_mode_run+0x512>
				auto_mode = 0;
 8000564:	4b81      	ldr	r3, [pc, #516]	; (800076c <fsm_multi_mode_run+0x520>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
				sysStatus = RED__GRN;
				trafficLightRed(TRAFFIC_LIGHT_1);
				trafficLightGrn(TRAFFIC_LIGHT_2);
			}
		}
		break;
 800056a:	e0f8      	b.n	800075e <fsm_multi_mode_run+0x512>
			if(isButtonPressed(BUTTON_1)) {
 800056c:	2001      	movs	r0, #1
 800056e:	f000 fbd7 	bl	8000d20 <isButtonPressed>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d015      	beq.n	80005a4 <fsm_multi_mode_run+0x358>
				setTimer1(LED_BLINK);
 8000578:	2064      	movs	r0, #100	; 0x64
 800057a:	f000 fea9 	bl	80012d0 <setTimer1>
				newGrnTime = grnTime;
 800057e:	4b80      	ldr	r3, [pc, #512]	; (8000780 <fsm_multi_mode_run+0x534>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a80      	ldr	r2, [pc, #512]	; (8000784 <fsm_multi_mode_run+0x538>)
 8000584:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 8000586:	4b7d      	ldr	r3, [pc, #500]	; (800077c <fsm_multi_mode_run+0x530>)
 8000588:	2206      	movs	r2, #6
 800058a:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 800058c:	2000      	movs	r0, #0
 800058e:	f001 f955 	bl	800183c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 8000592:	2001      	movs	r0, #1
 8000594:	f001 f952 	bl	800183c <trafficLightGrn>
				displayCountdown(newGrnTime);
 8000598:	4b7a      	ldr	r3, [pc, #488]	; (8000784 <fsm_multi_mode_run+0x538>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f9bf 	bl	8001920 <displayCountdown>
		break;
 80005a2:	e0dc      	b.n	800075e <fsm_multi_mode_run+0x512>
			else if(isButtonPressed(BUTTON_2)) {
 80005a4:	2002      	movs	r0, #2
 80005a6:	f000 fbbb 	bl	8000d20 <isButtonPressed>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f000 80d6 	beq.w	800075e <fsm_multi_mode_run+0x512>
				sysStatus = RED__GRN;
 80005b2:	4b72      	ldr	r3, [pc, #456]	; (800077c <fsm_multi_mode_run+0x530>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f001 f98b 	bl	80018d4 <trafficLightRed>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 80005be:	2001      	movs	r0, #1
 80005c0:	f001 f93c 	bl	800183c <trafficLightGrn>
		break;
 80005c4:	e0cb      	b.n	800075e <fsm_multi_mode_run+0x512>

	case SET_GRN:
		if(isButtonPressed(BUTTON_1)) {
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 fbaa 	bl	8000d20 <isButtonPressed>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d015      	beq.n	80005fe <fsm_multi_mode_run+0x3b2>
			setTimer1(LED_BLINK);
 80005d2:	2064      	movs	r0, #100	; 0x64
 80005d4:	f000 fe7c 	bl	80012d0 <setTimer1>
			newYelTime = yelTime;
 80005d8:	4b6b      	ldr	r3, [pc, #428]	; (8000788 <fsm_multi_mode_run+0x53c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a6b      	ldr	r2, [pc, #428]	; (800078c <fsm_multi_mode_run+0x540>)
 80005de:	6013      	str	r3, [r2, #0]
			sysStatus = SET_YEL;
 80005e0:	4b66      	ldr	r3, [pc, #408]	; (800077c <fsm_multi_mode_run+0x530>)
 80005e2:	2205      	movs	r2, #5
 80005e4:	701a      	strb	r2, [r3, #0]
			trafficLightYel(TRAFFIC_LIGHT_1);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f001 f94e 	bl	8001888 <trafficLightYel>
			trafficLightYel(TRAFFIC_LIGHT_2);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f001 f94b 	bl	8001888 <trafficLightYel>
			displayCountdown(newYelTime);
 80005f2:	4b66      	ldr	r3, [pc, #408]	; (800078c <fsm_multi_mode_run+0x540>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f992 	bl	8001920 <displayCountdown>
 80005fc:	e040      	b.n	8000680 <fsm_multi_mode_run+0x434>
		}
		else if(isButtonPressed(BUTTON_2)) {
 80005fe:	2002      	movs	r0, #2
 8000600:	f000 fb8e 	bl	8000d20 <isButtonPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d011      	beq.n	800062e <fsm_multi_mode_run+0x3e2>
			newGrnTime++;
 800060a:	4b5e      	ldr	r3, [pc, #376]	; (8000784 <fsm_multi_mode_run+0x538>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	4a5c      	ldr	r2, [pc, #368]	; (8000784 <fsm_multi_mode_run+0x538>)
 8000612:	6013      	str	r3, [r2, #0]
			if(newGrnTime == MAX_VALUE) newGrnTime = 1;
 8000614:	4b5b      	ldr	r3, [pc, #364]	; (8000784 <fsm_multi_mode_run+0x538>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b64      	cmp	r3, #100	; 0x64
 800061a:	d102      	bne.n	8000622 <fsm_multi_mode_run+0x3d6>
 800061c:	4b59      	ldr	r3, [pc, #356]	; (8000784 <fsm_multi_mode_run+0x538>)
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
			displayCountdown(newGrnTime);
 8000622:	4b58      	ldr	r3, [pc, #352]	; (8000784 <fsm_multi_mode_run+0x538>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f97a 	bl	8001920 <displayCountdown>
 800062c:	e028      	b.n	8000680 <fsm_multi_mode_run+0x434>
		}
		else if(isButtonDoublePressed(BUTTON_2)) {
 800062e:	2002      	movs	r0, #2
 8000630:	f000 fb98 	bl	8000d64 <isButtonDoublePressed>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d011      	beq.n	800065e <fsm_multi_mode_run+0x412>
			newGrnTime--;
 800063a:	4b52      	ldr	r3, [pc, #328]	; (8000784 <fsm_multi_mode_run+0x538>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3b01      	subs	r3, #1
 8000640:	4a50      	ldr	r2, [pc, #320]	; (8000784 <fsm_multi_mode_run+0x538>)
 8000642:	6013      	str	r3, [r2, #0]
			if(newGrnTime == 0) newGrnTime = MAX_VALUE - 1;
 8000644:	4b4f      	ldr	r3, [pc, #316]	; (8000784 <fsm_multi_mode_run+0x538>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <fsm_multi_mode_run+0x406>
 800064c:	4b4d      	ldr	r3, [pc, #308]	; (8000784 <fsm_multi_mode_run+0x538>)
 800064e:	2263      	movs	r2, #99	; 0x63
 8000650:	601a      	str	r2, [r3, #0]
			displayCountdown(newGrnTime);
 8000652:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <fsm_multi_mode_run+0x538>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f962 	bl	8001920 <displayCountdown>
 800065c:	e010      	b.n	8000680 <fsm_multi_mode_run+0x434>
		}
		else if(isButtonPressed(BUTTON_3)) {
 800065e:	2003      	movs	r0, #3
 8000660:	f000 fb5e 	bl	8000d20 <isButtonPressed>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00a      	beq.n	8000680 <fsm_multi_mode_run+0x434>
			grnTime = newGrnTime;
 800066a:	4b46      	ldr	r3, [pc, #280]	; (8000784 <fsm_multi_mode_run+0x538>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a44      	ldr	r2, [pc, #272]	; (8000780 <fsm_multi_mode_run+0x534>)
 8000670:	6013      	str	r3, [r2, #0]
			redTime = grnTime + yelTime;
 8000672:	4b43      	ldr	r3, [pc, #268]	; (8000780 <fsm_multi_mode_run+0x534>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b44      	ldr	r3, [pc, #272]	; (8000788 <fsm_multi_mode_run+0x53c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a3e      	ldr	r2, [pc, #248]	; (8000778 <fsm_multi_mode_run+0x52c>)
 800067e:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8000680:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <fsm_multi_mode_run+0x524>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d16c      	bne.n	8000762 <fsm_multi_mode_run+0x516>
			setTimer1(LED_BLINK);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f000 fe21 	bl	80012d0 <setTimer1>
			trafficLightBlinkGrn(TRAFFIC_LIGHT_1);
 800068e:	2000      	movs	r0, #0
 8000690:	f001 f888 	bl	80017a4 <trafficLightBlinkGrn>
			trafficLightBlinkGrn(TRAFFIC_LIGHT_2);
 8000694:	2001      	movs	r0, #1
 8000696:	f001 f885 	bl	80017a4 <trafficLightBlinkGrn>
		}
		break;
 800069a:	e062      	b.n	8000762 <fsm_multi_mode_run+0x516>

	case SET_YEL:
		if(isButtonPressed(BUTTON_1)) {
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fb3f 	bl	8000d20 <isButtonPressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d003      	beq.n	80006b0 <fsm_multi_mode_run+0x464>
			sysStatus = INIT;
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <fsm_multi_mode_run+0x530>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	e040      	b.n	8000732 <fsm_multi_mode_run+0x4e6>
		}
		else if(isButtonPressed(BUTTON_2)) {
 80006b0:	2002      	movs	r0, #2
 80006b2:	f000 fb35 	bl	8000d20 <isButtonPressed>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d011      	beq.n	80006e0 <fsm_multi_mode_run+0x494>
			newYelTime++;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <fsm_multi_mode_run+0x540>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a32      	ldr	r2, [pc, #200]	; (800078c <fsm_multi_mode_run+0x540>)
 80006c4:	6013      	str	r3, [r2, #0]
			if(newYelTime == MAX_VALUE) newYelTime = 1;
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <fsm_multi_mode_run+0x540>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b64      	cmp	r3, #100	; 0x64
 80006cc:	d102      	bne.n	80006d4 <fsm_multi_mode_run+0x488>
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <fsm_multi_mode_run+0x540>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
			displayCountdown(newYelTime);
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <fsm_multi_mode_run+0x540>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f921 	bl	8001920 <displayCountdown>
 80006de:	e028      	b.n	8000732 <fsm_multi_mode_run+0x4e6>
		}
		else if(isButtonDoublePressed(BUTTON_2)) {
 80006e0:	2002      	movs	r0, #2
 80006e2:	f000 fb3f 	bl	8000d64 <isButtonDoublePressed>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d011      	beq.n	8000710 <fsm_multi_mode_run+0x4c4>
			newYelTime--;
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <fsm_multi_mode_run+0x540>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	4a26      	ldr	r2, [pc, #152]	; (800078c <fsm_multi_mode_run+0x540>)
 80006f4:	6013      	str	r3, [r2, #0]
			if(newYelTime == 0) newYelTime = MAX_VALUE - 1;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <fsm_multi_mode_run+0x540>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <fsm_multi_mode_run+0x4b8>
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <fsm_multi_mode_run+0x540>)
 8000700:	2263      	movs	r2, #99	; 0x63
 8000702:	601a      	str	r2, [r3, #0]
			displayCountdown(newYelTime);
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <fsm_multi_mode_run+0x540>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f909 	bl	8001920 <displayCountdown>
 800070e:	e010      	b.n	8000732 <fsm_multi_mode_run+0x4e6>
		}
		else if(isButtonPressed(BUTTON_3)) {
 8000710:	2003      	movs	r0, #3
 8000712:	f000 fb05 	bl	8000d20 <isButtonPressed>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00a      	beq.n	8000732 <fsm_multi_mode_run+0x4e6>
			yelTime = newYelTime;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <fsm_multi_mode_run+0x540>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a19      	ldr	r2, [pc, #100]	; (8000788 <fsm_multi_mode_run+0x53c>)
 8000722:	6013      	str	r3, [r2, #0]
			redTime = grnTime + yelTime;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <fsm_multi_mode_run+0x534>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <fsm_multi_mode_run+0x53c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4413      	add	r3, r2
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <fsm_multi_mode_run+0x52c>)
 8000730:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <fsm_multi_mode_run+0x524>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d115      	bne.n	8000766 <fsm_multi_mode_run+0x51a>
			setTimer1(LED_BLINK);
 800073a:	2064      	movs	r0, #100	; 0x64
 800073c:	f000 fdc8 	bl	80012d0 <setTimer1>
			trafficLightBlinkYel(TRAFFIC_LIGHT_1);
 8000740:	2000      	movs	r0, #0
 8000742:	f001 f855 	bl	80017f0 <trafficLightBlinkYel>
			trafficLightBlinkYel(TRAFFIC_LIGHT_2);
 8000746:	2001      	movs	r0, #1
 8000748:	f001 f852 	bl	80017f0 <trafficLightBlinkYel>
		}
		break;
 800074c:	e00b      	b.n	8000766 <fsm_multi_mode_run+0x51a>

	default: break;
 800074e:	bf00      	nop
 8000750:	e00a      	b.n	8000768 <fsm_multi_mode_run+0x51c>
		break;
 8000752:	bf00      	nop
 8000754:	e008      	b.n	8000768 <fsm_multi_mode_run+0x51c>
		break;
 8000756:	bf00      	nop
 8000758:	e006      	b.n	8000768 <fsm_multi_mode_run+0x51c>
		break;
 800075a:	bf00      	nop
 800075c:	e004      	b.n	8000768 <fsm_multi_mode_run+0x51c>
		break;
 800075e:	bf00      	nop
 8000760:	e002      	b.n	8000768 <fsm_multi_mode_run+0x51c>
		break;
 8000762:	bf00      	nop
 8000764:	e000      	b.n	8000768 <fsm_multi_mode_run+0x51c>
		break;
 8000766:	bf00      	nop
	}
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200002d0 	.word	0x200002d0
 8000770:	2000070c 	.word	0x2000070c
 8000774:	200003c4 	.word	0x200003c4
 8000778:	200002c4 	.word	0x200002c4
 800077c:	200003c0 	.word	0x200003c0
 8000780:	200002cc 	.word	0x200002cc
 8000784:	200003b4 	.word	0x200003b4
 8000788:	200002c8 	.word	0x200002c8
 800078c:	200003b8 	.word	0x200003b8

08000790 <fsm_for_pedestrian>:

#include "fsm_for_pedestrian.h"

int timeOut;

void fsm_for_pedestrian(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 8000794:	4b86      	ldr	r3, [pc, #536]	; (80009b0 <fsm_for_pedestrian+0x220>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b02      	cmp	r3, #2
 800079a:	f000 80a4 	beq.w	80008e6 <fsm_for_pedestrian+0x156>
 800079e:	2b02      	cmp	r3, #2
 80007a0:	f300 8104 	bgt.w	80009ac <fsm_for_pedestrian+0x21c>
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <fsm_for_pedestrian+0x1e>
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d03e      	beq.n	800082a <fsm_for_pedestrian+0x9a>
			}
		}

		break;
	}
}
 80007ac:	e0fe      	b.n	80009ac <fsm_for_pedestrian+0x21c>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fab6 	bl	8000d20 <isButtonPressed>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	f000 80f3 	beq.w	80009a2 <fsm_for_pedestrian+0x212>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 80007bc:	4b7d      	ldr	r3, [pc, #500]	; (80009b4 <fsm_for_pedestrian+0x224>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b7d      	ldr	r3, [pc, #500]	; (80009b8 <fsm_for_pedestrian+0x228>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	441a      	add	r2, r3
 80007c6:	4b7d      	ldr	r3, [pc, #500]	; (80009bc <fsm_for_pedestrian+0x22c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	4a7a      	ldr	r2, [pc, #488]	; (80009c0 <fsm_for_pedestrian+0x230>)
 80007d6:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 80007d8:	4b79      	ldr	r3, [pc, #484]	; (80009c0 <fsm_for_pedestrian+0x230>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fd93 	bl	8001308 <setTimer2>
			setTimer3(TIMER_INIT);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f000 fdac 	bl	8001340 <setTimer3>
			if(sysStatus == RED__GRN || sysStatus == RED__YEL) {
 80007e8:	4b76      	ldr	r3, [pc, #472]	; (80009c4 <fsm_for_pedestrian+0x234>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d003      	beq.n	80007f8 <fsm_for_pedestrian+0x68>
 80007f0:	4b74      	ldr	r3, [pc, #464]	; (80009c4 <fsm_for_pedestrian+0x234>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d107      	bne.n	8000808 <fsm_for_pedestrian+0x78>
				pedestrianStatus = GRN;
 80007f8:	4b6d      	ldr	r3, [pc, #436]	; (80009b0 <fsm_for_pedestrian+0x220>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
				pedestrianLightGrn();
 80007fe:	f000 fb8b 	bl	8000f18 <pedestrianLightGrn>
				grnBuzzer();
 8000802:	f7ff fca3 	bl	800014c <grnBuzzer>
		break;
 8000806:	e0cc      	b.n	80009a2 <fsm_for_pedestrian+0x212>
			else if(sysStatus == GRN__RED || sysStatus == YEL__RED) {
 8000808:	4b6e      	ldr	r3, [pc, #440]	; (80009c4 <fsm_for_pedestrian+0x234>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d004      	beq.n	800081a <fsm_for_pedestrian+0x8a>
 8000810:	4b6c      	ldr	r3, [pc, #432]	; (80009c4 <fsm_for_pedestrian+0x234>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b04      	cmp	r3, #4
 8000816:	f040 80c4 	bne.w	80009a2 <fsm_for_pedestrian+0x212>
				pedestrianStatus = RED;
 800081a:	4b65      	ldr	r3, [pc, #404]	; (80009b0 <fsm_for_pedestrian+0x220>)
 800081c:	2202      	movs	r2, #2
 800081e:	701a      	strb	r2, [r3, #0]
				pedestrianLightRed();
 8000820:	f000 fb92 	bl	8000f48 <pedestrianLightRed>
				redBuzzer();
 8000824:	f7ff fccc 	bl	80001c0 <redBuzzer>
		break;
 8000828:	e0bb      	b.n	80009a2 <fsm_for_pedestrian+0x212>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 800082a:	2000      	movs	r0, #0
 800082c:	f000 fa78 	bl	8000d20 <isButtonPressed>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d013      	beq.n	800085e <fsm_for_pedestrian+0xce>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 8000836:	4b5f      	ldr	r3, [pc, #380]	; (80009b4 <fsm_for_pedestrian+0x224>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b5f      	ldr	r3, [pc, #380]	; (80009b8 <fsm_for_pedestrian+0x228>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	441a      	add	r2, r3
 8000840:	4b5e      	ldr	r3, [pc, #376]	; (80009bc <fsm_for_pedestrian+0x22c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4413      	add	r3, r2
 8000846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	4a5c      	ldr	r2, [pc, #368]	; (80009c0 <fsm_for_pedestrian+0x230>)
 8000850:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 8000852:	4b5b      	ldr	r3, [pc, #364]	; (80009c0 <fsm_for_pedestrian+0x230>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fd56 	bl	8001308 <setTimer2>
		break;
 800085c:	e0a3      	b.n	80009a6 <fsm_for_pedestrian+0x216>
		else if(sysStatus == SET_GRN || sysStatus == SET_YEL) {
 800085e:	4b59      	ldr	r3, [pc, #356]	; (80009c4 <fsm_for_pedestrian+0x234>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b06      	cmp	r3, #6
 8000864:	d003      	beq.n	800086e <fsm_for_pedestrian+0xde>
 8000866:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <fsm_for_pedestrian+0x234>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b05      	cmp	r3, #5
 800086c:	d10a      	bne.n	8000884 <fsm_for_pedestrian+0xf4>
			setTimer2(0);
 800086e:	2000      	movs	r0, #0
 8000870:	f000 fd4a 	bl	8001308 <setTimer2>
			pedestrianStatus = WAIT;
 8000874:	4b4e      	ldr	r3, [pc, #312]	; (80009b0 <fsm_for_pedestrian+0x220>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 800087a:	f000 fb7d 	bl	8000f78 <pedestrianLightOff>
			stopBuzzer();
 800087e:	f7ff fcd1 	bl	8000224 <stopBuzzer>
		break;
 8000882:	e090      	b.n	80009a6 <fsm_for_pedestrian+0x216>
		else if(timer2_flag == 1) {
 8000884:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <fsm_for_pedestrian+0x238>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d10a      	bne.n	80008a2 <fsm_for_pedestrian+0x112>
			setTimer2(0);
 800088c:	2000      	movs	r0, #0
 800088e:	f000 fd3b 	bl	8001308 <setTimer2>
			pedestrianStatus = WAIT;
 8000892:	4b47      	ldr	r3, [pc, #284]	; (80009b0 <fsm_for_pedestrian+0x220>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 8000898:	f000 fb6e 	bl	8000f78 <pedestrianLightOff>
			stopBuzzer();
 800089c:	f7ff fcc2 	bl	8000224 <stopBuzzer>
		break;
 80008a0:	e081      	b.n	80009a6 <fsm_for_pedestrian+0x216>
		else if(sysStatus == GRN__RED) {
 80008a2:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <fsm_for_pedestrian+0x234>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d107      	bne.n	80008ba <fsm_for_pedestrian+0x12a>
			pedestrianStatus = RED;
 80008aa:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <fsm_for_pedestrian+0x220>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	701a      	strb	r2, [r3, #0]
			pedestrianLightRed();
 80008b0:	f000 fb4a 	bl	8000f48 <pedestrianLightRed>
			redBuzzer();
 80008b4:	f7ff fc84 	bl	80001c0 <redBuzzer>
		break;
 80008b8:	e075      	b.n	80009a6 <fsm_for_pedestrian+0x216>
		else if(timer3_flag == 1) {
 80008ba:	4b44      	ldr	r3, [pc, #272]	; (80009cc <fsm_for_pedestrian+0x23c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d171      	bne.n	80009a6 <fsm_for_pedestrian+0x216>
			if(sysStatus == RED__YEL) {
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <fsm_for_pedestrian+0x234>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d107      	bne.n	80008da <fsm_for_pedestrian+0x14a>
				setTimer3(LED_BLINK);
 80008ca:	2064      	movs	r0, #100	; 0x64
 80008cc:	f000 fd38 	bl	8001340 <setTimer3>
				pedestrianLightBlinkGrn();
 80008d0:	f000 faf2 	bl	8000eb8 <pedestrianLightBlinkGrn>
				grnBuzzer();
 80008d4:	f7ff fc3a 	bl	800014c <grnBuzzer>
		break;
 80008d8:	e065      	b.n	80009a6 <fsm_for_pedestrian+0x216>
				setTimer3(200);
 80008da:	20c8      	movs	r0, #200	; 0xc8
 80008dc:	f000 fd30 	bl	8001340 <setTimer3>
				grnBuzzer();
 80008e0:	f7ff fc34 	bl	800014c <grnBuzzer>
		break;
 80008e4:	e05f      	b.n	80009a6 <fsm_for_pedestrian+0x216>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 fa1a 	bl	8000d20 <isButtonPressed>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d013      	beq.n	800091a <fsm_for_pedestrian+0x18a>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <fsm_for_pedestrian+0x224>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <fsm_for_pedestrian+0x228>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	441a      	add	r2, r3
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <fsm_for_pedestrian+0x22c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4413      	add	r3, r2
 8000902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	4a2d      	ldr	r2, [pc, #180]	; (80009c0 <fsm_for_pedestrian+0x230>)
 800090c:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 800090e:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <fsm_for_pedestrian+0x230>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fcf8 	bl	8001308 <setTimer2>
		break;
 8000918:	e047      	b.n	80009aa <fsm_for_pedestrian+0x21a>
		else if(sysStatus == SET_GRN || sysStatus == SET_YEL) {
 800091a:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <fsm_for_pedestrian+0x234>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b06      	cmp	r3, #6
 8000920:	d003      	beq.n	800092a <fsm_for_pedestrian+0x19a>
 8000922:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <fsm_for_pedestrian+0x234>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b05      	cmp	r3, #5
 8000928:	d10a      	bne.n	8000940 <fsm_for_pedestrian+0x1b0>
			setTimer2(0);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 fcec 	bl	8001308 <setTimer2>
			pedestrianStatus = WAIT;
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <fsm_for_pedestrian+0x220>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 8000936:	f000 fb1f 	bl	8000f78 <pedestrianLightOff>
			stopBuzzer();
 800093a:	f7ff fc73 	bl	8000224 <stopBuzzer>
		break;
 800093e:	e034      	b.n	80009aa <fsm_for_pedestrian+0x21a>
		else if(timer2_flag == 1) {
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <fsm_for_pedestrian+0x238>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d10a      	bne.n	800095e <fsm_for_pedestrian+0x1ce>
			setTimer2(0);
 8000948:	2000      	movs	r0, #0
 800094a:	f000 fcdd 	bl	8001308 <setTimer2>
			pedestrianStatus = WAIT;
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <fsm_for_pedestrian+0x220>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 8000954:	f000 fb10 	bl	8000f78 <pedestrianLightOff>
			stopBuzzer();
 8000958:	f7ff fc64 	bl	8000224 <stopBuzzer>
		break;
 800095c:	e025      	b.n	80009aa <fsm_for_pedestrian+0x21a>
		else if(sysStatus == RED__GRN) {
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <fsm_for_pedestrian+0x234>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d107      	bne.n	8000976 <fsm_for_pedestrian+0x1e6>
			pedestrianStatus = GRN;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <fsm_for_pedestrian+0x220>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
			pedestrianLightGrn();
 800096c:	f000 fad4 	bl	8000f18 <pedestrianLightGrn>
			grnBuzzer();
 8000970:	f7ff fbec 	bl	800014c <grnBuzzer>
		break;
 8000974:	e019      	b.n	80009aa <fsm_for_pedestrian+0x21a>
		else if(timer3_flag == 1) {
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <fsm_for_pedestrian+0x23c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d115      	bne.n	80009aa <fsm_for_pedestrian+0x21a>
			if(sysStatus == YEL__RED) {
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <fsm_for_pedestrian+0x234>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b04      	cmp	r3, #4
 8000984:	d107      	bne.n	8000996 <fsm_for_pedestrian+0x206>
				setTimer3(LED_BLINK);
 8000986:	2064      	movs	r0, #100	; 0x64
 8000988:	f000 fcda 	bl	8001340 <setTimer3>
				pedestrianLightBlinkRed();
 800098c:	f000 faac 	bl	8000ee8 <pedestrianLightBlinkRed>
				redBuzzer();
 8000990:	f7ff fc16 	bl	80001c0 <redBuzzer>
		break;
 8000994:	e009      	b.n	80009aa <fsm_for_pedestrian+0x21a>
				setTimer3(200);
 8000996:	20c8      	movs	r0, #200	; 0xc8
 8000998:	f000 fcd2 	bl	8001340 <setTimer3>
				redBuzzer();
 800099c:	f7ff fc10 	bl	80001c0 <redBuzzer>
		break;
 80009a0:	e003      	b.n	80009aa <fsm_for_pedestrian+0x21a>
		break;
 80009a2:	bf00      	nop
 80009a4:	e002      	b.n	80009ac <fsm_for_pedestrian+0x21c>
		break;
 80009a6:	bf00      	nop
 80009a8:	e000      	b.n	80009ac <fsm_for_pedestrian+0x21c>
		break;
 80009aa:	bf00      	nop
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200003c1 	.word	0x200003c1
 80009b4:	200002c4 	.word	0x200002c4
 80009b8:	200002c8 	.word	0x200002c8
 80009bc:	200002cc 	.word	0x200002cc
 80009c0:	200003bc 	.word	0x200003bc
 80009c4:	200003c0 	.word	0x200003c0
 80009c8:	20000714 	.word	0x20000714
 80009cc:	2000071c 	.word	0x2000071c

080009d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	4b45      	ldr	r3, [pc, #276]	; (8000afc <MX_GPIO_Init+0x12c>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a44      	ldr	r2, [pc, #272]	; (8000afc <MX_GPIO_Init+0x12c>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b42      	ldr	r3, [pc, #264]	; (8000afc <MX_GPIO_Init+0x12c>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fc:	4b3f      	ldr	r3, [pc, #252]	; (8000afc <MX_GPIO_Init+0x12c>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a3e      	ldr	r2, [pc, #248]	; (8000afc <MX_GPIO_Init+0x12c>)
 8000a02:	f043 0320 	orr.w	r3, r3, #32
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <MX_GPIO_Init+0x12c>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0320 	and.w	r3, r3, #32
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b39      	ldr	r3, [pc, #228]	; (8000afc <MX_GPIO_Init+0x12c>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a38      	ldr	r2, [pc, #224]	; (8000afc <MX_GPIO_Init+0x12c>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b36      	ldr	r3, [pc, #216]	; (8000afc <MX_GPIO_Init+0x12c>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b33      	ldr	r3, [pc, #204]	; (8000afc <MX_GPIO_Init+0x12c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a32      	ldr	r2, [pc, #200]	; (8000afc <MX_GPIO_Init+0x12c>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b30      	ldr	r3, [pc, #192]	; (8000afc <MX_GPIO_Init+0x12c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000a4a:	482d      	ldr	r0, [pc, #180]	; (8000b00 <MX_GPIO_Init+0x130>)
 8000a4c:	f001 fb1d 	bl	800208a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a56:	482b      	ldr	r0, [pc, #172]	; (8000b04 <MX_GPIO_Init+0x134>)
 8000a58:	f001 fb17 	bl	800208a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a62:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <MX_GPIO_Init+0x138>)
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4826      	ldr	r0, [pc, #152]	; (8000b0c <MX_GPIO_Init+0x13c>)
 8000a72:	f001 f96f 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000a76:	2313      	movs	r3, #19
 8000a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4619      	mov	r1, r3
 8000a88:	481d      	ldr	r0, [pc, #116]	; (8000b00 <MX_GPIO_Init+0x130>)
 8000a8a:	f001 f963 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 8000a8e:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4816      	ldr	r0, [pc, #88]	; (8000b00 <MX_GPIO_Init+0x130>)
 8000aa8:	f001 f954 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000aac:	2301      	movs	r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_GPIO_Init+0x134>)
 8000ac0:	f001 f948 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000ac4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	4619      	mov	r1, r3
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <MX_GPIO_Init+0x134>)
 8000ade:	f001 f939 	bl	8001d54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2028      	movs	r0, #40	; 0x28
 8000ae8:	f001 f8fd 	bl	8001ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aec:	2028      	movs	r0, #40	; 0x28
 8000aee:	f001 f916 	bl	8001d1e <HAL_NVIC_EnableIRQ>

}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010800 	.word	0x40010800
 8000b04:	40010c00 	.word	0x40010c00
 8000b08:	10110000 	.word	0x10110000
 8000b0c:	40011000 	.word	0x40011000

08000b10 <buttonRead>:
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonHold[NO_OF_BUTTONS] = {0, 0, 0, 0};
static uint16_t counterForButtonDoublePressed[NO_OF_BUTTONS] = {0, 0, 0, 0};

void buttonRead(void){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	e0e0      	b.n	8000cde <buttonRead+0x1ce>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000b1c:	4a74      	ldr	r2, [pc, #464]	; (8000cf0 <buttonRead+0x1e0>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	7819      	ldrb	r1, [r3, #0]
 8000b24:	4a73      	ldr	r2, [pc, #460]	; (8000cf4 <buttonRead+0x1e4>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	460a      	mov	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000b2e:	4a72      	ldr	r2, [pc, #456]	; (8000cf8 <buttonRead+0x1e8>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	4a6e      	ldr	r2, [pc, #440]	; (8000cf0 <buttonRead+0x1e0>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000b40:	4a6e      	ldr	r2, [pc, #440]	; (8000cfc <buttonRead+0x1ec>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b48:	496d      	ldr	r1, [pc, #436]	; (8000d00 <buttonRead+0x1f0>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b50:	4619      	mov	r1, r3
 8000b52:	4610      	mov	r0, r2
 8000b54:	f001 fa82 	bl	800205c <HAL_GPIO_ReadPin>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4a66      	ldr	r2, [pc, #408]	; (8000cf8 <buttonRead+0x1e8>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	460a      	mov	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
		if((debounceButtonBuffer2[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer0[i])) {
 8000b66:	4a63      	ldr	r2, [pc, #396]	; (8000cf4 <buttonRead+0x1e4>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	4960      	ldr	r1, [pc, #384]	; (8000cf0 <buttonRead+0x1e0>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	440b      	add	r3, r1
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	f040 80ae 	bne.w	8000cd8 <buttonRead+0x1c8>
 8000b7c:	4a5c      	ldr	r2, [pc, #368]	; (8000cf0 <buttonRead+0x1e0>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	495c      	ldr	r1, [pc, #368]	; (8000cf8 <buttonRead+0x1e8>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	440b      	add	r3, r1
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f040 80a3 	bne.w	8000cd8 <buttonRead+0x1c8>
			if(buttonBuffer[i] != debounceButtonBuffer0[i]) {
 8000b92:	4a5c      	ldr	r2, [pc, #368]	; (8000d04 <buttonRead+0x1f4>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	4957      	ldr	r1, [pc, #348]	; (8000cf8 <buttonRead+0x1e8>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	440b      	add	r3, r1
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d05c      	beq.n	8000c60 <buttonRead+0x150>
				buttonBuffer[i] = debounceButtonBuffer0[i];
 8000ba6:	4a54      	ldr	r2, [pc, #336]	; (8000cf8 <buttonRead+0x1e8>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	7819      	ldrb	r1, [r3, #0]
 8000bae:	4a55      	ldr	r2, [pc, #340]	; (8000d04 <buttonRead+0x1f4>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000bb8:	4a52      	ldr	r2, [pc, #328]	; (8000d04 <buttonRead+0x1f4>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d13d      	bne.n	8000c40 <buttonRead+0x130>
					counterForButtonHold[i] = DURATION_FOR_BUTTON_HOLD;
 8000bc4:	4a50      	ldr	r2, [pc, #320]	; (8000d08 <buttonRead+0x1f8>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					if(counterForButtonDoublePressed[i] > 0 && counterForButtonDoublePressed[i] < WAIT_FOR_DOUBLE_PRESS / SYSTEM_DELAY) {
 8000bd0:	4a4e      	ldr	r2, [pc, #312]	; (8000d0c <buttonRead+0x1fc>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d010      	beq.n	8000bfe <buttonRead+0xee>
 8000bdc:	4a4b      	ldr	r2, [pc, #300]	; (8000d0c <buttonRead+0x1fc>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000be4:	2b31      	cmp	r3, #49	; 0x31
 8000be6:	d80a      	bhi.n	8000bfe <buttonRead+0xee>
						flagForButtonDoublePressed[i] = 1;
 8000be8:	4a49      	ldr	r2, [pc, #292]	; (8000d10 <buttonRead+0x200>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
						counterForButtonDoublePressed[i] = 0;
 8000bf2:	4a46      	ldr	r2, [pc, #280]	; (8000d0c <buttonRead+0x1fc>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000bfc:	e005      	b.n	8000c0a <buttonRead+0xfa>
					}
					else {
						counterForButtonDoublePressed[i] = WAIT_FOR_DOUBLE_PRESS;
 8000bfe:	4a43      	ldr	r2, [pc, #268]	; (8000d0c <buttonRead+0x1fc>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}

					if(SYSTEM_DELAY > 0) {
						counterForButtonHold[i] /= SYSTEM_DELAY;
 8000c0a:	4a3f      	ldr	r2, [pc, #252]	; (8000d08 <buttonRead+0x1f8>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c12:	4a40      	ldr	r2, [pc, #256]	; (8000d14 <buttonRead+0x204>)
 8000c14:	fba2 2303 	umull	r2, r3, r2, r3
 8000c18:	08db      	lsrs	r3, r3, #3
 8000c1a:	b299      	uxth	r1, r3
 8000c1c:	4a3a      	ldr	r2, [pc, #232]	; (8000d08 <buttonRead+0x1f8>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						counterForButtonDoublePressed[i] /= SYSTEM_DELAY;
 8000c24:	4a39      	ldr	r2, [pc, #228]	; (8000d0c <buttonRead+0x1fc>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c2c:	4a39      	ldr	r2, [pc, #228]	; (8000d14 <buttonRead+0x204>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	08db      	lsrs	r3, r3, #3
 8000c34:	b299      	uxth	r1, r3
 8000c36:	4a35      	ldr	r2, [pc, #212]	; (8000d0c <buttonRead+0x1fc>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c3e:	e04b      	b.n	8000cd8 <buttonRead+0x1c8>
					}
				}
				else {
					flagForButtonHold[i] = 0;
 8000c40:	4a35      	ldr	r2, [pc, #212]	; (8000d18 <buttonRead+0x208>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
					counterForButtonDoublePressed[i]--;
 8000c4a:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <buttonRead+0x1fc>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	b299      	uxth	r1, r3
 8000c56:	4a2d      	ldr	r2, [pc, #180]	; (8000d0c <buttonRead+0x1fc>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c5e:	e03b      	b.n	8000cd8 <buttonRead+0x1c8>
				}
			}
			else {
				if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000c60:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <buttonRead+0x1f4>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d11a      	bne.n	8000ca2 <buttonRead+0x192>
					counterForButtonHold[i]--;
 8000c6c:	4a26      	ldr	r2, [pc, #152]	; (8000d08 <buttonRead+0x1f8>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	b299      	uxth	r1, r3
 8000c78:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <buttonRead+0x1f8>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonHold[i] == 0) {
 8000c80:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <buttonRead+0x1f8>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d125      	bne.n	8000cd8 <buttonRead+0x1c8>
						flagForButtonHold[i] = 1;
 8000c8c:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <buttonRead+0x208>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
						counterForButtonDoublePressed[i] = 0;
 8000c96:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <buttonRead+0x1fc>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ca0:	e01a      	b.n	8000cd8 <buttonRead+0x1c8>
					}
				}
				else {
					if(counterForButtonDoublePressed[i] > 0) {
 8000ca2:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <buttonRead+0x1fc>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d014      	beq.n	8000cd8 <buttonRead+0x1c8>
						counterForButtonDoublePressed[i]--;
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <buttonRead+0x1fc>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	b299      	uxth	r1, r3
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <buttonRead+0x1fc>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						if(counterForButtonDoublePressed[i] == 0) {
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <buttonRead+0x1fc>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d104      	bne.n	8000cd8 <buttonRead+0x1c8>
							flagForButtonPressed[i] = 1;
 8000cce:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <buttonRead+0x20c>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	f77f af1b 	ble.w	8000b1c <buttonRead+0xc>
					}
				}
			}
		}
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200002f4 	.word	0x200002f4
 8000cf4:	200002f8 	.word	0x200002f8
 8000cf8:	200002f0 	.word	0x200002f0
 8000cfc:	200002d4 	.word	0x200002d4
 8000d00:	200002e4 	.word	0x200002e4
 8000d04:	200002ec 	.word	0x200002ec
 8000d08:	200003d4 	.word	0x200003d4
 8000d0c:	200003dc 	.word	0x200003dc
 8000d10:	200003d0 	.word	0x200003d0
 8000d14:	cccccccd 	.word	0xcccccccd
 8000d18:	200003cc 	.word	0x200003cc
 8000d1c:	200003c8 	.word	0x200003c8

08000d20 <isButtonPressed>:

int isButtonPressed(int index) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	if(index < 0 || index > NO_OF_BUTTONS) return 0;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db02      	blt.n	8000d34 <isButtonPressed+0x14>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	dd01      	ble.n	8000d38 <isButtonPressed+0x18>
 8000d34:	2300      	movs	r3, #0
 8000d36:	e00d      	b.n	8000d54 <isButtonPressed+0x34>
	if(flagForButtonPressed[index] == 1) {
 8000d38:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <isButtonPressed+0x40>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d106      	bne.n	8000d52 <isButtonPressed+0x32>
		flagForButtonPressed[index] = 0;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <isButtonPressed+0x40>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
		return 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <isButtonPressed+0x34>
	}
	return 0;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200003c8 	.word	0x200003c8

08000d64 <isButtonDoublePressed>:
		return 1;
	}
	return 0;
}

int isButtonDoublePressed(int index) {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	if(index < 0 || index > NO_OF_BUTTONS) return 0;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db02      	blt.n	8000d78 <isButtonDoublePressed+0x14>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	dd01      	ble.n	8000d7c <isButtonDoublePressed+0x18>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e00d      	b.n	8000d98 <isButtonDoublePressed+0x34>
	if(flagForButtonDoublePressed[index] == 1) {
 8000d7c:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <isButtonDoublePressed+0x40>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d106      	bne.n	8000d96 <isButtonDoublePressed+0x32>
		flagForButtonDoublePressed[index] = 0;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <isButtonDoublePressed+0x40>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
		return 1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <isButtonDoublePressed+0x34>
	}
	return 0;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200003d0 	.word	0x200003d0

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dac:	f000 fe62 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db0:	f000 f832 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db4:	f7ff fe0c 	bl	80009d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000db8:	f000 fdce 	bl	8001958 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000dbc:	f000 fc12 	bl	80015e4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000dc0:	f000 fbc4 	bl	800154c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000dc4:	480e      	ldr	r0, [pc, #56]	; (8000e00 <main+0x58>)
 8000dc6:	f001 fe1d 	bl	8002a04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <main+0x5c>)
 8000dce:	f001 fec3 	bl	8002b58 <HAL_TIM_PWM_Start>

  SCH_Add_Task(&timerRun, 0, 10);
 8000dd2:	220a      	movs	r2, #10
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <main+0x60>)
 8000dd8:	f000 f8e6 	bl	8000fa8 <SCH_Add_Task>
  SCH_Add_Task(&buttonRead, 10, 10);
 8000ddc:	220a      	movs	r2, #10
 8000dde:	210a      	movs	r1, #10
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <main+0x64>)
 8000de2:	f000 f8e1 	bl	8000fa8 <SCH_Add_Task>
  SCH_Add_Task(&fsm_multi_mode_run, 20, 10);
 8000de6:	220a      	movs	r2, #10
 8000de8:	2114      	movs	r1, #20
 8000dea:	4809      	ldr	r0, [pc, #36]	; (8000e10 <main+0x68>)
 8000dec:	f000 f8dc 	bl	8000fa8 <SCH_Add_Task>
  SCH_Add_Task(&fsm_for_pedestrian, 30, 10);
 8000df0:	220a      	movs	r2, #10
 8000df2:	211e      	movs	r1, #30
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <main+0x6c>)
 8000df6:	f000 f8d7 	bl	8000fa8 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCH_Dispatch_Tasks();
 8000dfa:	f000 fa2d 	bl	8001258 <SCH_Dispatch_Tasks>
 8000dfe:	e7fc      	b.n	8000dfa <main+0x52>
 8000e00:	20000724 	.word	0x20000724
 8000e04:	2000076c 	.word	0x2000076c
 8000e08:	08001379 	.word	0x08001379
 8000e0c:	08000b11 	.word	0x08000b11
 8000e10:	0800024d 	.word	0x0800024d
 8000e14:	08000791 	.word	0x08000791

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	; 0x40
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	2228      	movs	r2, #40	; 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 fedc 	bl	8003be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e42:	2310      	movs	r3, #16
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e4e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 f969 	bl	8002130 <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e64:	f000 f823 	bl	8000eae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2102      	movs	r1, #2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fbd6 	bl	8002634 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e8e:	f000 f80e 	bl	8000eae <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3740      	adds	r7, #64	; 0x40
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000ea2:	f000 f9fd 	bl	80012a0 <SCH_Update>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb2:	b672      	cpsid	i
}
 8000eb4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <Error_Handler+0x8>

08000eb8 <pedestrianLightBlinkGrn>:
uint16_t pedestrianLightPin[NUM_OF_PORTS] = {
		D6_Pin,
		D7_Pin
};

void pedestrianLightBlinkGrn(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT]);
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <pedestrianLightBlinkGrn+0x28>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <pedestrianLightBlinkGrn+0x2c>)
 8000ec2:	8852      	ldrh	r2, [r2, #2]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 f8f7 	bl	80020ba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <pedestrianLightBlinkGrn+0x28>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <pedestrianLightBlinkGrn+0x2c>)
 8000ed2:	8811      	ldrh	r1, [r2, #0]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 f8d7 	bl	800208a <HAL_GPIO_WritePin>
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200002fc 	.word	0x200002fc
 8000ee4:	20000304 	.word	0x20000304

08000ee8 <pedestrianLightBlinkRed>:

void pedestrianLightBlinkRed(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT]);
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <pedestrianLightBlinkRed+0x28>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <pedestrianLightBlinkRed+0x2c>)
 8000ef2:	8812      	ldrh	r2, [r2, #0]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 f8df 	bl	80020ba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <pedestrianLightBlinkRed+0x28>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <pedestrianLightBlinkRed+0x2c>)
 8000f02:	8851      	ldrh	r1, [r2, #2]
 8000f04:	2200      	movs	r2, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 f8bf 	bl	800208a <HAL_GPIO_WritePin>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200002fc 	.word	0x200002fc
 8000f14:	20000304 	.word	0x20000304

08000f18 <pedestrianLightGrn>:

void pedestrianLightGrn(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], ON);
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <pedestrianLightGrn+0x28>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <pedestrianLightGrn+0x2c>)
 8000f22:	8851      	ldrh	r1, [r2, #2]
 8000f24:	2201      	movs	r2, #1
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 f8af 	bl	800208a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <pedestrianLightGrn+0x28>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <pedestrianLightGrn+0x2c>)
 8000f32:	8811      	ldrh	r1, [r2, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f8a7 	bl	800208a <HAL_GPIO_WritePin>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200002fc 	.word	0x200002fc
 8000f44:	20000304 	.word	0x20000304

08000f48 <pedestrianLightRed>:

void pedestrianLightRed(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], ON);
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <pedestrianLightRed+0x28>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <pedestrianLightRed+0x2c>)
 8000f52:	8811      	ldrh	r1, [r2, #0]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 f897 	bl	800208a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <pedestrianLightRed+0x28>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <pedestrianLightRed+0x2c>)
 8000f62:	8851      	ldrh	r1, [r2, #2]
 8000f64:	2200      	movs	r2, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 f88f 	bl	800208a <HAL_GPIO_WritePin>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200002fc 	.word	0x200002fc
 8000f74:	20000304 	.word	0x20000304

08000f78 <pedestrianLightOff>:

void pedestrianLightOff(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <pedestrianLightOff+0x28>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <pedestrianLightOff+0x2c>)
 8000f82:	8851      	ldrh	r1, [r2, #2]
 8000f84:	2200      	movs	r2, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 f87f 	bl	800208a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <pedestrianLightOff+0x28>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <pedestrianLightOff+0x2c>)
 8000f92:	8811      	ldrh	r1, [r2, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 f877 	bl	800208a <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200002fc 	.word	0x200002fc
 8000fa4:	20000304 	.word	0x20000304

08000fa8 <SCH_Add_Task>:
		SCH_tasks_G[Index].Period = 0;
		SCH_tasks_G[Index].RunMe = 0;
	}
}

uint32_t SCH_Add_Task(void (* pFunction)(void), uint32_t DELAY, uint32_t PERIOD) {
 8000fa8:	b4b0      	push	{r4, r5, r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
	if(Size == SCH_MAX_TASKS - 1) return SCH_MAX_TASKS;
 8000fb4:	4b6d      	ldr	r3, [pc, #436]	; (800116c <SCH_Add_Task+0x1c4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b27      	cmp	r3, #39	; 0x27
 8000fba:	d101      	bne.n	8000fc0 <SCH_Add_Task+0x18>
 8000fbc:	2328      	movs	r3, #40	; 0x28
 8000fbe:	e0d0      	b.n	8001162 <SCH_Add_Task+0x1ba>

	uint8_t flag = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	77fb      	strb	r3, [r7, #31]
	uint32_t Index = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
	if(SYSTEM_DELAY > 0) {
		DELAY /= SYSTEM_DELAY;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4a69      	ldr	r2, [pc, #420]	; (8001170 <SCH_Add_Task+0x1c8>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	60bb      	str	r3, [r7, #8]
	}

	for(; Index < Size && flag == 0; Index++) {
 8000fd4:	e046      	b.n	8001064 <SCH_Add_Task+0xbc>
		if(DELAY > SCH_tasks_G[Index].Delay) {
 8000fd6:	4967      	ldr	r1, [pc, #412]	; (8001174 <SCH_Add_Task+0x1cc>)
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d90c      	bls.n	8001008 <SCH_Add_Task+0x60>
			DELAY -= SCH_tasks_G[Index].Delay;
 8000fee:	4961      	ldr	r1, [pc, #388]	; (8001174 <SCH_Add_Task+0x1cc>)
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	e02a      	b.n	800105e <SCH_Add_Task+0xb6>
		}
		else {
			flag = 1;
 8001008:	2301      	movs	r3, #1
 800100a:	77fb      	strb	r3, [r7, #31]
			SCH_tasks_G[Index].Delay -= DELAY;
 800100c:	4959      	ldr	r1, [pc, #356]	; (8001174 <SCH_Add_Task+0x1cc>)
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	3304      	adds	r3, #4
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad1      	subs	r1, r2, r3
 8001022:	4854      	ldr	r0, [pc, #336]	; (8001174 <SCH_Add_Task+0x1cc>)
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4403      	add	r3, r0
 8001030:	3304      	adds	r3, #4
 8001032:	6019      	str	r1, [r3, #0]
			if(SCH_tasks_G[Index].Delay == 0) {
 8001034:	494f      	ldr	r1, [pc, #316]	; (8001174 <SCH_Add_Task+0x1cc>)
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3304      	adds	r3, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <SCH_Add_Task+0xb6>
				SCH_tasks_G[Index].RunMe = 1;
 800104a:	494a      	ldr	r1, [pc, #296]	; (8001174 <SCH_Add_Task+0x1cc>)
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	330c      	adds	r3, #12
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
	for(; Index < Size && flag == 0; Index++) {
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	3301      	adds	r3, #1
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	4b41      	ldr	r3, [pc, #260]	; (800116c <SCH_Add_Task+0x1c4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	429a      	cmp	r2, r3
 800106c:	d202      	bcs.n	8001074 <SCH_Add_Task+0xcc>
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0b0      	beq.n	8000fd6 <SCH_Add_Task+0x2e>
			}
		}
	}

	if(flag == 1) {
 8001074:	7ffb      	ldrb	r3, [r7, #31]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d135      	bne.n	80010e6 <SCH_Add_Task+0x13e>
		Index -= 1;
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	3b01      	subs	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
		for(uint32_t Temp = Size; Temp > Index; Temp--) {
 8001080:	4b3a      	ldr	r3, [pc, #232]	; (800116c <SCH_Add_Task+0x1c4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	e02a      	b.n	80010de <SCH_Add_Task+0x136>
			SCH_tasks_G[Temp] = SCH_tasks_G[Temp - 1];
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	1e5a      	subs	r2, r3, #1
 800108c:	4839      	ldr	r0, [pc, #228]	; (8001174 <SCH_Add_Task+0x1cc>)
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	460b      	mov	r3, r1
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4418      	add	r0, r3
 800109a:	4936      	ldr	r1, [pc, #216]	; (8001174 <SCH_Add_Task+0x1cc>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	4604      	mov	r4, r0
 80010a8:	461d      	mov	r5, r3
 80010aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ae:	682b      	ldr	r3, [r5, #0]
 80010b0:	6023      	str	r3, [r4, #0]
			SCH_tasks_G[Temp].TaskID += 1;
 80010b2:	4930      	ldr	r1, [pc, #192]	; (8001174 <SCH_Add_Task+0x1cc>)
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3310      	adds	r3, #16
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	1c59      	adds	r1, r3, #1
 80010c6:	482b      	ldr	r0, [pc, #172]	; (8001174 <SCH_Add_Task+0x1cc>)
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4403      	add	r3, r0
 80010d4:	3310      	adds	r3, #16
 80010d6:	6019      	str	r1, [r3, #0]
		for(uint32_t Temp = Size; Temp > Index; Temp--) {
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3b01      	subs	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d8d0      	bhi.n	8001088 <SCH_Add_Task+0xe0>
		}
	}
	SCH_tasks_G[Index].pTask = pFunction;
 80010e6:	4923      	ldr	r1, [pc, #140]	; (8001174 <SCH_Add_Task+0x1cc>)
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 80010f8:	491e      	ldr	r1, [pc, #120]	; (8001174 <SCH_Add_Task+0x1cc>)
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	3304      	adds	r3, #4
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 800110c:	4919      	ldr	r1, [pc, #100]	; (8001174 <SCH_Add_Task+0x1cc>)
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	3308      	adds	r3, #8
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = (DELAY == 0) ? 1 : 0;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	4911      	ldr	r1, [pc, #68]	; (8001174 <SCH_Add_Task+0x1cc>)
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	330c      	adds	r3, #12
 800113e:	4602      	mov	r2, r0
 8001140:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[Index].TaskID = Index;
 8001142:	490c      	ldr	r1, [pc, #48]	; (8001174 <SCH_Add_Task+0x1cc>)
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3310      	adds	r3, #16
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	601a      	str	r2, [r3, #0]

	Size += 1;
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <SCH_Add_Task+0x1c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <SCH_Add_Task+0x1c4>)
 800115e:	6013      	str	r3, [r2, #0]

	return Index;
 8001160:	69bb      	ldr	r3, [r7, #24]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bcb0      	pop	{r4, r5, r7}
 800116a:	4770      	bx	lr
 800116c:	20000704 	.word	0x20000704
 8001170:	cccccccd 	.word	0xcccccccd
 8001174:	200003e4 	.word	0x200003e4

08001178 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t TASK_INDEX) {
 8001178:	b4b0      	push	{r4, r5, r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[TASK_INDEX].pTask == 0) return;
 8001180:	4933      	ldr	r1, [pc, #204]	; (8001250 <SCH_Delete_Task+0xd8>)
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d057      	beq.n	8001244 <SCH_Delete_Task+0xcc>

	SCH_tasks_G[TASK_INDEX + 1].Delay += SCH_tasks_G[TASK_INDEX].Delay;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	492d      	ldr	r1, [pc, #180]	; (8001250 <SCH_Delete_Task+0xd8>)
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	440b      	add	r3, r1
 80011a4:	3304      	adds	r3, #4
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	4829      	ldr	r0, [pc, #164]	; (8001250 <SCH_Delete_Task+0xd8>)
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4403      	add	r3, r0
 80011b6:	3304      	adds	r3, #4
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	3201      	adds	r2, #1
 80011be:	4419      	add	r1, r3
 80011c0:	4823      	ldr	r0, [pc, #140]	; (8001250 <SCH_Delete_Task+0xd8>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4403      	add	r3, r0
 80011cc:	3304      	adds	r3, #4
 80011ce:	6019      	str	r1, [r3, #0]

	for(uint32_t Temp = TASK_INDEX; Temp < Size - 1; Temp++) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e02a      	b.n	800122c <SCH_Delete_Task+0xb4>
		SCH_tasks_G[Temp] = SCH_tasks_G[Temp + 1];
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	481d      	ldr	r0, [pc, #116]	; (8001250 <SCH_Delete_Task+0xd8>)
 80011dc:	68f9      	ldr	r1, [r7, #12]
 80011de:	460b      	mov	r3, r1
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4418      	add	r0, r3
 80011e8:	4919      	ldr	r1, [pc, #100]	; (8001250 <SCH_Delete_Task+0xd8>)
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	4604      	mov	r4, r0
 80011f6:	461d      	mov	r5, r3
 80011f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	6023      	str	r3, [r4, #0]
		SCH_tasks_G[Temp].TaskID -= 1;
 8001200:	4913      	ldr	r1, [pc, #76]	; (8001250 <SCH_Delete_Task+0xd8>)
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	3310      	adds	r3, #16
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1e59      	subs	r1, r3, #1
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <SCH_Delete_Task+0xd8>)
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4403      	add	r3, r0
 8001222:	3310      	adds	r3, #16
 8001224:	6019      	str	r1, [r3, #0]
	for(uint32_t Temp = TASK_INDEX; Temp < Size - 1; Temp++) {
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <SCH_Delete_Task+0xdc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3b01      	subs	r3, #1
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3ce      	bcc.n	80011d6 <SCH_Delete_Task+0x5e>
	}

	Size -= 1;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <SCH_Delete_Task+0xdc>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <SCH_Delete_Task+0xdc>)
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e000      	b.n	8001246 <SCH_Delete_Task+0xce>
	if(SCH_tasks_G[TASK_INDEX].pTask == 0) return;
 8001244:	bf00      	nop
}
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bcb0      	pop	{r4, r5, r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200003e4 	.word	0x200003e4
 8001254:	20000704 	.word	0x20000704

08001258 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[HEAD].RunMe == 1) {
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <SCH_Dispatch_Tasks+0x44>)
 8001260:	7b1b      	ldrb	r3, [r3, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d115      	bne.n	8001292 <SCH_Dispatch_Tasks+0x3a>
		(*SCH_tasks_G[HEAD].pTask)();
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <SCH_Dispatch_Tasks+0x44>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4798      	blx	r3

		sTask temp = SCH_tasks_G[HEAD];
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <SCH_Dispatch_Tasks+0x44>)
 800126e:	1d3c      	adds	r4, r7, #4
 8001270:	461d      	mov	r5, r3
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	682b      	ldr	r3, [r5, #0]
 8001278:	6023      	str	r3, [r4, #0]

		SCH_Delete_Task(HEAD);
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff ff7c 	bl	8001178 <SCH_Delete_Task>

		if(temp.Period > 0) {
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <SCH_Dispatch_Tasks+0x3a>
			SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68f9      	ldr	r1, [r7, #12]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe8b 	bl	8000fa8 <SCH_Add_Task>
		}
	}
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bdb0      	pop	{r4, r5, r7, pc}
 800129a:	bf00      	nop
 800129c:	200003e4 	.word	0x200003e4

080012a0 <SCH_Update>:

void SCH_Update(void) {
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[HEAD].Delay > 0) SCH_tasks_G[HEAD].Delay--;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <SCH_Update+0x2c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <SCH_Update+0x16>
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <SCH_Update+0x2c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4a06      	ldr	r2, [pc, #24]	; (80012cc <SCH_Update+0x2c>)
 80012b4:	6053      	str	r3, [r2, #4]

	if(SCH_tasks_G[HEAD].Delay == 0) {
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SCH_Update+0x2c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <SCH_Update+0x24>
		SCH_tasks_G[HEAD].RunMe = 1;
 80012be:	4b03      	ldr	r3, [pc, #12]	; (80012cc <SCH_Update+0x2c>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	731a      	strb	r2, [r3, #12]
	}
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	200003e4 	.word	0x200003e4

080012d0 <setTimer1>:
int timer2_flag = 0;

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer1_counter = duration / SYSTEM_DELAY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <setTimer1+0x2c>)
 80012dc:	fb82 1203 	smull	r1, r2, r2, r3
 80012e0:	1092      	asrs	r2, r2, #2
 80012e2:	17db      	asrs	r3, r3, #31
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4a06      	ldr	r2, [pc, #24]	; (8001300 <setTimer1+0x30>)
 80012e8:	6013      	str	r3, [r2, #0]
	} else timer1_counter = duration;
	timer1_flag = 0;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <setTimer1+0x34>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	66666667 	.word	0x66666667
 8001300:	20000708 	.word	0x20000708
 8001304:	2000070c 	.word	0x2000070c

08001308 <setTimer2>:

void setTimer2(int duration) {
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer2_counter = duration / SYSTEM_DELAY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <setTimer2+0x2c>)
 8001314:	fb82 1203 	smull	r1, r2, r2, r3
 8001318:	1092      	asrs	r2, r2, #2
 800131a:	17db      	asrs	r3, r3, #31
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	4a06      	ldr	r2, [pc, #24]	; (8001338 <setTimer2+0x30>)
 8001320:	6013      	str	r3, [r2, #0]
	} else timer2_counter = duration;
	timer2_flag = 0;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <setTimer2+0x34>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	66666667 	.word	0x66666667
 8001338:	20000710 	.word	0x20000710
 800133c:	20000714 	.word	0x20000714

08001340 <setTimer3>:


void setTimer3(int duration) {
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer3_counter = duration / SYSTEM_DELAY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <setTimer3+0x2c>)
 800134c:	fb82 1203 	smull	r1, r2, r2, r3
 8001350:	1092      	asrs	r2, r2, #2
 8001352:	17db      	asrs	r3, r3, #31
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	4a06      	ldr	r2, [pc, #24]	; (8001370 <setTimer3+0x30>)
 8001358:	6013      	str	r3, [r2, #0]
	} else timer3_counter = duration;
	timer3_flag = 0;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <setTimer3+0x34>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	66666667 	.word	0x66666667
 8001370:	20000718 	.word	0x20000718
 8001374:	2000071c 	.word	0x2000071c

08001378 <timerRun>:

void timerRun(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <timerRun+0x6c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	dd0b      	ble.n	800139c <timerRun+0x24>
		timer1_counter--;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <timerRun+0x6c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3b01      	subs	r3, #1
 800138a:	4a16      	ldr	r2, [pc, #88]	; (80013e4 <timerRun+0x6c>)
 800138c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <timerRun+0x6c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	dc02      	bgt.n	800139c <timerRun+0x24>
			timer1_flag = 1;
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <timerRun+0x70>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <timerRun+0x74>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd0b      	ble.n	80013bc <timerRun+0x44>
		timer2_counter--;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <timerRun+0x74>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <timerRun+0x74>)
 80013ac:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <timerRun+0x74>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dc02      	bgt.n	80013bc <timerRun+0x44>
			timer2_flag = 1;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <timerRun+0x78>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <timerRun+0x7c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	dd0b      	ble.n	80013dc <timerRun+0x64>
		timer3_counter--;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <timerRun+0x7c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <timerRun+0x7c>)
 80013cc:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <timerRun+0x7c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dc02      	bgt.n	80013dc <timerRun+0x64>
			timer3_flag = 1;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <timerRun+0x80>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000708 	.word	0x20000708
 80013e8:	2000070c 	.word	0x2000070c
 80013ec:	20000710 	.word	0x20000710
 80013f0:	20000714 	.word	0x20000714
 80013f4:	20000718 	.word	0x20000718
 80013f8:	2000071c 	.word	0x2000071c

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_MspInit+0x5c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_MspInit+0x5c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_MspInit+0x5c>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_MspInit+0x5c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_MspInit+0x5c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_MspInit+0x5c>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_MspInit+0x60>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_MspInit+0x60>)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a6:	f000 fb2b 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <TIM2_IRQHandler+0x10>)
 80014b6:	f001 fbf1 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000724 	.word	0x20000724

080014c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014cc:	f000 fe0e 	bl	80020ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014dc:	4a14      	ldr	r2, [pc, #80]	; (8001530 <_sbrk+0x5c>)
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <_sbrk+0x60>)
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <_sbrk+0x64>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <_sbrk+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001504:	f002 fb44 	bl	8003b90 <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	220c      	movs	r2, #12
 800150c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	e009      	b.n	8001528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <_sbrk+0x64>)
 8001524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20005000 	.word	0x20005000
 8001534:	00000400 	.word	0x00000400
 8001538:	20000720 	.word	0x20000720
 800153c:	20000810 	.word	0x20000810

08001540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	463b      	mov	r3, r7
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <MX_TIM2_Init+0x94>)
 800156a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001572:	223f      	movs	r2, #63	; 0x3f
 8001574:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_TIM2_Init+0x94>)
 800157e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_TIM2_Init+0x94>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <MX_TIM2_Init+0x94>)
 8001592:	f001 f9e7 	bl	8002964 <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800159c:	f7ff fc87 	bl	8000eae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_TIM2_Init+0x94>)
 80015ae:	f001 fd3b 	bl	8003028 <HAL_TIM_ConfigClockSource>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015b8:	f7ff fc79 	bl	8000eae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_TIM2_Init+0x94>)
 80015ca:	f002 f8b9 	bl	8003740 <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015d4:	f7ff fc6b 	bl	8000eae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000724 	.word	0x20000724

080015e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08e      	sub	sp, #56	; 0x38
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001616:	4a2d      	ldr	r2, [pc, #180]	; (80016cc <MX_TIM3_Init+0xe8>)
 8001618:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_TIM3_Init+0xe4>)
 800161c:	223f      	movs	r2, #63	; 0x3f
 800161e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001628:	f240 32e7 	movw	r2, #999	; 0x3e7
 800162c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800163a:	4823      	ldr	r0, [pc, #140]	; (80016c8 <MX_TIM3_Init+0xe4>)
 800163c:	f001 f992 	bl	8002964 <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001646:	f7ff fc32 	bl	8000eae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001654:	4619      	mov	r1, r3
 8001656:	481c      	ldr	r0, [pc, #112]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001658:	f001 fce6 	bl	8003028 <HAL_TIM_ConfigClockSource>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001662:	f7ff fc24 	bl	8000eae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001666:	4818      	ldr	r0, [pc, #96]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001668:	f001 fa1e 	bl	8002aa8 <HAL_TIM_PWM_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001672:	f7ff fc1c 	bl	8000eae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	4619      	mov	r1, r3
 8001684:	4810      	ldr	r0, [pc, #64]	; (80016c8 <MX_TIM3_Init+0xe4>)
 8001686:	f002 f85b 	bl	8003740 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001690:	f7ff fc0d 	bl	8000eae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001694:	2360      	movs	r3, #96	; 0x60
 8001696:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	4619      	mov	r1, r3
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <MX_TIM3_Init+0xe4>)
 80016ac:	f001 fbfe 	bl	8002eac <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016b6:	f7ff fbfa 	bl	8000eae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <MX_TIM3_Init+0xe4>)
 80016bc:	f000 f840 	bl	8001740 <HAL_TIM_MspPostInit>

}
 80016c0:	bf00      	nop
 80016c2:	3738      	adds	r7, #56	; 0x38
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000076c 	.word	0x2000076c
 80016cc:	40000400 	.word	0x40000400

080016d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e0:	d114      	bne.n	800170c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_TIM_Base_MspInit+0x68>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a14      	ldr	r2, [pc, #80]	; (8001738 <HAL_TIM_Base_MspInit+0x68>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_TIM_Base_MspInit+0x68>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	201c      	movs	r0, #28
 8001700:	f000 faf1 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001704:	201c      	movs	r0, #28
 8001706:	f000 fb0a 	bl	8001d1e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800170a:	e010      	b.n	800172e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_TIM_Base_MspInit+0x6c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10b      	bne.n	800172e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_TIM_Base_MspInit+0x68>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_TIM_Base_MspInit+0x68>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	61d3      	str	r3, [r2, #28]
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_TIM_Base_MspInit+0x68>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	40000400 	.word	0x40000400

08001740 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_TIM_MspPostInit+0x58>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d117      	bne.n	8001790 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_TIM_MspPostInit+0x5c>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <HAL_TIM_MspPostInit+0x5c>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_TIM_MspPostInit+0x5c>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 8001778:	2340      	movs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2302      	movs	r3, #2
 8001782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4619      	mov	r1, r3
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <HAL_TIM_MspPostInit+0x60>)
 800178c:	f000 fae2 	bl	8001d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40000400 	.word	0x40000400
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010800 	.word	0x40010800

080017a4 <trafficLightBlinkGrn>:
uint16_t trafficLightPin[NUM_OF_TRAFFIC_LIGHTS][NUM_OF_PORTS] = {
		{D2_Pin, D3_Pin},
		{D4_Pin, D5_Pin}
};

void trafficLightBlinkGrn(int index) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT]);
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <trafficLightBlinkGrn+0x44>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <trafficLightBlinkGrn+0x48>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	885b      	ldrh	r3, [r3, #2]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f000 fc79 	bl	80020ba <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], OFF);
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <trafficLightBlinkGrn+0x44>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80017d0:	4a06      	ldr	r2, [pc, #24]	; (80017ec <trafficLightBlinkGrn+0x48>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80017d8:	2200      	movs	r2, #0
 80017da:	4619      	mov	r1, r3
 80017dc:	f000 fc55 	bl	800208a <HAL_GPIO_WritePin>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000030c 	.word	0x2000030c
 80017ec:	2000031c 	.word	0x2000031c

080017f0 <trafficLightBlinkYel>:

void trafficLightBlinkYel(int index) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT]);
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <trafficLightBlinkYel+0x44>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	490d      	ldr	r1, [pc, #52]	; (8001838 <trafficLightBlinkYel+0x48>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	885b      	ldrh	r3, [r3, #2]
 800180c:	4619      	mov	r1, r3
 800180e:	4610      	mov	r0, r2
 8001810:	f000 fc53 	bl	80020ba <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT]);
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <trafficLightBlinkYel+0x44>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800181c:	4906      	ldr	r1, [pc, #24]	; (8001838 <trafficLightBlinkYel+0x48>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f000 fc47 	bl	80020ba <HAL_GPIO_TogglePin>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2000030c 	.word	0x2000030c
 8001838:	2000031c 	.word	0x2000031c

0800183c <trafficLightGrn>:
void trafficLightBlinkRed(int index) {
	HAL_GPIO_TogglePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT]);
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], OFF);
}

void trafficLightGrn(int index) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], ON);
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <trafficLightGrn+0x44>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	6858      	ldr	r0, [r3, #4]
 800184e:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <trafficLightGrn+0x48>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	885b      	ldrh	r3, [r3, #2]
 8001858:	2201      	movs	r2, #1
 800185a:	4619      	mov	r1, r3
 800185c:	f000 fc15 	bl	800208a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], OFF);
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <trafficLightGrn+0x44>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <trafficLightGrn+0x48>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	f000 fc09 	bl	800208a <HAL_GPIO_WritePin>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000030c 	.word	0x2000030c
 8001884:	2000031c 	.word	0x2000031c

08001888 <trafficLightYel>:

void trafficLightYel(int index) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], ON);
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <trafficLightYel+0x44>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	6858      	ldr	r0, [r3, #4]
 800189a:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <trafficLightYel+0x48>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	885b      	ldrh	r3, [r3, #2]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4619      	mov	r1, r3
 80018a8:	f000 fbef 	bl	800208a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], ON);
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <trafficLightYel+0x44>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <trafficLightYel+0x48>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80018bc:	2201      	movs	r2, #1
 80018be:	4619      	mov	r1, r3
 80018c0:	f000 fbe3 	bl	800208a <HAL_GPIO_WritePin>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000030c 	.word	0x2000030c
 80018d0:	2000031c 	.word	0x2000031c

080018d4 <trafficLightRed>:

void trafficLightRed(int index) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], ON);
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <trafficLightRed+0x44>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <trafficLightRed+0x48>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80018ec:	2201      	movs	r2, #1
 80018ee:	4619      	mov	r1, r3
 80018f0:	f000 fbcb 	bl	800208a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], OFF);
 80018f4:	4a08      	ldr	r2, [pc, #32]	; (8001918 <trafficLightRed+0x44>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	6858      	ldr	r0, [r3, #4]
 80018fe:	4a07      	ldr	r2, [pc, #28]	; (800191c <trafficLightRed+0x48>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	885b      	ldrh	r3, [r3, #2]
 8001908:	2200      	movs	r2, #0
 800190a:	4619      	mov	r1, r3
 800190c:	f000 fbbd 	bl	800208a <HAL_GPIO_WritePin>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	2000030c 	.word	0x2000030c
 800191c:	2000031c 	.word	0x2000031c

08001920 <displayCountdown>:
 */


#include "uart_communication.h"

void displayCountdown(int value) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b090      	sub	sp, #64	; 0x40
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	char str[50];
	HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "!7SEG=%d#\r\n", value), 1000);
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <displayCountdown+0x30>)
 8001930:	4618      	mov	r0, r3
 8001932:	f002 f95f 	bl	8003bf4 <siprintf>
 8001936:	4603      	mov	r3, r0
 8001938:	b29a      	uxth	r2, r3
 800193a:	f107 010c 	add.w	r1, r7, #12
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	4804      	ldr	r0, [pc, #16]	; (8001954 <displayCountdown+0x34>)
 8001944:	f001 ffb9 	bl	80038ba <HAL_UART_Transmit>
}
 8001948:	bf00      	nop
 800194a:	3740      	adds	r7, #64	; 0x40
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	08004500 	.word	0x08004500
 8001954:	200007b4 	.word	0x200007b4

08001958 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_USART2_UART_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001990:	f001 ff46 	bl	8003820 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800199a:	f7ff fa88 	bl	8000eae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200007b4 	.word	0x200007b4
 80019a8:	40004400 	.word	0x40004400

080019ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <HAL_UART_MspInit+0x70>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d123      	bne.n	8001a14 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_UART_MspInit+0x74>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <HAL_UART_MspInit+0x74>)
 80019d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d6:	61d3      	str	r3, [r2, #28]
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_UART_MspInit+0x74>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_UART_MspInit+0x74>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <HAL_UART_MspInit+0x74>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_UART_MspInit+0x74>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019fc:	230c      	movs	r3, #12
 80019fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2302      	movs	r3, #2
 8001a06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_UART_MspInit+0x78>)
 8001a10:	f000 f9a0 	bl	8001d54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a14:	bf00      	nop
 8001a16:	3720      	adds	r7, #32
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40004400 	.word	0x40004400
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010800 	.word	0x40010800

08001a28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a2a:	490d      	ldr	r1, [pc, #52]	; (8001a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a40:	4c0a      	ldr	r4, [pc, #40]	; (8001a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a4e:	f7ff fd77 	bl	8001540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a52:	f002 f8a3 	bl	8003b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a56:	f7ff f9a7 	bl	8000da8 <main>
  bx lr
 8001a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8001a64:	08004570 	.word	0x08004570
  ldr r2, =_sbss
 8001a68:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8001a6c:	2000080c 	.word	0x2000080c

08001a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC1_2_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_Init+0x28>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_Init+0x28>)
 8001a7e:	f043 0310 	orr.w	r3, r3, #16
 8001a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 f923 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f000 f808 	bl	8001aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff fcb4 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x54>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x58>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f93b 	bl	8001d3a <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d80a      	bhi.n	8001aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f000 f903 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <HAL_InitTick+0x5c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000308 	.word	0x20000308
 8001af8:	20000328 	.word	0x20000328
 8001afc:	20000324 	.word	0x20000324

08001b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_IncTick+0x1c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_IncTick+0x20>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <HAL_IncTick+0x20>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000328 	.word	0x20000328
 8001b20:	200007f8 	.word	0x200007f8

08001b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <HAL_GetTick+0x10>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	200007f8 	.word	0x200007f8

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0b      	blt.n	8001bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4906      	ldr	r1, [pc, #24]	; (8001bd0 <__NVIC_EnableIRQ+0x34>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	; (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	; (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f7ff ff90 	bl	8001bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff2d 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff42 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff90 	bl	8001c28 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5f 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff35 	bl	8001b9c <__NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa2 	bl	8001c8c <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b08b      	sub	sp, #44	; 0x2c
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d66:	e169      	b.n	800203c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8158 	bne.w	8002036 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	4a9a      	ldr	r2, [pc, #616]	; (8001ff4 <HAL_GPIO_Init+0x2a0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d05e      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
 8001d90:	4a98      	ldr	r2, [pc, #608]	; (8001ff4 <HAL_GPIO_Init+0x2a0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d875      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001d96:	4a98      	ldr	r2, [pc, #608]	; (8001ff8 <HAL_GPIO_Init+0x2a4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d058      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
 8001d9c:	4a96      	ldr	r2, [pc, #600]	; (8001ff8 <HAL_GPIO_Init+0x2a4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d86f      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001da2:	4a96      	ldr	r2, [pc, #600]	; (8001ffc <HAL_GPIO_Init+0x2a8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d052      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
 8001da8:	4a94      	ldr	r2, [pc, #592]	; (8001ffc <HAL_GPIO_Init+0x2a8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d869      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001dae:	4a94      	ldr	r2, [pc, #592]	; (8002000 <HAL_GPIO_Init+0x2ac>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d04c      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
 8001db4:	4a92      	ldr	r2, [pc, #584]	; (8002000 <HAL_GPIO_Init+0x2ac>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d863      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001dba:	4a92      	ldr	r2, [pc, #584]	; (8002004 <HAL_GPIO_Init+0x2b0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d046      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
 8001dc0:	4a90      	ldr	r2, [pc, #576]	; (8002004 <HAL_GPIO_Init+0x2b0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d85d      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001dc6:	2b12      	cmp	r3, #18
 8001dc8:	d82a      	bhi.n	8001e20 <HAL_GPIO_Init+0xcc>
 8001dca:	2b12      	cmp	r3, #18
 8001dcc:	d859      	bhi.n	8001e82 <HAL_GPIO_Init+0x12e>
 8001dce:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <HAL_GPIO_Init+0x80>)
 8001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd4:	08001e4f 	.word	0x08001e4f
 8001dd8:	08001e29 	.word	0x08001e29
 8001ddc:	08001e3b 	.word	0x08001e3b
 8001de0:	08001e7d 	.word	0x08001e7d
 8001de4:	08001e83 	.word	0x08001e83
 8001de8:	08001e83 	.word	0x08001e83
 8001dec:	08001e83 	.word	0x08001e83
 8001df0:	08001e83 	.word	0x08001e83
 8001df4:	08001e83 	.word	0x08001e83
 8001df8:	08001e83 	.word	0x08001e83
 8001dfc:	08001e83 	.word	0x08001e83
 8001e00:	08001e83 	.word	0x08001e83
 8001e04:	08001e83 	.word	0x08001e83
 8001e08:	08001e83 	.word	0x08001e83
 8001e0c:	08001e83 	.word	0x08001e83
 8001e10:	08001e83 	.word	0x08001e83
 8001e14:	08001e83 	.word	0x08001e83
 8001e18:	08001e31 	.word	0x08001e31
 8001e1c:	08001e45 	.word	0x08001e45
 8001e20:	4a79      	ldr	r2, [pc, #484]	; (8002008 <HAL_GPIO_Init+0x2b4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e26:	e02c      	b.n	8001e82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e029      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	3304      	adds	r3, #4
 8001e36:	623b      	str	r3, [r7, #32]
          break;
 8001e38:	e024      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	3308      	adds	r3, #8
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e01f      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	330c      	adds	r3, #12
 8001e4a:	623b      	str	r3, [r7, #32]
          break;
 8001e4c:	e01a      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e56:	2304      	movs	r3, #4
 8001e58:	623b      	str	r3, [r7, #32]
          break;
 8001e5a:	e013      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e64:	2308      	movs	r3, #8
 8001e66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	611a      	str	r2, [r3, #16]
          break;
 8001e6e:	e009      	b.n	8001e84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e70:	2308      	movs	r3, #8
 8001e72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	615a      	str	r2, [r3, #20]
          break;
 8001e7a:	e003      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
          break;
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x130>
          break;
 8001e82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2bff      	cmp	r3, #255	; 0xff
 8001e88:	d801      	bhi.n	8001e8e <HAL_GPIO_Init+0x13a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	e001      	b.n	8001e92 <HAL_GPIO_Init+0x13e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3304      	adds	r3, #4
 8001e92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2bff      	cmp	r3, #255	; 0xff
 8001e98:	d802      	bhi.n	8001ea0 <HAL_GPIO_Init+0x14c>
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	e002      	b.n	8001ea6 <HAL_GPIO_Init+0x152>
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	3b08      	subs	r3, #8
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	210f      	movs	r1, #15
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	6a39      	ldr	r1, [r7, #32]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80b1 	beq.w	8002036 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ed4:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_GPIO_Init+0x2b8>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4a4c      	ldr	r2, [pc, #304]	; (800200c <HAL_GPIO_Init+0x2b8>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6193      	str	r3, [r2, #24]
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_GPIO_Init+0x2b8>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eec:	4a48      	ldr	r2, [pc, #288]	; (8002010 <HAL_GPIO_Init+0x2bc>)
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	220f      	movs	r2, #15
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a40      	ldr	r2, [pc, #256]	; (8002014 <HAL_GPIO_Init+0x2c0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <HAL_GPIO_Init+0x1ec>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3f      	ldr	r2, [pc, #252]	; (8002018 <HAL_GPIO_Init+0x2c4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00d      	beq.n	8001f3c <HAL_GPIO_Init+0x1e8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3e      	ldr	r2, [pc, #248]	; (800201c <HAL_GPIO_Init+0x2c8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d007      	beq.n	8001f38 <HAL_GPIO_Init+0x1e4>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3d      	ldr	r2, [pc, #244]	; (8002020 <HAL_GPIO_Init+0x2cc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_GPIO_Init+0x1e0>
 8001f30:	2303      	movs	r3, #3
 8001f32:	e006      	b.n	8001f42 <HAL_GPIO_Init+0x1ee>
 8001f34:	2304      	movs	r3, #4
 8001f36:	e004      	b.n	8001f42 <HAL_GPIO_Init+0x1ee>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x1ee>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_GPIO_Init+0x1ee>
 8001f40:	2300      	movs	r3, #0
 8001f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f44:	f002 0203 	and.w	r2, r2, #3
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	4093      	lsls	r3, r2
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f52:	492f      	ldr	r1, [pc, #188]	; (8002010 <HAL_GPIO_Init+0x2bc>)
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	492c      	ldr	r1, [pc, #176]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4928      	ldr	r1, [pc, #160]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4922      	ldr	r1, [pc, #136]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
 8001fa0:	e006      	b.n	8001fb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	491e      	ldr	r1, [pc, #120]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4918      	ldr	r1, [pc, #96]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4914      	ldr	r1, [pc, #80]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d021      	beq.n	8002028 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	490e      	ldr	r1, [pc, #56]	; (8002024 <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60cb      	str	r3, [r1, #12]
 8001ff0:	e021      	b.n	8002036 <HAL_GPIO_Init+0x2e2>
 8001ff2:	bf00      	nop
 8001ff4:	10320000 	.word	0x10320000
 8001ff8:	10310000 	.word	0x10310000
 8001ffc:	10220000 	.word	0x10220000
 8002000:	10210000 	.word	0x10210000
 8002004:	10120000 	.word	0x10120000
 8002008:	10110000 	.word	0x10110000
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000
 8002014:	40010800 	.word	0x40010800
 8002018:	40010c00 	.word	0x40010c00
 800201c:	40011000 	.word	0x40011000
 8002020:	40011400 	.word	0x40011400
 8002024:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_GPIO_Init+0x304>)
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	43db      	mvns	r3, r3
 8002030:	4909      	ldr	r1, [pc, #36]	; (8002058 <HAL_GPIO_Init+0x304>)
 8002032:	4013      	ands	r3, r2
 8002034:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	3301      	adds	r3, #1
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	f47f ae8e 	bne.w	8001d68 <HAL_GPIO_Init+0x14>
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	372c      	adds	r7, #44	; 0x2c
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	40010400 	.word	0x40010400

0800205c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e001      	b.n	800207e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	807b      	strh	r3, [r7, #2]
 8002096:	4613      	mov	r3, r2
 8002098:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800209a:	787b      	ldrb	r3, [r7, #1]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a0:	887a      	ldrh	r2, [r7, #2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020a6:	e003      	b.n	80020b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	041a      	lsls	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	611a      	str	r2, [r3, #16]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020cc:	887a      	ldrh	r2, [r7, #2]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	041a      	lsls	r2, r3, #16
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	400b      	ands	r3, r1
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f806 	bl	800211c <HAL_GPIO_EXTI_Callback>
  }
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e272      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8087 	beq.w	800225e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002150:	4b92      	ldr	r3, [pc, #584]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b04      	cmp	r3, #4
 800215a:	d00c      	beq.n	8002176 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800215c:	4b8f      	ldr	r3, [pc, #572]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	d112      	bne.n	800218e <HAL_RCC_OscConfig+0x5e>
 8002168:	4b8c      	ldr	r3, [pc, #560]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002174:	d10b      	bne.n	800218e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002176:	4b89      	ldr	r3, [pc, #548]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d06c      	beq.n	800225c <HAL_RCC_OscConfig+0x12c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d168      	bne.n	800225c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e24c      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x76>
 8002198:	4b80      	ldr	r3, [pc, #512]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a7f      	ldr	r2, [pc, #508]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e02e      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x98>
 80021ae:	4b7b      	ldr	r3, [pc, #492]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7a      	ldr	r2, [pc, #488]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b78      	ldr	r3, [pc, #480]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a77      	ldr	r2, [pc, #476]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0xbc>
 80021d2:	4b72      	ldr	r3, [pc, #456]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a71      	ldr	r2, [pc, #452]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b6f      	ldr	r3, [pc, #444]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6e      	ldr	r2, [pc, #440]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021ec:	4b6b      	ldr	r3, [pc, #428]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6a      	ldr	r2, [pc, #424]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b68      	ldr	r3, [pc, #416]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a67      	ldr	r2, [pc, #412]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002202:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fc8a 	bl	8001b24 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7ff fc86 	bl	8001b24 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e200      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b5d      	ldr	r3, [pc, #372]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0xe4>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fc76 	bl	8001b24 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fc72 	bl	8001b24 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1ec      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x10c>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226a:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002276:	4b49      	ldr	r3, [pc, #292]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b08      	cmp	r3, #8
 8002280:	d11c      	bne.n	80022bc <HAL_RCC_OscConfig+0x18c>
 8002282:	4b46      	ldr	r3, [pc, #280]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d116      	bne.n	80022bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_RCC_OscConfig+0x176>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1c0      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	4b3d      	ldr	r3, [pc, #244]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4939      	ldr	r1, [pc, #228]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	e03a      	b.n	8002332 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c4:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7ff fc2b 	bl	8001b24 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d2:	f7ff fc27 	bl	8001b24 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1a1      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4927      	ldr	r1, [pc, #156]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff fc0a 	bl	8001b24 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002314:	f7ff fc06 	bl	8001b24 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e180      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d03a      	beq.n	80023b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d019      	beq.n	800237a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_RCC_OscConfig+0x274>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7ff fbea 	bl	8001b24 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002354:	f7ff fbe6 	bl	8001b24 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e160      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_RCC_OscConfig+0x26c>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002372:	2001      	movs	r0, #1
 8002374:	f000 fad8 	bl	8002928 <RCC_Delay>
 8002378:	e01c      	b.n	80023b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_RCC_OscConfig+0x274>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7ff fbd0 	bl	8001b24 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002386:	e00f      	b.n	80023a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7ff fbcc 	bl	8001b24 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d908      	bls.n	80023a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e146      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	42420000 	.word	0x42420000
 80023a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	4b92      	ldr	r3, [pc, #584]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e9      	bne.n	8002388 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80a6 	beq.w	800250e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4a87      	ldr	r2, [pc, #540]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	61d3      	str	r3, [r2, #28]
 80023de:	4b85      	ldr	r3, [pc, #532]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b82      	ldr	r3, [pc, #520]	; (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d118      	bne.n	800242c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b7f      	ldr	r3, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7e      	ldr	r2, [pc, #504]	; (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7ff fb8d 	bl	8001b24 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240e:	f7ff fb89 	bl	8001b24 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b64      	cmp	r3, #100	; 0x64
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e103      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	4b75      	ldr	r3, [pc, #468]	; (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x312>
 8002434:	4b6f      	ldr	r3, [pc, #444]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a6e      	ldr	r2, [pc, #440]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e02d      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x334>
 800244a:	4b6a      	ldr	r3, [pc, #424]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a69      	ldr	r2, [pc, #420]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6213      	str	r3, [r2, #32]
 8002456:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a66      	ldr	r2, [pc, #408]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	e01c      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x356>
 800246c:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4a60      	ldr	r2, [pc, #384]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	6213      	str	r3, [r2, #32]
 8002478:	4b5e      	ldr	r3, [pc, #376]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4a5d      	ldr	r2, [pc, #372]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6213      	str	r3, [r2, #32]
 8002484:	e00b      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002486:	4b5b      	ldr	r3, [pc, #364]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a5a      	ldr	r2, [pc, #360]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6213      	str	r3, [r2, #32]
 8002492:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a57      	ldr	r2, [pc, #348]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d015      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7ff fb3d 	bl	8001b24 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7ff fb39 	bl	8001b24 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0b1      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	4b4b      	ldr	r3, [pc, #300]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ee      	beq.n	80024ae <HAL_RCC_OscConfig+0x37e>
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7ff fb27 	bl	8001b24 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7ff fb23 	bl	8001b24 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e09b      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ee      	bne.n	80024da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	4a3b      	ldr	r2, [pc, #236]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8087 	beq.w	8002626 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002518:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d061      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d146      	bne.n	80025ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b33      	ldr	r3, [pc, #204]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7ff faf7 	bl	8001b24 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7ff faf3 	bl	8001b24 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e06d      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d108      	bne.n	8002574 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	4921      	ldr	r1, [pc, #132]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a19      	ldr	r1, [r3, #32]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	430b      	orrs	r3, r1
 8002586:	491b      	ldr	r1, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff fac7 	bl	8001b24 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7ff fac3 	bl	8001b24 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e03d      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x46a>
 80025b8:	e035      	b.n	8002626 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff fab0 	bl	8001b24 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7ff faac 	bl	8001b24 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e026      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x498>
 80025e6:	e01e      	b.n	8002626 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e019      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_OscConfig+0x500>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0d0      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d910      	bls.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0207 	bic.w	r2, r3, #7
 800265e:	4965      	ldr	r1, [pc, #404]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b8      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a58      	ldr	r2, [pc, #352]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800269a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a8:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	494d      	ldr	r1, [pc, #308]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d040      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e073      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4936      	ldr	r1, [pc, #216]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7ff f9fe 	bl	8001b24 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7ff f9fa 	bl	8001b24 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e053      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d210      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4922      	ldr	r1, [pc, #136]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e032      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4916      	ldr	r1, [pc, #88]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	490e      	ldr	r1, [pc, #56]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c2:	f000 f821 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	490a      	ldr	r1, [pc, #40]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff f95c 	bl	8001aa0 <HAL_InitTick>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	0800451c 	.word	0x0800451c
 8002800:	20000308 	.word	0x20000308
 8002804:	20000324 	.word	0x20000324

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b490      	push	{r4, r7}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800280e:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002810:	1d3c      	adds	r4, r7, #4
 8002812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002818:	f240 2301 	movw	r3, #513	; 0x201
 800281c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b04      	cmp	r3, #4
 8002840:	d002      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x40>
 8002842:	2b08      	cmp	r3, #8
 8002844:	d003      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x46>
 8002846:	e02b      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800284a:	623b      	str	r3, [r7, #32]
      break;
 800284c:	e02b      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	0c9b      	lsrs	r3, r3, #18
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3328      	adds	r3, #40	; 0x28
 8002858:	443b      	add	r3, r7
 800285a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800285e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0c5b      	lsrs	r3, r3, #17
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	3328      	adds	r3, #40	; 0x28
 8002876:	443b      	add	r3, r7
 8002878:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800287c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002882:	fb03 f202 	mul.w	r2, r3, r2
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
 800288e:	e004      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	623b      	str	r3, [r7, #32]
      break;
 800289e:	e002      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80028a2:	623b      	str	r3, [r7, #32]
      break;
 80028a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a6:	6a3b      	ldr	r3, [r7, #32]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc90      	pop	{r4, r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	0800450c 	.word	0x0800450c
 80028b8:	40021000 	.word	0x40021000
 80028bc:	007a1200 	.word	0x007a1200
 80028c0:	003d0900 	.word	0x003d0900

080028c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c8:	4b02      	ldr	r3, [pc, #8]	; (80028d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	20000308 	.word	0x20000308

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028dc:	f7ff fff2 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4903      	ldr	r1, [pc, #12]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000
 80028fc:	0800452c 	.word	0x0800452c

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002904:	f7ff ffde 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	0adb      	lsrs	r3, r3, #11
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	0800452c 	.word	0x0800452c

08002928 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <RCC_Delay+0x34>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <RCC_Delay+0x38>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0a5b      	lsrs	r3, r3, #9
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002944:	bf00      	nop
  }
  while (Delay --);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e5a      	subs	r2, r3, #1
 800294a:	60fa      	str	r2, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f9      	bne.n	8002944 <RCC_Delay+0x1c>
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	20000308 	.word	0x20000308
 8002960:	10624dd3 	.word	0x10624dd3

08002964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e041      	b.n	80029fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fea0 	bl	80016d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 fc28 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d001      	beq.n	8002a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e03a      	b.n	8002a92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_TIM_Base_Start_IT+0x98>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00e      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x58>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a46:	d009      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x58>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x58>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d111      	bne.n	8002a80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d010      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	e007      	b.n	8002a90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e041      	b.n	8002b3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f839 	bl	8002b46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fb86 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <HAL_TIM_PWM_Start+0x24>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e022      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x6a>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d109      	bne.n	8002b96 <HAL_TIM_PWM_Start+0x3e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	e015      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x6a>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d109      	bne.n	8002bb0 <HAL_TIM_PWM_Start+0x58>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e008      	b.n	8002bc2 <HAL_TIM_PWM_Start+0x6a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e05e      	b.n	8002c88 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d104      	bne.n	8002bda <HAL_TIM_PWM_Start+0x82>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd8:	e013      	b.n	8002c02 <HAL_TIM_PWM_Start+0xaa>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d104      	bne.n	8002bea <HAL_TIM_PWM_Start+0x92>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be8:	e00b      	b.n	8002c02 <HAL_TIM_PWM_Start+0xaa>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d104      	bne.n	8002bfa <HAL_TIM_PWM_Start+0xa2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf8:	e003      	b.n	8002c02 <HAL_TIM_PWM_Start+0xaa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fd74 	bl	80036f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_TIM_PWM_Start+0x138>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d107      	bne.n	8002c2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <HAL_TIM_PWM_Start+0x138>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00e      	beq.n	8002c52 <HAL_TIM_PWM_Start+0xfa>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d009      	beq.n	8002c52 <HAL_TIM_PWM_Start+0xfa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <HAL_TIM_PWM_Start+0x13c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_TIM_PWM_Start+0xfa>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <HAL_TIM_PWM_Start+0x140>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d111      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d010      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c74:	e007      	b.n	8002c86 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800

08002c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d122      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0202 	mvn.w	r2, #2
 8002cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fa6f 	bl	80031c2 <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa62 	bl	80031b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fa71 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d122      	bne.n	8002d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d11b      	bne.n	8002d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0204 	mvn.w	r2, #4
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fa45 	bl	80031c2 <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa38 	bl	80031b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fa47 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d122      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d11b      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0208 	mvn.w	r2, #8
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2204      	movs	r2, #4
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa1b 	bl	80031c2 <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa0e 	bl	80031b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fa1d 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d122      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0210 	mvn.w	r2, #16
 8002dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9f1 	bl	80031c2 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9e4 	bl	80031b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f9f3 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10e      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0201 	mvn.w	r2, #1
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe f83d 	bl	8000e9a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b80      	cmp	r3, #128	; 0x80
 8002e2c:	d10e      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b80      	cmp	r3, #128	; 0x80
 8002e3a:	d107      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fce1 	bl	800380e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d10e      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d107      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f9b7 	bl	80031e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d10e      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d107      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0220 	mvn.w	r2, #32
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fcac 	bl	80037fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0ac      	b.n	8003020 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	f200 809f 	bhi.w	8003014 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002f11 	.word	0x08002f11
 8002ee0:	08003015 	.word	0x08003015
 8002ee4:	08003015 	.word	0x08003015
 8002ee8:	08003015 	.word	0x08003015
 8002eec:	08002f51 	.word	0x08002f51
 8002ef0:	08003015 	.word	0x08003015
 8002ef4:	08003015 	.word	0x08003015
 8002ef8:	08003015 	.word	0x08003015
 8002efc:	08002f93 	.word	0x08002f93
 8002f00:	08003015 	.word	0x08003015
 8002f04:	08003015 	.word	0x08003015
 8002f08:	08003015 	.word	0x08003015
 8002f0c:	08002fd3 	.word	0x08002fd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f9d0 	bl	80032bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0204 	bic.w	r2, r2, #4
 8002f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6999      	ldr	r1, [r3, #24]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	619a      	str	r2, [r3, #24]
      break;
 8002f4e:	e062      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fa16 	bl	8003388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6999      	ldr	r1, [r3, #24]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	021a      	lsls	r2, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	619a      	str	r2, [r3, #24]
      break;
 8002f90:	e041      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fa5f 	bl	800345c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0208 	orr.w	r2, r2, #8
 8002fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0204 	bic.w	r2, r2, #4
 8002fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69d9      	ldr	r1, [r3, #28]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	61da      	str	r2, [r3, #28]
      break;
 8002fd0:	e021      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 faa9 	bl	8003530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69d9      	ldr	r1, [r3, #28]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	021a      	lsls	r2, r3, #8
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	61da      	str	r2, [r3, #28]
      break;
 8003012:	e000      	b.n	8003016 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003014:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_TIM_ConfigClockSource+0x18>
 800303c:	2302      	movs	r3, #2
 800303e:	e0b3      	b.n	80031a8 <HAL_TIM_ConfigClockSource+0x180>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800305e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003066:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003078:	d03e      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xd0>
 800307a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307e:	f200 8087 	bhi.w	8003190 <HAL_TIM_ConfigClockSource+0x168>
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003086:	f000 8085 	beq.w	8003194 <HAL_TIM_ConfigClockSource+0x16c>
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	d87f      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x168>
 8003090:	2b70      	cmp	r3, #112	; 0x70
 8003092:	d01a      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0xa2>
 8003094:	2b70      	cmp	r3, #112	; 0x70
 8003096:	d87b      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x168>
 8003098:	2b60      	cmp	r3, #96	; 0x60
 800309a:	d050      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x116>
 800309c:	2b60      	cmp	r3, #96	; 0x60
 800309e:	d877      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x168>
 80030a0:	2b50      	cmp	r3, #80	; 0x50
 80030a2:	d03c      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xf6>
 80030a4:	2b50      	cmp	r3, #80	; 0x50
 80030a6:	d873      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x168>
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d058      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x136>
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d86f      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x168>
 80030b0:	2b30      	cmp	r3, #48	; 0x30
 80030b2:	d064      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x156>
 80030b4:	2b30      	cmp	r3, #48	; 0x30
 80030b6:	d86b      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x168>
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d060      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x156>
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d867      	bhi.n	8003190 <HAL_TIM_ConfigClockSource+0x168>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d05c      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x156>
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d05a      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030c8:	e062      	b.n	8003190 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6899      	ldr	r1, [r3, #8]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f000 faee 	bl	80036ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	609a      	str	r2, [r3, #8]
      break;
 80030f6:	e04e      	b.n	8003196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f000 fad7 	bl	80036ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800311a:	609a      	str	r2, [r3, #8]
      break;
 800311c:	e03b      	b.n	8003196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	461a      	mov	r2, r3
 800312c:	f000 fa4e 	bl	80035cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2150      	movs	r1, #80	; 0x50
 8003136:	4618      	mov	r0, r3
 8003138:	f000 faa5 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 800313c:	e02b      	b.n	8003196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	461a      	mov	r2, r3
 800314c:	f000 fa6c 	bl	8003628 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2160      	movs	r1, #96	; 0x60
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fa95 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 800315c:	e01b      	b.n	8003196 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	461a      	mov	r2, r3
 800316c:	f000 fa2e 	bl	80035cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2140      	movs	r1, #64	; 0x40
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fa85 	bl	8003686 <TIM_ITRx_SetConfig>
      break;
 800317c:	e00b      	b.n	8003196 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f000 fa7c 	bl	8003686 <TIM_ITRx_SetConfig>
        break;
 800318e:	e002      	b.n	8003196 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003190:	bf00      	nop
 8003192:	e000      	b.n	8003196 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003194:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a29      	ldr	r2, [pc, #164]	; (80032b0 <TIM_Base_SetConfig+0xb8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00b      	beq.n	8003228 <TIM_Base_SetConfig+0x30>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003216:	d007      	beq.n	8003228 <TIM_Base_SetConfig+0x30>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <TIM_Base_SetConfig+0xbc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_Base_SetConfig+0x30>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <TIM_Base_SetConfig+0xc0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d108      	bne.n	800323a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <TIM_Base_SetConfig+0xb8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00b      	beq.n	800325a <TIM_Base_SetConfig+0x62>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003248:	d007      	beq.n	800325a <TIM_Base_SetConfig+0x62>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a19      	ldr	r2, [pc, #100]	; (80032b4 <TIM_Base_SetConfig+0xbc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d003      	beq.n	800325a <TIM_Base_SetConfig+0x62>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <TIM_Base_SetConfig+0xc0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d108      	bne.n	800326c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <TIM_Base_SetConfig+0xb8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d103      	bne.n	80032a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	615a      	str	r2, [r3, #20]
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800

080032bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0302 	bic.w	r3, r3, #2
 8003304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <TIM_OC1_SetConfig+0xc8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d10c      	bne.n	8003332 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0308 	bic.w	r3, r3, #8
 800331e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a13      	ldr	r2, [pc, #76]	; (8003384 <TIM_OC1_SetConfig+0xc8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d111      	bne.n	800335e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	621a      	str	r2, [r3, #32]
}
 8003378:	bf00      	nop
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40012c00 	.word	0x40012c00

08003388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f023 0210 	bic.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0320 	bic.w	r3, r3, #32
 80033d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <TIM_OC2_SetConfig+0xd0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10d      	bne.n	8003404 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003402:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a14      	ldr	r2, [pc, #80]	; (8003458 <TIM_OC2_SetConfig+0xd0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d113      	bne.n	8003434 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800341a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	40012c00 	.word	0x40012c00

0800345c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	; (800352c <TIM_OC3_SetConfig+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10d      	bne.n	80034d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a14      	ldr	r2, [pc, #80]	; (800352c <TIM_OC3_SetConfig+0xd0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d113      	bne.n	8003506 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	621a      	str	r2, [r3, #32]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40012c00 	.word	0x40012c00

08003530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800357a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	031b      	lsls	r3, r3, #12
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a0f      	ldr	r2, [pc, #60]	; (80035c8 <TIM_OC4_SetConfig+0x98>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	40012c00 	.word	0x40012c00

080035cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0201 	bic.w	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f023 030a 	bic.w	r3, r3, #10
 8003608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f023 0210 	bic.w	r2, r3, #16
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003652:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	031b      	lsls	r3, r3, #12
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003664:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	621a      	str	r2, [r3, #32]
}
 800367c:	bf00      	nop
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr

08003686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f043 0307 	orr.w	r3, r3, #7
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b087      	sub	sp, #28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	021a      	lsls	r2, r3, #8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	431a      	orrs	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	609a      	str	r2, [r3, #8]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2201      	movs	r2, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1a      	ldr	r2, [r3, #32]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003754:	2302      	movs	r3, #2
 8003756:	e046      	b.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a4:	d009      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10c      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	40012c00 	.word	0x40012c00
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800

080037fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e03f      	b.n	80038b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe f8b0 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	; 0x24
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f905 	bl	8003a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b08a      	sub	sp, #40	; 0x28
 80038be:	af02      	add	r7, sp, #8
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d17c      	bne.n	80039d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_UART_Transmit+0x2c>
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e075      	b.n	80039d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_UART_Transmit+0x3e>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e06e      	b.n	80039d6 <HAL_UART_Transmit+0x11c>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2221      	movs	r2, #33	; 0x21
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800390e:	f7fe f909 	bl	8001b24 <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	88fa      	ldrh	r2, [r7, #6]
 800391e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003928:	d108      	bne.n	800393c <HAL_UART_Transmit+0x82>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d104      	bne.n	800393c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	e003      	b.n	8003944 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003940:	2300      	movs	r3, #0
 8003942:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800394c:	e02a      	b.n	80039a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f840 	bl	80039de <UART_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e036      	b.n	80039d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10b      	bne.n	8003986 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800397c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	3302      	adds	r3, #2
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	e007      	b.n	8003996 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	781a      	ldrb	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	3301      	adds	r3, #1
 8003994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1cf      	bne.n	800394e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	2140      	movs	r1, #64	; 0x40
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f810 	bl	80039de <UART_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e006      	b.n	80039d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ee:	e02c      	b.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d028      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x30>
 80039fe:	f7fe f891 	bl	8001b24 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d21d      	bcs.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a1c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00f      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4013      	ands	r3, r2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	bf0c      	ite	eq
 8003a5a:	2301      	moveq	r3, #1
 8003a5c:	2300      	movne	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d0c3      	beq.n	80039f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003aae:	f023 030c 	bic.w	r3, r3, #12
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2c      	ldr	r2, [pc, #176]	; (8003b88 <UART_SetConfig+0x114>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d103      	bne.n	8003ae4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003adc:	f7fe ff10 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	e002      	b.n	8003aea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ae4:	f7fe fef8 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8003ae8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009a      	lsls	r2, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	4a22      	ldr	r2, [pc, #136]	; (8003b8c <UART_SetConfig+0x118>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	0119      	lsls	r1, r3, #4
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009a      	lsls	r2, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <UART_SetConfig+0x118>)
 8003b22:	fba3 0302 	umull	r0, r3, r3, r2
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2064      	movs	r0, #100	; 0x64
 8003b2a:	fb00 f303 	mul.w	r3, r0, r3
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	3332      	adds	r3, #50	; 0x32
 8003b34:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <UART_SetConfig+0x118>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b40:	4419      	add	r1, r3
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <UART_SetConfig+0x118>)
 8003b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2064      	movs	r0, #100	; 0x64
 8003b62:	fb00 f303 	mul.w	r3, r0, r3
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	3332      	adds	r3, #50	; 0x32
 8003b6c:	4a07      	ldr	r2, [pc, #28]	; (8003b8c <UART_SetConfig+0x118>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	f003 020f 	and.w	r2, r3, #15
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40013800 	.word	0x40013800
 8003b8c:	51eb851f 	.word	0x51eb851f

08003b90 <__errno>:
 8003b90:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <__errno+0x8>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	2000032c 	.word	0x2000032c

08003b9c <__libc_init_array>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	2600      	movs	r6, #0
 8003ba0:	4d0c      	ldr	r5, [pc, #48]	; (8003bd4 <__libc_init_array+0x38>)
 8003ba2:	4c0d      	ldr	r4, [pc, #52]	; (8003bd8 <__libc_init_array+0x3c>)
 8003ba4:	1b64      	subs	r4, r4, r5
 8003ba6:	10a4      	asrs	r4, r4, #2
 8003ba8:	42a6      	cmp	r6, r4
 8003baa:	d109      	bne.n	8003bc0 <__libc_init_array+0x24>
 8003bac:	f000 fc9c 	bl	80044e8 <_init>
 8003bb0:	2600      	movs	r6, #0
 8003bb2:	4d0a      	ldr	r5, [pc, #40]	; (8003bdc <__libc_init_array+0x40>)
 8003bb4:	4c0a      	ldr	r4, [pc, #40]	; (8003be0 <__libc_init_array+0x44>)
 8003bb6:	1b64      	subs	r4, r4, r5
 8003bb8:	10a4      	asrs	r4, r4, #2
 8003bba:	42a6      	cmp	r6, r4
 8003bbc:	d105      	bne.n	8003bca <__libc_init_array+0x2e>
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc4:	4798      	blx	r3
 8003bc6:	3601      	adds	r6, #1
 8003bc8:	e7ee      	b.n	8003ba8 <__libc_init_array+0xc>
 8003bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bce:	4798      	blx	r3
 8003bd0:	3601      	adds	r6, #1
 8003bd2:	e7f2      	b.n	8003bba <__libc_init_array+0x1e>
 8003bd4:	08004568 	.word	0x08004568
 8003bd8:	08004568 	.word	0x08004568
 8003bdc:	08004568 	.word	0x08004568
 8003be0:	0800456c 	.word	0x0800456c

08003be4 <memset>:
 8003be4:	4603      	mov	r3, r0
 8003be6:	4402      	add	r2, r0
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d100      	bne.n	8003bee <memset+0xa>
 8003bec:	4770      	bx	lr
 8003bee:	f803 1b01 	strb.w	r1, [r3], #1
 8003bf2:	e7f9      	b.n	8003be8 <memset+0x4>

08003bf4 <siprintf>:
 8003bf4:	b40e      	push	{r1, r2, r3}
 8003bf6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bfa:	b500      	push	{lr}
 8003bfc:	b09c      	sub	sp, #112	; 0x70
 8003bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8003c00:	9002      	str	r0, [sp, #8]
 8003c02:	9006      	str	r0, [sp, #24]
 8003c04:	9107      	str	r1, [sp, #28]
 8003c06:	9104      	str	r1, [sp, #16]
 8003c08:	4808      	ldr	r0, [pc, #32]	; (8003c2c <siprintf+0x38>)
 8003c0a:	4909      	ldr	r1, [pc, #36]	; (8003c30 <siprintf+0x3c>)
 8003c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c10:	9105      	str	r1, [sp, #20]
 8003c12:	6800      	ldr	r0, [r0, #0]
 8003c14:	a902      	add	r1, sp, #8
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	f000 f868 	bl	8003cec <_svfiprintf_r>
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	9b02      	ldr	r3, [sp, #8]
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	b01c      	add	sp, #112	; 0x70
 8003c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c28:	b003      	add	sp, #12
 8003c2a:	4770      	bx	lr
 8003c2c:	2000032c 	.word	0x2000032c
 8003c30:	ffff0208 	.word	0xffff0208

08003c34 <__ssputs_r>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	688e      	ldr	r6, [r1, #8]
 8003c3a:	4682      	mov	sl, r0
 8003c3c:	429e      	cmp	r6, r3
 8003c3e:	460c      	mov	r4, r1
 8003c40:	4690      	mov	r8, r2
 8003c42:	461f      	mov	r7, r3
 8003c44:	d838      	bhi.n	8003cb8 <__ssputs_r+0x84>
 8003c46:	898a      	ldrh	r2, [r1, #12]
 8003c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c4c:	d032      	beq.n	8003cb4 <__ssputs_r+0x80>
 8003c4e:	6825      	ldr	r5, [r4, #0]
 8003c50:	6909      	ldr	r1, [r1, #16]
 8003c52:	3301      	adds	r3, #1
 8003c54:	eba5 0901 	sub.w	r9, r5, r1
 8003c58:	6965      	ldr	r5, [r4, #20]
 8003c5a:	444b      	add	r3, r9
 8003c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c64:	106d      	asrs	r5, r5, #1
 8003c66:	429d      	cmp	r5, r3
 8003c68:	bf38      	it	cc
 8003c6a:	461d      	movcc	r5, r3
 8003c6c:	0553      	lsls	r3, r2, #21
 8003c6e:	d531      	bpl.n	8003cd4 <__ssputs_r+0xa0>
 8003c70:	4629      	mov	r1, r5
 8003c72:	f000 fb6f 	bl	8004354 <_malloc_r>
 8003c76:	4606      	mov	r6, r0
 8003c78:	b950      	cbnz	r0, 8003c90 <__ssputs_r+0x5c>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	f8ca 3000 	str.w	r3, [sl]
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c8a:	81a3      	strh	r3, [r4, #12]
 8003c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c90:	464a      	mov	r2, r9
 8003c92:	6921      	ldr	r1, [r4, #16]
 8003c94:	f000 face 	bl	8004234 <memcpy>
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca2:	81a3      	strh	r3, [r4, #12]
 8003ca4:	6126      	str	r6, [r4, #16]
 8003ca6:	444e      	add	r6, r9
 8003ca8:	6026      	str	r6, [r4, #0]
 8003caa:	463e      	mov	r6, r7
 8003cac:	6165      	str	r5, [r4, #20]
 8003cae:	eba5 0509 	sub.w	r5, r5, r9
 8003cb2:	60a5      	str	r5, [r4, #8]
 8003cb4:	42be      	cmp	r6, r7
 8003cb6:	d900      	bls.n	8003cba <__ssputs_r+0x86>
 8003cb8:	463e      	mov	r6, r7
 8003cba:	4632      	mov	r2, r6
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	f000 fac6 	bl	8004250 <memmove>
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	1b9b      	subs	r3, r3, r6
 8003cca:	60a3      	str	r3, [r4, #8]
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	4433      	add	r3, r6
 8003cd0:	6023      	str	r3, [r4, #0]
 8003cd2:	e7db      	b.n	8003c8c <__ssputs_r+0x58>
 8003cd4:	462a      	mov	r2, r5
 8003cd6:	f000 fbb1 	bl	800443c <_realloc_r>
 8003cda:	4606      	mov	r6, r0
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d1e1      	bne.n	8003ca4 <__ssputs_r+0x70>
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	6921      	ldr	r1, [r4, #16]
 8003ce4:	f000 face 	bl	8004284 <_free_r>
 8003ce8:	e7c7      	b.n	8003c7a <__ssputs_r+0x46>
	...

08003cec <_svfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4698      	mov	r8, r3
 8003cf2:	898b      	ldrh	r3, [r1, #12]
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	460d      	mov	r5, r1
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	b09d      	sub	sp, #116	; 0x74
 8003cfe:	d50e      	bpl.n	8003d1e <_svfiprintf_r+0x32>
 8003d00:	690b      	ldr	r3, [r1, #16]
 8003d02:	b963      	cbnz	r3, 8003d1e <_svfiprintf_r+0x32>
 8003d04:	2140      	movs	r1, #64	; 0x40
 8003d06:	f000 fb25 	bl	8004354 <_malloc_r>
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	6128      	str	r0, [r5, #16]
 8003d0e:	b920      	cbnz	r0, 8003d1a <_svfiprintf_r+0x2e>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	e0d1      	b.n	8003ebe <_svfiprintf_r+0x1d2>
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	616b      	str	r3, [r5, #20]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9309      	str	r3, [sp, #36]	; 0x24
 8003d22:	2320      	movs	r3, #32
 8003d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d28:	2330      	movs	r3, #48	; 0x30
 8003d2a:	f04f 0901 	mov.w	r9, #1
 8003d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ed8 <_svfiprintf_r+0x1ec>
 8003d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	469a      	mov	sl, r3
 8003d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d42:	b10a      	cbz	r2, 8003d48 <_svfiprintf_r+0x5c>
 8003d44:	2a25      	cmp	r2, #37	; 0x25
 8003d46:	d1f9      	bne.n	8003d3c <_svfiprintf_r+0x50>
 8003d48:	ebba 0b04 	subs.w	fp, sl, r4
 8003d4c:	d00b      	beq.n	8003d66 <_svfiprintf_r+0x7a>
 8003d4e:	465b      	mov	r3, fp
 8003d50:	4622      	mov	r2, r4
 8003d52:	4629      	mov	r1, r5
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff ff6d 	bl	8003c34 <__ssputs_r>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	f000 80aa 	beq.w	8003eb4 <_svfiprintf_r+0x1c8>
 8003d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d62:	445a      	add	r2, fp
 8003d64:	9209      	str	r2, [sp, #36]	; 0x24
 8003d66:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a2 	beq.w	8003eb4 <_svfiprintf_r+0x1c8>
 8003d70:	2300      	movs	r3, #0
 8003d72:	f04f 32ff 	mov.w	r2, #4294967295
 8003d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7a:	f10a 0a01 	add.w	sl, sl, #1
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	9307      	str	r3, [sp, #28]
 8003d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d86:	931a      	str	r3, [sp, #104]	; 0x68
 8003d88:	4654      	mov	r4, sl
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d90:	4851      	ldr	r0, [pc, #324]	; (8003ed8 <_svfiprintf_r+0x1ec>)
 8003d92:	f000 fa41 	bl	8004218 <memchr>
 8003d96:	9a04      	ldr	r2, [sp, #16]
 8003d98:	b9d8      	cbnz	r0, 8003dd2 <_svfiprintf_r+0xe6>
 8003d9a:	06d0      	lsls	r0, r2, #27
 8003d9c:	bf44      	itt	mi
 8003d9e:	2320      	movmi	r3, #32
 8003da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da4:	0711      	lsls	r1, r2, #28
 8003da6:	bf44      	itt	mi
 8003da8:	232b      	movmi	r3, #43	; 0x2b
 8003daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dae:	f89a 3000 	ldrb.w	r3, [sl]
 8003db2:	2b2a      	cmp	r3, #42	; 0x2a
 8003db4:	d015      	beq.n	8003de2 <_svfiprintf_r+0xf6>
 8003db6:	4654      	mov	r4, sl
 8003db8:	2000      	movs	r0, #0
 8003dba:	f04f 0c0a 	mov.w	ip, #10
 8003dbe:	9a07      	ldr	r2, [sp, #28]
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dc6:	3b30      	subs	r3, #48	; 0x30
 8003dc8:	2b09      	cmp	r3, #9
 8003dca:	d94e      	bls.n	8003e6a <_svfiprintf_r+0x17e>
 8003dcc:	b1b0      	cbz	r0, 8003dfc <_svfiprintf_r+0x110>
 8003dce:	9207      	str	r2, [sp, #28]
 8003dd0:	e014      	b.n	8003dfc <_svfiprintf_r+0x110>
 8003dd2:	eba0 0308 	sub.w	r3, r0, r8
 8003dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	46a2      	mov	sl, r4
 8003dde:	9304      	str	r3, [sp, #16]
 8003de0:	e7d2      	b.n	8003d88 <_svfiprintf_r+0x9c>
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	1d19      	adds	r1, r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	9103      	str	r1, [sp, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfbb      	ittet	lt
 8003dee:	425b      	neglt	r3, r3
 8003df0:	f042 0202 	orrlt.w	r2, r2, #2
 8003df4:	9307      	strge	r3, [sp, #28]
 8003df6:	9307      	strlt	r3, [sp, #28]
 8003df8:	bfb8      	it	lt
 8003dfa:	9204      	strlt	r2, [sp, #16]
 8003dfc:	7823      	ldrb	r3, [r4, #0]
 8003dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8003e00:	d10c      	bne.n	8003e1c <_svfiprintf_r+0x130>
 8003e02:	7863      	ldrb	r3, [r4, #1]
 8003e04:	2b2a      	cmp	r3, #42	; 0x2a
 8003e06:	d135      	bne.n	8003e74 <_svfiprintf_r+0x188>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	3402      	adds	r4, #2
 8003e0c:	1d1a      	adds	r2, r3, #4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	9203      	str	r2, [sp, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	bfb8      	it	lt
 8003e16:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003edc <_svfiprintf_r+0x1f0>
 8003e20:	2203      	movs	r2, #3
 8003e22:	4650      	mov	r0, sl
 8003e24:	7821      	ldrb	r1, [r4, #0]
 8003e26:	f000 f9f7 	bl	8004218 <memchr>
 8003e2a:	b140      	cbz	r0, 8003e3e <_svfiprintf_r+0x152>
 8003e2c:	2340      	movs	r3, #64	; 0x40
 8003e2e:	eba0 000a 	sub.w	r0, r0, sl
 8003e32:	fa03 f000 	lsl.w	r0, r3, r0
 8003e36:	9b04      	ldr	r3, [sp, #16]
 8003e38:	3401      	adds	r4, #1
 8003e3a:	4303      	orrs	r3, r0
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e42:	2206      	movs	r2, #6
 8003e44:	4826      	ldr	r0, [pc, #152]	; (8003ee0 <_svfiprintf_r+0x1f4>)
 8003e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e4a:	f000 f9e5 	bl	8004218 <memchr>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d038      	beq.n	8003ec4 <_svfiprintf_r+0x1d8>
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <_svfiprintf_r+0x1f8>)
 8003e54:	bb1b      	cbnz	r3, 8003e9e <_svfiprintf_r+0x1b2>
 8003e56:	9b03      	ldr	r3, [sp, #12]
 8003e58:	3307      	adds	r3, #7
 8003e5a:	f023 0307 	bic.w	r3, r3, #7
 8003e5e:	3308      	adds	r3, #8
 8003e60:	9303      	str	r3, [sp, #12]
 8003e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e64:	4433      	add	r3, r6
 8003e66:	9309      	str	r3, [sp, #36]	; 0x24
 8003e68:	e767      	b.n	8003d3a <_svfiprintf_r+0x4e>
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e72:	e7a5      	b.n	8003dc0 <_svfiprintf_r+0xd4>
 8003e74:	2300      	movs	r3, #0
 8003e76:	f04f 0c0a 	mov.w	ip, #10
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	3401      	adds	r4, #1
 8003e7e:	9305      	str	r3, [sp, #20]
 8003e80:	4620      	mov	r0, r4
 8003e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e86:	3a30      	subs	r2, #48	; 0x30
 8003e88:	2a09      	cmp	r2, #9
 8003e8a:	d903      	bls.n	8003e94 <_svfiprintf_r+0x1a8>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0c5      	beq.n	8003e1c <_svfiprintf_r+0x130>
 8003e90:	9105      	str	r1, [sp, #20]
 8003e92:	e7c3      	b.n	8003e1c <_svfiprintf_r+0x130>
 8003e94:	4604      	mov	r4, r0
 8003e96:	2301      	movs	r3, #1
 8003e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e9c:	e7f0      	b.n	8003e80 <_svfiprintf_r+0x194>
 8003e9e:	ab03      	add	r3, sp, #12
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	462a      	mov	r2, r5
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <_svfiprintf_r+0x1fc>)
 8003ea8:	a904      	add	r1, sp, #16
 8003eaa:	f3af 8000 	nop.w
 8003eae:	1c42      	adds	r2, r0, #1
 8003eb0:	4606      	mov	r6, r0
 8003eb2:	d1d6      	bne.n	8003e62 <_svfiprintf_r+0x176>
 8003eb4:	89ab      	ldrh	r3, [r5, #12]
 8003eb6:	065b      	lsls	r3, r3, #25
 8003eb8:	f53f af2c 	bmi.w	8003d14 <_svfiprintf_r+0x28>
 8003ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ebe:	b01d      	add	sp, #116	; 0x74
 8003ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec4:	ab03      	add	r3, sp, #12
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	462a      	mov	r2, r5
 8003eca:	4638      	mov	r0, r7
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <_svfiprintf_r+0x1fc>)
 8003ece:	a904      	add	r1, sp, #16
 8003ed0:	f000 f87c 	bl	8003fcc <_printf_i>
 8003ed4:	e7eb      	b.n	8003eae <_svfiprintf_r+0x1c2>
 8003ed6:	bf00      	nop
 8003ed8:	08004534 	.word	0x08004534
 8003edc:	0800453a 	.word	0x0800453a
 8003ee0:	0800453e 	.word	0x0800453e
 8003ee4:	00000000 	.word	0x00000000
 8003ee8:	08003c35 	.word	0x08003c35

08003eec <_printf_common>:
 8003eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef0:	4616      	mov	r6, r2
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	688a      	ldr	r2, [r1, #8]
 8003ef6:	690b      	ldr	r3, [r1, #16]
 8003ef8:	4607      	mov	r7, r0
 8003efa:	4293      	cmp	r3, r2
 8003efc:	bfb8      	it	lt
 8003efe:	4613      	movlt	r3, r2
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f06:	460c      	mov	r4, r1
 8003f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f0c:	b10a      	cbz	r2, 8003f12 <_printf_common+0x26>
 8003f0e:	3301      	adds	r3, #1
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	0699      	lsls	r1, r3, #26
 8003f16:	bf42      	ittt	mi
 8003f18:	6833      	ldrmi	r3, [r6, #0]
 8003f1a:	3302      	addmi	r3, #2
 8003f1c:	6033      	strmi	r3, [r6, #0]
 8003f1e:	6825      	ldr	r5, [r4, #0]
 8003f20:	f015 0506 	ands.w	r5, r5, #6
 8003f24:	d106      	bne.n	8003f34 <_printf_common+0x48>
 8003f26:	f104 0a19 	add.w	sl, r4, #25
 8003f2a:	68e3      	ldr	r3, [r4, #12]
 8003f2c:	6832      	ldr	r2, [r6, #0]
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	42ab      	cmp	r3, r5
 8003f32:	dc28      	bgt.n	8003f86 <_printf_common+0x9a>
 8003f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f38:	1e13      	subs	r3, r2, #0
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	bf18      	it	ne
 8003f3e:	2301      	movne	r3, #1
 8003f40:	0692      	lsls	r2, r2, #26
 8003f42:	d42d      	bmi.n	8003fa0 <_printf_common+0xb4>
 8003f44:	4649      	mov	r1, r9
 8003f46:	4638      	mov	r0, r7
 8003f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f4c:	47c0      	blx	r8
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d020      	beq.n	8003f94 <_printf_common+0xa8>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	68e5      	ldr	r5, [r4, #12]
 8003f56:	f003 0306 	and.w	r3, r3, #6
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	bf18      	it	ne
 8003f5e:	2500      	movne	r5, #0
 8003f60:	6832      	ldr	r2, [r6, #0]
 8003f62:	f04f 0600 	mov.w	r6, #0
 8003f66:	68a3      	ldr	r3, [r4, #8]
 8003f68:	bf08      	it	eq
 8003f6a:	1aad      	subeq	r5, r5, r2
 8003f6c:	6922      	ldr	r2, [r4, #16]
 8003f6e:	bf08      	it	eq
 8003f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bfc4      	itt	gt
 8003f78:	1a9b      	subgt	r3, r3, r2
 8003f7a:	18ed      	addgt	r5, r5, r3
 8003f7c:	341a      	adds	r4, #26
 8003f7e:	42b5      	cmp	r5, r6
 8003f80:	d11a      	bne.n	8003fb8 <_printf_common+0xcc>
 8003f82:	2000      	movs	r0, #0
 8003f84:	e008      	b.n	8003f98 <_printf_common+0xac>
 8003f86:	2301      	movs	r3, #1
 8003f88:	4652      	mov	r2, sl
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	47c0      	blx	r8
 8003f90:	3001      	adds	r0, #1
 8003f92:	d103      	bne.n	8003f9c <_printf_common+0xb0>
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9c:	3501      	adds	r5, #1
 8003f9e:	e7c4      	b.n	8003f2a <_printf_common+0x3e>
 8003fa0:	2030      	movs	r0, #48	; 0x30
 8003fa2:	18e1      	adds	r1, r4, r3
 8003fa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fae:	4422      	add	r2, r4
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fb6:	e7c5      	b.n	8003f44 <_printf_common+0x58>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4622      	mov	r2, r4
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	47c0      	blx	r8
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d0e6      	beq.n	8003f94 <_printf_common+0xa8>
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7d9      	b.n	8003f7e <_printf_common+0x92>
	...

08003fcc <_printf_i>:
 8003fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd0:	7e0f      	ldrb	r7, [r1, #24]
 8003fd2:	4691      	mov	r9, r2
 8003fd4:	2f78      	cmp	r7, #120	; 0x78
 8003fd6:	4680      	mov	r8, r0
 8003fd8:	460c      	mov	r4, r1
 8003fda:	469a      	mov	sl, r3
 8003fdc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fe2:	d807      	bhi.n	8003ff4 <_printf_i+0x28>
 8003fe4:	2f62      	cmp	r7, #98	; 0x62
 8003fe6:	d80a      	bhi.n	8003ffe <_printf_i+0x32>
 8003fe8:	2f00      	cmp	r7, #0
 8003fea:	f000 80d9 	beq.w	80041a0 <_printf_i+0x1d4>
 8003fee:	2f58      	cmp	r7, #88	; 0x58
 8003ff0:	f000 80a4 	beq.w	800413c <_printf_i+0x170>
 8003ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ffc:	e03a      	b.n	8004074 <_printf_i+0xa8>
 8003ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004002:	2b15      	cmp	r3, #21
 8004004:	d8f6      	bhi.n	8003ff4 <_printf_i+0x28>
 8004006:	a101      	add	r1, pc, #4	; (adr r1, 800400c <_printf_i+0x40>)
 8004008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800400c:	08004065 	.word	0x08004065
 8004010:	08004079 	.word	0x08004079
 8004014:	08003ff5 	.word	0x08003ff5
 8004018:	08003ff5 	.word	0x08003ff5
 800401c:	08003ff5 	.word	0x08003ff5
 8004020:	08003ff5 	.word	0x08003ff5
 8004024:	08004079 	.word	0x08004079
 8004028:	08003ff5 	.word	0x08003ff5
 800402c:	08003ff5 	.word	0x08003ff5
 8004030:	08003ff5 	.word	0x08003ff5
 8004034:	08003ff5 	.word	0x08003ff5
 8004038:	08004187 	.word	0x08004187
 800403c:	080040a9 	.word	0x080040a9
 8004040:	08004169 	.word	0x08004169
 8004044:	08003ff5 	.word	0x08003ff5
 8004048:	08003ff5 	.word	0x08003ff5
 800404c:	080041a9 	.word	0x080041a9
 8004050:	08003ff5 	.word	0x08003ff5
 8004054:	080040a9 	.word	0x080040a9
 8004058:	08003ff5 	.word	0x08003ff5
 800405c:	08003ff5 	.word	0x08003ff5
 8004060:	08004171 	.word	0x08004171
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	1d1a      	adds	r2, r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	602a      	str	r2, [r5, #0]
 800406c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004074:	2301      	movs	r3, #1
 8004076:	e0a4      	b.n	80041c2 <_printf_i+0x1f6>
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	6829      	ldr	r1, [r5, #0]
 800407c:	0606      	lsls	r6, r0, #24
 800407e:	f101 0304 	add.w	r3, r1, #4
 8004082:	d50a      	bpl.n	800409a <_printf_i+0xce>
 8004084:	680e      	ldr	r6, [r1, #0]
 8004086:	602b      	str	r3, [r5, #0]
 8004088:	2e00      	cmp	r6, #0
 800408a:	da03      	bge.n	8004094 <_printf_i+0xc8>
 800408c:	232d      	movs	r3, #45	; 0x2d
 800408e:	4276      	negs	r6, r6
 8004090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004094:	230a      	movs	r3, #10
 8004096:	485e      	ldr	r0, [pc, #376]	; (8004210 <_printf_i+0x244>)
 8004098:	e019      	b.n	80040ce <_printf_i+0x102>
 800409a:	680e      	ldr	r6, [r1, #0]
 800409c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040a0:	602b      	str	r3, [r5, #0]
 80040a2:	bf18      	it	ne
 80040a4:	b236      	sxthne	r6, r6
 80040a6:	e7ef      	b.n	8004088 <_printf_i+0xbc>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	6820      	ldr	r0, [r4, #0]
 80040ac:	1d19      	adds	r1, r3, #4
 80040ae:	6029      	str	r1, [r5, #0]
 80040b0:	0601      	lsls	r1, r0, #24
 80040b2:	d501      	bpl.n	80040b8 <_printf_i+0xec>
 80040b4:	681e      	ldr	r6, [r3, #0]
 80040b6:	e002      	b.n	80040be <_printf_i+0xf2>
 80040b8:	0646      	lsls	r6, r0, #25
 80040ba:	d5fb      	bpl.n	80040b4 <_printf_i+0xe8>
 80040bc:	881e      	ldrh	r6, [r3, #0]
 80040be:	2f6f      	cmp	r7, #111	; 0x6f
 80040c0:	bf0c      	ite	eq
 80040c2:	2308      	moveq	r3, #8
 80040c4:	230a      	movne	r3, #10
 80040c6:	4852      	ldr	r0, [pc, #328]	; (8004210 <_printf_i+0x244>)
 80040c8:	2100      	movs	r1, #0
 80040ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ce:	6865      	ldr	r5, [r4, #4]
 80040d0:	2d00      	cmp	r5, #0
 80040d2:	bfa8      	it	ge
 80040d4:	6821      	ldrge	r1, [r4, #0]
 80040d6:	60a5      	str	r5, [r4, #8]
 80040d8:	bfa4      	itt	ge
 80040da:	f021 0104 	bicge.w	r1, r1, #4
 80040de:	6021      	strge	r1, [r4, #0]
 80040e0:	b90e      	cbnz	r6, 80040e6 <_printf_i+0x11a>
 80040e2:	2d00      	cmp	r5, #0
 80040e4:	d04d      	beq.n	8004182 <_printf_i+0x1b6>
 80040e6:	4615      	mov	r5, r2
 80040e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80040ec:	fb03 6711 	mls	r7, r3, r1, r6
 80040f0:	5dc7      	ldrb	r7, [r0, r7]
 80040f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040f6:	4637      	mov	r7, r6
 80040f8:	42bb      	cmp	r3, r7
 80040fa:	460e      	mov	r6, r1
 80040fc:	d9f4      	bls.n	80040e8 <_printf_i+0x11c>
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d10b      	bne.n	800411a <_printf_i+0x14e>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	07de      	lsls	r6, r3, #31
 8004106:	d508      	bpl.n	800411a <_printf_i+0x14e>
 8004108:	6923      	ldr	r3, [r4, #16]
 800410a:	6861      	ldr	r1, [r4, #4]
 800410c:	4299      	cmp	r1, r3
 800410e:	bfde      	ittt	le
 8004110:	2330      	movle	r3, #48	; 0x30
 8004112:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004116:	f105 35ff 	addle.w	r5, r5, #4294967295
 800411a:	1b52      	subs	r2, r2, r5
 800411c:	6122      	str	r2, [r4, #16]
 800411e:	464b      	mov	r3, r9
 8004120:	4621      	mov	r1, r4
 8004122:	4640      	mov	r0, r8
 8004124:	f8cd a000 	str.w	sl, [sp]
 8004128:	aa03      	add	r2, sp, #12
 800412a:	f7ff fedf 	bl	8003eec <_printf_common>
 800412e:	3001      	adds	r0, #1
 8004130:	d14c      	bne.n	80041cc <_printf_i+0x200>
 8004132:	f04f 30ff 	mov.w	r0, #4294967295
 8004136:	b004      	add	sp, #16
 8004138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413c:	4834      	ldr	r0, [pc, #208]	; (8004210 <_printf_i+0x244>)
 800413e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004142:	6829      	ldr	r1, [r5, #0]
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	f851 6b04 	ldr.w	r6, [r1], #4
 800414a:	6029      	str	r1, [r5, #0]
 800414c:	061d      	lsls	r5, r3, #24
 800414e:	d514      	bpl.n	800417a <_printf_i+0x1ae>
 8004150:	07df      	lsls	r7, r3, #31
 8004152:	bf44      	itt	mi
 8004154:	f043 0320 	orrmi.w	r3, r3, #32
 8004158:	6023      	strmi	r3, [r4, #0]
 800415a:	b91e      	cbnz	r6, 8004164 <_printf_i+0x198>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	f023 0320 	bic.w	r3, r3, #32
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	2310      	movs	r3, #16
 8004166:	e7af      	b.n	80040c8 <_printf_i+0xfc>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	f043 0320 	orr.w	r3, r3, #32
 800416e:	6023      	str	r3, [r4, #0]
 8004170:	2378      	movs	r3, #120	; 0x78
 8004172:	4828      	ldr	r0, [pc, #160]	; (8004214 <_printf_i+0x248>)
 8004174:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004178:	e7e3      	b.n	8004142 <_printf_i+0x176>
 800417a:	0659      	lsls	r1, r3, #25
 800417c:	bf48      	it	mi
 800417e:	b2b6      	uxthmi	r6, r6
 8004180:	e7e6      	b.n	8004150 <_printf_i+0x184>
 8004182:	4615      	mov	r5, r2
 8004184:	e7bb      	b.n	80040fe <_printf_i+0x132>
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	6826      	ldr	r6, [r4, #0]
 800418a:	1d18      	adds	r0, r3, #4
 800418c:	6961      	ldr	r1, [r4, #20]
 800418e:	6028      	str	r0, [r5, #0]
 8004190:	0635      	lsls	r5, r6, #24
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	d501      	bpl.n	800419a <_printf_i+0x1ce>
 8004196:	6019      	str	r1, [r3, #0]
 8004198:	e002      	b.n	80041a0 <_printf_i+0x1d4>
 800419a:	0670      	lsls	r0, r6, #25
 800419c:	d5fb      	bpl.n	8004196 <_printf_i+0x1ca>
 800419e:	8019      	strh	r1, [r3, #0]
 80041a0:	2300      	movs	r3, #0
 80041a2:	4615      	mov	r5, r2
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	e7ba      	b.n	800411e <_printf_i+0x152>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	2100      	movs	r1, #0
 80041ac:	1d1a      	adds	r2, r3, #4
 80041ae:	602a      	str	r2, [r5, #0]
 80041b0:	681d      	ldr	r5, [r3, #0]
 80041b2:	6862      	ldr	r2, [r4, #4]
 80041b4:	4628      	mov	r0, r5
 80041b6:	f000 f82f 	bl	8004218 <memchr>
 80041ba:	b108      	cbz	r0, 80041c0 <_printf_i+0x1f4>
 80041bc:	1b40      	subs	r0, r0, r5
 80041be:	6060      	str	r0, [r4, #4]
 80041c0:	6863      	ldr	r3, [r4, #4]
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	2300      	movs	r3, #0
 80041c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ca:	e7a8      	b.n	800411e <_printf_i+0x152>
 80041cc:	462a      	mov	r2, r5
 80041ce:	4649      	mov	r1, r9
 80041d0:	4640      	mov	r0, r8
 80041d2:	6923      	ldr	r3, [r4, #16]
 80041d4:	47d0      	blx	sl
 80041d6:	3001      	adds	r0, #1
 80041d8:	d0ab      	beq.n	8004132 <_printf_i+0x166>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	079b      	lsls	r3, r3, #30
 80041de:	d413      	bmi.n	8004208 <_printf_i+0x23c>
 80041e0:	68e0      	ldr	r0, [r4, #12]
 80041e2:	9b03      	ldr	r3, [sp, #12]
 80041e4:	4298      	cmp	r0, r3
 80041e6:	bfb8      	it	lt
 80041e8:	4618      	movlt	r0, r3
 80041ea:	e7a4      	b.n	8004136 <_printf_i+0x16a>
 80041ec:	2301      	movs	r3, #1
 80041ee:	4632      	mov	r2, r6
 80041f0:	4649      	mov	r1, r9
 80041f2:	4640      	mov	r0, r8
 80041f4:	47d0      	blx	sl
 80041f6:	3001      	adds	r0, #1
 80041f8:	d09b      	beq.n	8004132 <_printf_i+0x166>
 80041fa:	3501      	adds	r5, #1
 80041fc:	68e3      	ldr	r3, [r4, #12]
 80041fe:	9903      	ldr	r1, [sp, #12]
 8004200:	1a5b      	subs	r3, r3, r1
 8004202:	42ab      	cmp	r3, r5
 8004204:	dcf2      	bgt.n	80041ec <_printf_i+0x220>
 8004206:	e7eb      	b.n	80041e0 <_printf_i+0x214>
 8004208:	2500      	movs	r5, #0
 800420a:	f104 0619 	add.w	r6, r4, #25
 800420e:	e7f5      	b.n	80041fc <_printf_i+0x230>
 8004210:	08004545 	.word	0x08004545
 8004214:	08004556 	.word	0x08004556

08004218 <memchr>:
 8004218:	4603      	mov	r3, r0
 800421a:	b510      	push	{r4, lr}
 800421c:	b2c9      	uxtb	r1, r1
 800421e:	4402      	add	r2, r0
 8004220:	4293      	cmp	r3, r2
 8004222:	4618      	mov	r0, r3
 8004224:	d101      	bne.n	800422a <memchr+0x12>
 8004226:	2000      	movs	r0, #0
 8004228:	e003      	b.n	8004232 <memchr+0x1a>
 800422a:	7804      	ldrb	r4, [r0, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	428c      	cmp	r4, r1
 8004230:	d1f6      	bne.n	8004220 <memchr+0x8>
 8004232:	bd10      	pop	{r4, pc}

08004234 <memcpy>:
 8004234:	440a      	add	r2, r1
 8004236:	4291      	cmp	r1, r2
 8004238:	f100 33ff 	add.w	r3, r0, #4294967295
 800423c:	d100      	bne.n	8004240 <memcpy+0xc>
 800423e:	4770      	bx	lr
 8004240:	b510      	push	{r4, lr}
 8004242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004246:	4291      	cmp	r1, r2
 8004248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800424c:	d1f9      	bne.n	8004242 <memcpy+0xe>
 800424e:	bd10      	pop	{r4, pc}

08004250 <memmove>:
 8004250:	4288      	cmp	r0, r1
 8004252:	b510      	push	{r4, lr}
 8004254:	eb01 0402 	add.w	r4, r1, r2
 8004258:	d902      	bls.n	8004260 <memmove+0x10>
 800425a:	4284      	cmp	r4, r0
 800425c:	4623      	mov	r3, r4
 800425e:	d807      	bhi.n	8004270 <memmove+0x20>
 8004260:	1e43      	subs	r3, r0, #1
 8004262:	42a1      	cmp	r1, r4
 8004264:	d008      	beq.n	8004278 <memmove+0x28>
 8004266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800426a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800426e:	e7f8      	b.n	8004262 <memmove+0x12>
 8004270:	4601      	mov	r1, r0
 8004272:	4402      	add	r2, r0
 8004274:	428a      	cmp	r2, r1
 8004276:	d100      	bne.n	800427a <memmove+0x2a>
 8004278:	bd10      	pop	{r4, pc}
 800427a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800427e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004282:	e7f7      	b.n	8004274 <memmove+0x24>

08004284 <_free_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4605      	mov	r5, r0
 8004288:	2900      	cmp	r1, #0
 800428a:	d040      	beq.n	800430e <_free_r+0x8a>
 800428c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004290:	1f0c      	subs	r4, r1, #4
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfb8      	it	lt
 8004296:	18e4      	addlt	r4, r4, r3
 8004298:	f000 f910 	bl	80044bc <__malloc_lock>
 800429c:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <_free_r+0x8c>)
 800429e:	6813      	ldr	r3, [r2, #0]
 80042a0:	b933      	cbnz	r3, 80042b0 <_free_r+0x2c>
 80042a2:	6063      	str	r3, [r4, #4]
 80042a4:	6014      	str	r4, [r2, #0]
 80042a6:	4628      	mov	r0, r5
 80042a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042ac:	f000 b90c 	b.w	80044c8 <__malloc_unlock>
 80042b0:	42a3      	cmp	r3, r4
 80042b2:	d908      	bls.n	80042c6 <_free_r+0x42>
 80042b4:	6820      	ldr	r0, [r4, #0]
 80042b6:	1821      	adds	r1, r4, r0
 80042b8:	428b      	cmp	r3, r1
 80042ba:	bf01      	itttt	eq
 80042bc:	6819      	ldreq	r1, [r3, #0]
 80042be:	685b      	ldreq	r3, [r3, #4]
 80042c0:	1809      	addeq	r1, r1, r0
 80042c2:	6021      	streq	r1, [r4, #0]
 80042c4:	e7ed      	b.n	80042a2 <_free_r+0x1e>
 80042c6:	461a      	mov	r2, r3
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	b10b      	cbz	r3, 80042d0 <_free_r+0x4c>
 80042cc:	42a3      	cmp	r3, r4
 80042ce:	d9fa      	bls.n	80042c6 <_free_r+0x42>
 80042d0:	6811      	ldr	r1, [r2, #0]
 80042d2:	1850      	adds	r0, r2, r1
 80042d4:	42a0      	cmp	r0, r4
 80042d6:	d10b      	bne.n	80042f0 <_free_r+0x6c>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	4401      	add	r1, r0
 80042dc:	1850      	adds	r0, r2, r1
 80042de:	4283      	cmp	r3, r0
 80042e0:	6011      	str	r1, [r2, #0]
 80042e2:	d1e0      	bne.n	80042a6 <_free_r+0x22>
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4401      	add	r1, r0
 80042ea:	6011      	str	r1, [r2, #0]
 80042ec:	6053      	str	r3, [r2, #4]
 80042ee:	e7da      	b.n	80042a6 <_free_r+0x22>
 80042f0:	d902      	bls.n	80042f8 <_free_r+0x74>
 80042f2:	230c      	movs	r3, #12
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	e7d6      	b.n	80042a6 <_free_r+0x22>
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	1821      	adds	r1, r4, r0
 80042fc:	428b      	cmp	r3, r1
 80042fe:	bf01      	itttt	eq
 8004300:	6819      	ldreq	r1, [r3, #0]
 8004302:	685b      	ldreq	r3, [r3, #4]
 8004304:	1809      	addeq	r1, r1, r0
 8004306:	6021      	streq	r1, [r4, #0]
 8004308:	6063      	str	r3, [r4, #4]
 800430a:	6054      	str	r4, [r2, #4]
 800430c:	e7cb      	b.n	80042a6 <_free_r+0x22>
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	200007fc 	.word	0x200007fc

08004314 <sbrk_aligned>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	4e0e      	ldr	r6, [pc, #56]	; (8004350 <sbrk_aligned+0x3c>)
 8004318:	460c      	mov	r4, r1
 800431a:	6831      	ldr	r1, [r6, #0]
 800431c:	4605      	mov	r5, r0
 800431e:	b911      	cbnz	r1, 8004326 <sbrk_aligned+0x12>
 8004320:	f000 f8bc 	bl	800449c <_sbrk_r>
 8004324:	6030      	str	r0, [r6, #0]
 8004326:	4621      	mov	r1, r4
 8004328:	4628      	mov	r0, r5
 800432a:	f000 f8b7 	bl	800449c <_sbrk_r>
 800432e:	1c43      	adds	r3, r0, #1
 8004330:	d00a      	beq.n	8004348 <sbrk_aligned+0x34>
 8004332:	1cc4      	adds	r4, r0, #3
 8004334:	f024 0403 	bic.w	r4, r4, #3
 8004338:	42a0      	cmp	r0, r4
 800433a:	d007      	beq.n	800434c <sbrk_aligned+0x38>
 800433c:	1a21      	subs	r1, r4, r0
 800433e:	4628      	mov	r0, r5
 8004340:	f000 f8ac 	bl	800449c <_sbrk_r>
 8004344:	3001      	adds	r0, #1
 8004346:	d101      	bne.n	800434c <sbrk_aligned+0x38>
 8004348:	f04f 34ff 	mov.w	r4, #4294967295
 800434c:	4620      	mov	r0, r4
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	20000800 	.word	0x20000800

08004354 <_malloc_r>:
 8004354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004358:	1ccd      	adds	r5, r1, #3
 800435a:	f025 0503 	bic.w	r5, r5, #3
 800435e:	3508      	adds	r5, #8
 8004360:	2d0c      	cmp	r5, #12
 8004362:	bf38      	it	cc
 8004364:	250c      	movcc	r5, #12
 8004366:	2d00      	cmp	r5, #0
 8004368:	4607      	mov	r7, r0
 800436a:	db01      	blt.n	8004370 <_malloc_r+0x1c>
 800436c:	42a9      	cmp	r1, r5
 800436e:	d905      	bls.n	800437c <_malloc_r+0x28>
 8004370:	230c      	movs	r3, #12
 8004372:	2600      	movs	r6, #0
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4630      	mov	r0, r6
 8004378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800437c:	4e2e      	ldr	r6, [pc, #184]	; (8004438 <_malloc_r+0xe4>)
 800437e:	f000 f89d 	bl	80044bc <__malloc_lock>
 8004382:	6833      	ldr	r3, [r6, #0]
 8004384:	461c      	mov	r4, r3
 8004386:	bb34      	cbnz	r4, 80043d6 <_malloc_r+0x82>
 8004388:	4629      	mov	r1, r5
 800438a:	4638      	mov	r0, r7
 800438c:	f7ff ffc2 	bl	8004314 <sbrk_aligned>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	4604      	mov	r4, r0
 8004394:	d14d      	bne.n	8004432 <_malloc_r+0xde>
 8004396:	6834      	ldr	r4, [r6, #0]
 8004398:	4626      	mov	r6, r4
 800439a:	2e00      	cmp	r6, #0
 800439c:	d140      	bne.n	8004420 <_malloc_r+0xcc>
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	4631      	mov	r1, r6
 80043a2:	4638      	mov	r0, r7
 80043a4:	eb04 0803 	add.w	r8, r4, r3
 80043a8:	f000 f878 	bl	800449c <_sbrk_r>
 80043ac:	4580      	cmp	r8, r0
 80043ae:	d13a      	bne.n	8004426 <_malloc_r+0xd2>
 80043b0:	6821      	ldr	r1, [r4, #0]
 80043b2:	3503      	adds	r5, #3
 80043b4:	1a6d      	subs	r5, r5, r1
 80043b6:	f025 0503 	bic.w	r5, r5, #3
 80043ba:	3508      	adds	r5, #8
 80043bc:	2d0c      	cmp	r5, #12
 80043be:	bf38      	it	cc
 80043c0:	250c      	movcc	r5, #12
 80043c2:	4638      	mov	r0, r7
 80043c4:	4629      	mov	r1, r5
 80043c6:	f7ff ffa5 	bl	8004314 <sbrk_aligned>
 80043ca:	3001      	adds	r0, #1
 80043cc:	d02b      	beq.n	8004426 <_malloc_r+0xd2>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	442b      	add	r3, r5
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	e00e      	b.n	80043f4 <_malloc_r+0xa0>
 80043d6:	6822      	ldr	r2, [r4, #0]
 80043d8:	1b52      	subs	r2, r2, r5
 80043da:	d41e      	bmi.n	800441a <_malloc_r+0xc6>
 80043dc:	2a0b      	cmp	r2, #11
 80043de:	d916      	bls.n	800440e <_malloc_r+0xba>
 80043e0:	1961      	adds	r1, r4, r5
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	6025      	str	r5, [r4, #0]
 80043e6:	bf18      	it	ne
 80043e8:	6059      	strne	r1, [r3, #4]
 80043ea:	6863      	ldr	r3, [r4, #4]
 80043ec:	bf08      	it	eq
 80043ee:	6031      	streq	r1, [r6, #0]
 80043f0:	5162      	str	r2, [r4, r5]
 80043f2:	604b      	str	r3, [r1, #4]
 80043f4:	4638      	mov	r0, r7
 80043f6:	f104 060b 	add.w	r6, r4, #11
 80043fa:	f000 f865 	bl	80044c8 <__malloc_unlock>
 80043fe:	f026 0607 	bic.w	r6, r6, #7
 8004402:	1d23      	adds	r3, r4, #4
 8004404:	1af2      	subs	r2, r6, r3
 8004406:	d0b6      	beq.n	8004376 <_malloc_r+0x22>
 8004408:	1b9b      	subs	r3, r3, r6
 800440a:	50a3      	str	r3, [r4, r2]
 800440c:	e7b3      	b.n	8004376 <_malloc_r+0x22>
 800440e:	6862      	ldr	r2, [r4, #4]
 8004410:	42a3      	cmp	r3, r4
 8004412:	bf0c      	ite	eq
 8004414:	6032      	streq	r2, [r6, #0]
 8004416:	605a      	strne	r2, [r3, #4]
 8004418:	e7ec      	b.n	80043f4 <_malloc_r+0xa0>
 800441a:	4623      	mov	r3, r4
 800441c:	6864      	ldr	r4, [r4, #4]
 800441e:	e7b2      	b.n	8004386 <_malloc_r+0x32>
 8004420:	4634      	mov	r4, r6
 8004422:	6876      	ldr	r6, [r6, #4]
 8004424:	e7b9      	b.n	800439a <_malloc_r+0x46>
 8004426:	230c      	movs	r3, #12
 8004428:	4638      	mov	r0, r7
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	f000 f84c 	bl	80044c8 <__malloc_unlock>
 8004430:	e7a1      	b.n	8004376 <_malloc_r+0x22>
 8004432:	6025      	str	r5, [r4, #0]
 8004434:	e7de      	b.n	80043f4 <_malloc_r+0xa0>
 8004436:	bf00      	nop
 8004438:	200007fc 	.word	0x200007fc

0800443c <_realloc_r>:
 800443c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004440:	4680      	mov	r8, r0
 8004442:	4614      	mov	r4, r2
 8004444:	460e      	mov	r6, r1
 8004446:	b921      	cbnz	r1, 8004452 <_realloc_r+0x16>
 8004448:	4611      	mov	r1, r2
 800444a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800444e:	f7ff bf81 	b.w	8004354 <_malloc_r>
 8004452:	b92a      	cbnz	r2, 8004460 <_realloc_r+0x24>
 8004454:	f7ff ff16 	bl	8004284 <_free_r>
 8004458:	4625      	mov	r5, r4
 800445a:	4628      	mov	r0, r5
 800445c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004460:	f000 f838 	bl	80044d4 <_malloc_usable_size_r>
 8004464:	4284      	cmp	r4, r0
 8004466:	4607      	mov	r7, r0
 8004468:	d802      	bhi.n	8004470 <_realloc_r+0x34>
 800446a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800446e:	d812      	bhi.n	8004496 <_realloc_r+0x5a>
 8004470:	4621      	mov	r1, r4
 8004472:	4640      	mov	r0, r8
 8004474:	f7ff ff6e 	bl	8004354 <_malloc_r>
 8004478:	4605      	mov	r5, r0
 800447a:	2800      	cmp	r0, #0
 800447c:	d0ed      	beq.n	800445a <_realloc_r+0x1e>
 800447e:	42bc      	cmp	r4, r7
 8004480:	4622      	mov	r2, r4
 8004482:	4631      	mov	r1, r6
 8004484:	bf28      	it	cs
 8004486:	463a      	movcs	r2, r7
 8004488:	f7ff fed4 	bl	8004234 <memcpy>
 800448c:	4631      	mov	r1, r6
 800448e:	4640      	mov	r0, r8
 8004490:	f7ff fef8 	bl	8004284 <_free_r>
 8004494:	e7e1      	b.n	800445a <_realloc_r+0x1e>
 8004496:	4635      	mov	r5, r6
 8004498:	e7df      	b.n	800445a <_realloc_r+0x1e>
	...

0800449c <_sbrk_r>:
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	2300      	movs	r3, #0
 80044a0:	4d05      	ldr	r5, [pc, #20]	; (80044b8 <_sbrk_r+0x1c>)
 80044a2:	4604      	mov	r4, r0
 80044a4:	4608      	mov	r0, r1
 80044a6:	602b      	str	r3, [r5, #0]
 80044a8:	f7fd f814 	bl	80014d4 <_sbrk>
 80044ac:	1c43      	adds	r3, r0, #1
 80044ae:	d102      	bne.n	80044b6 <_sbrk_r+0x1a>
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	b103      	cbz	r3, 80044b6 <_sbrk_r+0x1a>
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	bd38      	pop	{r3, r4, r5, pc}
 80044b8:	20000804 	.word	0x20000804

080044bc <__malloc_lock>:
 80044bc:	4801      	ldr	r0, [pc, #4]	; (80044c4 <__malloc_lock+0x8>)
 80044be:	f000 b811 	b.w	80044e4 <__retarget_lock_acquire_recursive>
 80044c2:	bf00      	nop
 80044c4:	20000808 	.word	0x20000808

080044c8 <__malloc_unlock>:
 80044c8:	4801      	ldr	r0, [pc, #4]	; (80044d0 <__malloc_unlock+0x8>)
 80044ca:	f000 b80c 	b.w	80044e6 <__retarget_lock_release_recursive>
 80044ce:	bf00      	nop
 80044d0:	20000808 	.word	0x20000808

080044d4 <_malloc_usable_size_r>:
 80044d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d8:	1f18      	subs	r0, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bfbc      	itt	lt
 80044de:	580b      	ldrlt	r3, [r1, r0]
 80044e0:	18c0      	addlt	r0, r0, r3
 80044e2:	4770      	bx	lr

080044e4 <__retarget_lock_acquire_recursive>:
 80044e4:	4770      	bx	lr

080044e6 <__retarget_lock_release_recursive>:
 80044e6:	4770      	bx	lr

080044e8 <_init>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr

080044f4 <_fini>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr
