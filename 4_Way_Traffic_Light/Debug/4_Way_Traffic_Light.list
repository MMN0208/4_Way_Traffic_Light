
4_Way_Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800410c  0800410c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800410c  0800410c  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800410c  0800410c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  200000cc  080041e0  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  080041e0  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbf4  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c7  00000000  00000000  0002bce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0002e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  0002f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a091  00000000  00000000  0002fc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120c1  00000000  00000000  00049cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aefc  00000000  00000000  0005bd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6c7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000384c  00000000  00000000  000e6cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800408c 	.word	0x0800408c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	0800408c 	.word	0x0800408c

0800014c <fsm_multi_mode_run>:
#include "fsm_for_multi_mode.h"

int newGrnTime = 0;
int newYelTime = 0;

void fsm_multi_mode_run(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(sysStatus) {
 8000150:	4b9e      	ldr	r3, [pc, #632]	; (80003cc <fsm_multi_mode_run+0x280>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b06      	cmp	r3, #6
 8000156:	f200 823d 	bhi.w	80005d4 <fsm_multi_mode_run+0x488>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_multi_mode_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800017d 	.word	0x0800017d
 8000164:	080001b1 	.word	0x080001b1
 8000168:	08000271 	.word	0x08000271
 800016c:	0800031f 	.word	0x0800031f
 8000170:	080003e9 	.word	0x080003e9
 8000174:	08000533 	.word	0x08000533
 8000178:	08000497 	.word	0x08000497
	case INIT:
		//init timer 1 for countdown updating
		setTimer1(SECOND);
 800017c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000180:	f000 ff88 	bl	8001094 <setTimer1>

		//init countdown
		countdown = grnTime;
 8000184:	4b92      	ldr	r3, [pc, #584]	; (80003d0 <fsm_multi_mode_run+0x284>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a92      	ldr	r2, [pc, #584]	; (80003d4 <fsm_multi_mode_run+0x288>)
 800018a:	6013      	str	r3, [r2, #0]

		auto_mode = 1;
 800018c:	4b92      	ldr	r3, [pc, #584]	; (80003d8 <fsm_multi_mode_run+0x28c>)
 800018e:	2201      	movs	r2, #1
 8000190:	601a      	str	r2, [r3, #0]

		sysStatus = RED__GRN;
 8000192:	4b8e      	ldr	r3, [pc, #568]	; (80003cc <fsm_multi_mode_run+0x280>)
 8000194:	2201      	movs	r2, #1
 8000196:	701a      	strb	r2, [r3, #0]
		trafficLightRed(TRAFFIC_LIGHT_1);
 8000198:	2000      	movs	r0, #0
 800019a:	f001 fa33 	bl	8001604 <trafficLightRed>
		trafficLightGrn(TRAFFIC_LIGHT_2);
 800019e:	2001      	movs	r0, #1
 80001a0:	f001 f9e4 	bl	800156c <trafficLightGrn>
		displayCountdown(countdown);
 80001a4:	4b8b      	ldr	r3, [pc, #556]	; (80003d4 <fsm_multi_mode_run+0x288>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4618      	mov	r0, r3
 80001aa:	f001 fa51 	bl	8001650 <displayCountdown>
		break;
 80001ae:	e21e      	b.n	80005ee <fsm_multi_mode_run+0x4a2>

	case RED__GRN:
		if(auto_mode == 1) {
 80001b0:	4b89      	ldr	r3, [pc, #548]	; (80003d8 <fsm_multi_mode_run+0x28c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d12d      	bne.n	8000214 <fsm_multi_mode_run+0xc8>
			if(timer1_flag == 1) {
 80001b8:	4b88      	ldr	r3, [pc, #544]	; (80003dc <fsm_multi_mode_run+0x290>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d11e      	bne.n	80001fe <fsm_multi_mode_run+0xb2>
				setTimer1(SECOND);
 80001c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c4:	f000 ff66 	bl	8001094 <setTimer1>
				countdown -= 1;
 80001c8:	4b82      	ldr	r3, [pc, #520]	; (80003d4 <fsm_multi_mode_run+0x288>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	3b01      	subs	r3, #1
 80001ce:	4a81      	ldr	r2, [pc, #516]	; (80003d4 <fsm_multi_mode_run+0x288>)
 80001d0:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 80001d2:	4b80      	ldr	r3, [pc, #512]	; (80003d4 <fsm_multi_mode_run+0x288>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d10c      	bne.n	80001f4 <fsm_multi_mode_run+0xa8>
					countdown = yelTime;
 80001da:	4b81      	ldr	r3, [pc, #516]	; (80003e0 <fsm_multi_mode_run+0x294>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a7d      	ldr	r2, [pc, #500]	; (80003d4 <fsm_multi_mode_run+0x288>)
 80001e0:	6013      	str	r3, [r2, #0]
					sysStatus = RED__YEL;
 80001e2:	4b7a      	ldr	r3, [pc, #488]	; (80003cc <fsm_multi_mode_run+0x280>)
 80001e4:	2202      	movs	r2, #2
 80001e6:	701a      	strb	r2, [r3, #0]
					trafficLightRed(TRAFFIC_LIGHT_1);
 80001e8:	2000      	movs	r0, #0
 80001ea:	f001 fa0b 	bl	8001604 <trafficLightRed>
					trafficLightYel(TRAFFIC_LIGHT_2);
 80001ee:	2001      	movs	r0, #1
 80001f0:	f001 f9e2 	bl	80015b8 <trafficLightYel>
				}
				displayCountdown(countdown);
 80001f4:	4b77      	ldr	r3, [pc, #476]	; (80003d4 <fsm_multi_mode_run+0x288>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 fa29 	bl	8001650 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 80001fe:	2001      	movs	r0, #1
 8000200:	f000 fc56 	bl	8000ab0 <isButtonPressed>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	f000 81e6 	beq.w	80005d8 <fsm_multi_mode_run+0x48c>
				auto_mode = 0;
 800020c:	4b72      	ldr	r3, [pc, #456]	; (80003d8 <fsm_multi_mode_run+0x28c>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
				trafficLightYel(TRAFFIC_LIGHT_2);
			}
		}

		break;
 8000212:	e1e1      	b.n	80005d8 <fsm_multi_mode_run+0x48c>
			if(isButtonPressed(BUTTON_1)) {
 8000214:	2001      	movs	r0, #1
 8000216:	f000 fc4b 	bl	8000ab0 <isButtonPressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d016      	beq.n	800024e <fsm_multi_mode_run+0x102>
				setTimer1(LED_BLINK);
 8000220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000224:	f000 ff36 	bl	8001094 <setTimer1>
				newGrnTime = grnTime;
 8000228:	4b69      	ldr	r3, [pc, #420]	; (80003d0 <fsm_multi_mode_run+0x284>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a6d      	ldr	r2, [pc, #436]	; (80003e4 <fsm_multi_mode_run+0x298>)
 800022e:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 8000230:	4b66      	ldr	r3, [pc, #408]	; (80003cc <fsm_multi_mode_run+0x280>)
 8000232:	2206      	movs	r2, #6
 8000234:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 8000236:	2000      	movs	r0, #0
 8000238:	f001 f998 	bl	800156c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 800023c:	2001      	movs	r0, #1
 800023e:	f001 f995 	bl	800156c <trafficLightGrn>
				displayCountdown(newGrnTime);
 8000242:	4b68      	ldr	r3, [pc, #416]	; (80003e4 <fsm_multi_mode_run+0x298>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fa02 	bl	8001650 <displayCountdown>
		break;
 800024c:	e1c4      	b.n	80005d8 <fsm_multi_mode_run+0x48c>
			else if(isButtonPressed(BUTTON_2)) {
 800024e:	2002      	movs	r0, #2
 8000250:	f000 fc2e 	bl	8000ab0 <isButtonPressed>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	f000 81be 	beq.w	80005d8 <fsm_multi_mode_run+0x48c>
				sysStatus = RED__YEL;
 800025c:	4b5b      	ldr	r3, [pc, #364]	; (80003cc <fsm_multi_mode_run+0x280>)
 800025e:	2202      	movs	r2, #2
 8000260:	701a      	strb	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
 8000262:	2000      	movs	r0, #0
 8000264:	f001 f9ce 	bl	8001604 <trafficLightRed>
				trafficLightYel(TRAFFIC_LIGHT_2);
 8000268:	2001      	movs	r0, #1
 800026a:	f001 f9a5 	bl	80015b8 <trafficLightYel>
		break;
 800026e:	e1b3      	b.n	80005d8 <fsm_multi_mode_run+0x48c>

	case RED__YEL:
		if(auto_mode == 1) {
 8000270:	4b59      	ldr	r3, [pc, #356]	; (80003d8 <fsm_multi_mode_run+0x28c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d124      	bne.n	80002c2 <fsm_multi_mode_run+0x176>
			if(timer1_flag == 1) {
 8000278:	4b58      	ldr	r3, [pc, #352]	; (80003dc <fsm_multi_mode_run+0x290>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	f040 81ad 	bne.w	80005dc <fsm_multi_mode_run+0x490>
				setTimer1(SECOND);
 8000282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000286:	f000 ff05 	bl	8001094 <setTimer1>
				countdown--;
 800028a:	4b52      	ldr	r3, [pc, #328]	; (80003d4 <fsm_multi_mode_run+0x288>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	3b01      	subs	r3, #1
 8000290:	4a50      	ldr	r2, [pc, #320]	; (80003d4 <fsm_multi_mode_run+0x288>)
 8000292:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 8000294:	4b4f      	ldr	r3, [pc, #316]	; (80003d4 <fsm_multi_mode_run+0x288>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d10c      	bne.n	80002b6 <fsm_multi_mode_run+0x16a>
					countdown = grnTime;
 800029c:	4b4c      	ldr	r3, [pc, #304]	; (80003d0 <fsm_multi_mode_run+0x284>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a4c      	ldr	r2, [pc, #304]	; (80003d4 <fsm_multi_mode_run+0x288>)
 80002a2:	6013      	str	r3, [r2, #0]
					sysStatus = GRN__RED;
 80002a4:	4b49      	ldr	r3, [pc, #292]	; (80003cc <fsm_multi_mode_run+0x280>)
 80002a6:	2203      	movs	r2, #3
 80002a8:	701a      	strb	r2, [r3, #0]
					trafficLightGrn(TRAFFIC_LIGHT_1);
 80002aa:	2000      	movs	r0, #0
 80002ac:	f001 f95e 	bl	800156c <trafficLightGrn>
					trafficLightRed(TRAFFIC_LIGHT_2);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f001 f9a7 	bl	8001604 <trafficLightRed>
				}
				displayCountdown(countdown);
 80002b6:	4b47      	ldr	r3, [pc, #284]	; (80003d4 <fsm_multi_mode_run+0x288>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f9c8 	bl	8001650 <displayCountdown>
				sysStatus = GRN__RED;
				trafficLightGrn(TRAFFIC_LIGHT_1);
				trafficLightRed(TRAFFIC_LIGHT_2);
			}
		}
		break;
 80002c0:	e18c      	b.n	80005dc <fsm_multi_mode_run+0x490>
			if(isButtonPressed(BUTTON_1)) {
 80002c2:	2001      	movs	r0, #1
 80002c4:	f000 fbf4 	bl	8000ab0 <isButtonPressed>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d016      	beq.n	80002fc <fsm_multi_mode_run+0x1b0>
				setTimer1(LED_BLINK);
 80002ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d2:	f000 fedf 	bl	8001094 <setTimer1>
				newGrnTime = grnTime;
 80002d6:	4b3e      	ldr	r3, [pc, #248]	; (80003d0 <fsm_multi_mode_run+0x284>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a42      	ldr	r2, [pc, #264]	; (80003e4 <fsm_multi_mode_run+0x298>)
 80002dc:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 80002de:	4b3b      	ldr	r3, [pc, #236]	; (80003cc <fsm_multi_mode_run+0x280>)
 80002e0:	2206      	movs	r2, #6
 80002e2:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f001 f941 	bl	800156c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f001 f93e 	bl	800156c <trafficLightGrn>
				displayCountdown(newGrnTime);
 80002f0:	4b3c      	ldr	r3, [pc, #240]	; (80003e4 <fsm_multi_mode_run+0x298>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 f9ab 	bl	8001650 <displayCountdown>
		break;
 80002fa:	e16f      	b.n	80005dc <fsm_multi_mode_run+0x490>
			else if(isButtonPressed(BUTTON_2)) {
 80002fc:	2002      	movs	r0, #2
 80002fe:	f000 fbd7 	bl	8000ab0 <isButtonPressed>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	f000 8169 	beq.w	80005dc <fsm_multi_mode_run+0x490>
				sysStatus = GRN__RED;
 800030a:	4b30      	ldr	r3, [pc, #192]	; (80003cc <fsm_multi_mode_run+0x280>)
 800030c:	2203      	movs	r2, #3
 800030e:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 8000310:	2000      	movs	r0, #0
 8000312:	f001 f92b 	bl	800156c <trafficLightGrn>
				trafficLightRed(TRAFFIC_LIGHT_2);
 8000316:	2001      	movs	r0, #1
 8000318:	f001 f974 	bl	8001604 <trafficLightRed>
		break;
 800031c:	e15e      	b.n	80005dc <fsm_multi_mode_run+0x490>

	case GRN__RED:
		if(auto_mode == 1) {
 800031e:	4b2e      	ldr	r3, [pc, #184]	; (80003d8 <fsm_multi_mode_run+0x28c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d124      	bne.n	8000370 <fsm_multi_mode_run+0x224>
			if(timer1_flag == 1) {
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <fsm_multi_mode_run+0x290>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b01      	cmp	r3, #1
 800032c:	f040 8158 	bne.w	80005e0 <fsm_multi_mode_run+0x494>
				setTimer1(SECOND);
 8000330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000334:	f000 feae 	bl	8001094 <setTimer1>
				countdown--;
 8000338:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <fsm_multi_mode_run+0x288>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3b01      	subs	r3, #1
 800033e:	4a25      	ldr	r2, [pc, #148]	; (80003d4 <fsm_multi_mode_run+0x288>)
 8000340:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 8000342:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <fsm_multi_mode_run+0x288>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d10c      	bne.n	8000364 <fsm_multi_mode_run+0x218>
					countdown = yelTime;
 800034a:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <fsm_multi_mode_run+0x294>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a21      	ldr	r2, [pc, #132]	; (80003d4 <fsm_multi_mode_run+0x288>)
 8000350:	6013      	str	r3, [r2, #0]
					sysStatus = YEL__RED;
 8000352:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <fsm_multi_mode_run+0x280>)
 8000354:	2204      	movs	r2, #4
 8000356:	701a      	strb	r2, [r3, #0]
					trafficLightYel(TRAFFIC_LIGHT_1);
 8000358:	2000      	movs	r0, #0
 800035a:	f001 f92d 	bl	80015b8 <trafficLightYel>
					trafficLightRed(TRAFFIC_LIGHT_2);
 800035e:	2001      	movs	r0, #1
 8000360:	f001 f950 	bl	8001604 <trafficLightRed>
				}
				displayCountdown(countdown);
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <fsm_multi_mode_run+0x288>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	f001 f971 	bl	8001650 <displayCountdown>
				sysStatus = YEL__RED;
				trafficLightYel(TRAFFIC_LIGHT_1);
				trafficLightRed(TRAFFIC_LIGHT_2);
			}
		}
		break;
 800036e:	e137      	b.n	80005e0 <fsm_multi_mode_run+0x494>
			if(isButtonPressed(BUTTON_1)) {
 8000370:	2001      	movs	r0, #1
 8000372:	f000 fb9d 	bl	8000ab0 <isButtonPressed>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d016      	beq.n	80003aa <fsm_multi_mode_run+0x25e>
				setTimer1(LED_BLINK);
 800037c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000380:	f000 fe88 	bl	8001094 <setTimer1>
				newGrnTime = grnTime;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <fsm_multi_mode_run+0x284>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <fsm_multi_mode_run+0x298>)
 800038a:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <fsm_multi_mode_run+0x280>)
 800038e:	2206      	movs	r2, #6
 8000390:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 8000392:	2000      	movs	r0, #0
 8000394:	f001 f8ea 	bl	800156c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 8000398:	2001      	movs	r0, #1
 800039a:	f001 f8e7 	bl	800156c <trafficLightGrn>
				displayCountdown(newGrnTime);
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <fsm_multi_mode_run+0x298>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 f954 	bl	8001650 <displayCountdown>
		break;
 80003a8:	e11a      	b.n	80005e0 <fsm_multi_mode_run+0x494>
			else if(isButtonPressed(BUTTON_2)) {
 80003aa:	2002      	movs	r0, #2
 80003ac:	f000 fb80 	bl	8000ab0 <isButtonPressed>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	f000 8114 	beq.w	80005e0 <fsm_multi_mode_run+0x494>
				sysStatus = YEL__RED;
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <fsm_multi_mode_run+0x280>)
 80003ba:	2204      	movs	r2, #4
 80003bc:	701a      	strb	r2, [r3, #0]
				trafficLightYel(TRAFFIC_LIGHT_1);
 80003be:	2000      	movs	r0, #0
 80003c0:	f001 f8fa 	bl	80015b8 <trafficLightYel>
				trafficLightRed(TRAFFIC_LIGHT_2);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f001 f91d 	bl	8001604 <trafficLightRed>
		break;
 80003ca:	e109      	b.n	80005e0 <fsm_multi_mode_run+0x494>
 80003cc:	200000f4 	.word	0x200000f4
 80003d0:	20000008 	.word	0x20000008
 80003d4:	200000f8 	.word	0x200000f8
 80003d8:	2000000c 	.word	0x2000000c
 80003dc:	20000438 	.word	0x20000438
 80003e0:	20000004 	.word	0x20000004
 80003e4:	200000e8 	.word	0x200000e8

	case YEL__RED:
		if(auto_mode == 1) {
 80003e8:	4b82      	ldr	r3, [pc, #520]	; (80005f4 <fsm_multi_mode_run+0x4a8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d124      	bne.n	800043a <fsm_multi_mode_run+0x2ee>
			if(timer1_flag == 1) {
 80003f0:	4b81      	ldr	r3, [pc, #516]	; (80005f8 <fsm_multi_mode_run+0x4ac>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	f040 80f5 	bne.w	80005e4 <fsm_multi_mode_run+0x498>
				setTimer1(SECOND);
 80003fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fe:	f000 fe49 	bl	8001094 <setTimer1>
				countdown--;
 8000402:	4b7e      	ldr	r3, [pc, #504]	; (80005fc <fsm_multi_mode_run+0x4b0>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3b01      	subs	r3, #1
 8000408:	4a7c      	ldr	r2, [pc, #496]	; (80005fc <fsm_multi_mode_run+0x4b0>)
 800040a:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 800040c:	4b7b      	ldr	r3, [pc, #492]	; (80005fc <fsm_multi_mode_run+0x4b0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d10c      	bne.n	800042e <fsm_multi_mode_run+0x2e2>
					countdown = grnTime;
 8000414:	4b7a      	ldr	r3, [pc, #488]	; (8000600 <fsm_multi_mode_run+0x4b4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a78      	ldr	r2, [pc, #480]	; (80005fc <fsm_multi_mode_run+0x4b0>)
 800041a:	6013      	str	r3, [r2, #0]
					sysStatus = RED__GRN;
 800041c:	4b79      	ldr	r3, [pc, #484]	; (8000604 <fsm_multi_mode_run+0x4b8>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
					trafficLightRed(TRAFFIC_LIGHT_1);
 8000422:	2000      	movs	r0, #0
 8000424:	f001 f8ee 	bl	8001604 <trafficLightRed>
					trafficLightGrn(TRAFFIC_LIGHT_2);
 8000428:	2001      	movs	r0, #1
 800042a:	f001 f89f 	bl	800156c <trafficLightGrn>
				}
				displayCountdown(countdown);
 800042e:	4b73      	ldr	r3, [pc, #460]	; (80005fc <fsm_multi_mode_run+0x4b0>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	f001 f90c 	bl	8001650 <displayCountdown>
				sysStatus = RED__GRN;
				trafficLightRed(TRAFFIC_LIGHT_1);
				trafficLightGrn(TRAFFIC_LIGHT_2);
			}
		}
		break;
 8000438:	e0d4      	b.n	80005e4 <fsm_multi_mode_run+0x498>
			if(isButtonPressed(BUTTON_1)) {
 800043a:	2001      	movs	r0, #1
 800043c:	f000 fb38 	bl	8000ab0 <isButtonPressed>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d016      	beq.n	8000474 <fsm_multi_mode_run+0x328>
				setTimer1(LED_BLINK);
 8000446:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800044a:	f000 fe23 	bl	8001094 <setTimer1>
				newGrnTime = grnTime;
 800044e:	4b6c      	ldr	r3, [pc, #432]	; (8000600 <fsm_multi_mode_run+0x4b4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a6d      	ldr	r2, [pc, #436]	; (8000608 <fsm_multi_mode_run+0x4bc>)
 8000454:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 8000456:	4b6b      	ldr	r3, [pc, #428]	; (8000604 <fsm_multi_mode_run+0x4b8>)
 8000458:	2206      	movs	r2, #6
 800045a:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 800045c:	2000      	movs	r0, #0
 800045e:	f001 f885 	bl	800156c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 8000462:	2001      	movs	r0, #1
 8000464:	f001 f882 	bl	800156c <trafficLightGrn>
				displayCountdown(newGrnTime);
 8000468:	4b67      	ldr	r3, [pc, #412]	; (8000608 <fsm_multi_mode_run+0x4bc>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f001 f8ef 	bl	8001650 <displayCountdown>
		break;
 8000472:	e0b7      	b.n	80005e4 <fsm_multi_mode_run+0x498>
			else if(isButtonPressed(BUTTON_2)) {
 8000474:	2002      	movs	r0, #2
 8000476:	f000 fb1b 	bl	8000ab0 <isButtonPressed>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	f000 80b1 	beq.w	80005e4 <fsm_multi_mode_run+0x498>
				sysStatus = RED__GRN;
 8000482:	4b60      	ldr	r3, [pc, #384]	; (8000604 <fsm_multi_mode_run+0x4b8>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
 8000488:	2000      	movs	r0, #0
 800048a:	f001 f8bb 	bl	8001604 <trafficLightRed>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 800048e:	2001      	movs	r0, #1
 8000490:	f001 f86c 	bl	800156c <trafficLightGrn>
		break;
 8000494:	e0a6      	b.n	80005e4 <fsm_multi_mode_run+0x498>

	case SET_GRN:
		if(isButtonPressed(BUTTON_1)) {
 8000496:	2001      	movs	r0, #1
 8000498:	f000 fb0a 	bl	8000ab0 <isButtonPressed>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d016      	beq.n	80004d0 <fsm_multi_mode_run+0x384>
			setTimer1(LED_BLINK);
 80004a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a6:	f000 fdf5 	bl	8001094 <setTimer1>
			newYelTime = yelTime;
 80004aa:	4b58      	ldr	r3, [pc, #352]	; (800060c <fsm_multi_mode_run+0x4c0>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a58      	ldr	r2, [pc, #352]	; (8000610 <fsm_multi_mode_run+0x4c4>)
 80004b0:	6013      	str	r3, [r2, #0]
			sysStatus = SET_YEL;
 80004b2:	4b54      	ldr	r3, [pc, #336]	; (8000604 <fsm_multi_mode_run+0x4b8>)
 80004b4:	2205      	movs	r2, #5
 80004b6:	701a      	strb	r2, [r3, #0]
			trafficLightYel(TRAFFIC_LIGHT_1);
 80004b8:	2000      	movs	r0, #0
 80004ba:	f001 f87d 	bl	80015b8 <trafficLightYel>
			trafficLightYel(TRAFFIC_LIGHT_2);
 80004be:	2001      	movs	r0, #1
 80004c0:	f001 f87a 	bl	80015b8 <trafficLightYel>
			displayCountdown(newYelTime);
 80004c4:	4b52      	ldr	r3, [pc, #328]	; (8000610 <fsm_multi_mode_run+0x4c4>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 f8c1 	bl	8001650 <displayCountdown>
 80004ce:	e021      	b.n	8000514 <fsm_multi_mode_run+0x3c8>
		}
		else if(isButtonPressed(BUTTON_2)) {
 80004d0:	2002      	movs	r0, #2
 80004d2:	f000 faed 	bl	8000ab0 <isButtonPressed>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d00a      	beq.n	80004f2 <fsm_multi_mode_run+0x3a6>
			newGrnTime++;
 80004dc:	4b4a      	ldr	r3, [pc, #296]	; (8000608 <fsm_multi_mode_run+0x4bc>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a49      	ldr	r2, [pc, #292]	; (8000608 <fsm_multi_mode_run+0x4bc>)
 80004e4:	6013      	str	r3, [r2, #0]
			displayCountdown(newGrnTime);
 80004e6:	4b48      	ldr	r3, [pc, #288]	; (8000608 <fsm_multi_mode_run+0x4bc>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 f8b0 	bl	8001650 <displayCountdown>
 80004f0:	e010      	b.n	8000514 <fsm_multi_mode_run+0x3c8>
		}
		else if(isButtonPressed(BUTTON_3)) {
 80004f2:	2003      	movs	r0, #3
 80004f4:	f000 fadc 	bl	8000ab0 <isButtonPressed>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00a      	beq.n	8000514 <fsm_multi_mode_run+0x3c8>
			grnTime = newGrnTime;
 80004fe:	4b42      	ldr	r3, [pc, #264]	; (8000608 <fsm_multi_mode_run+0x4bc>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a3f      	ldr	r2, [pc, #252]	; (8000600 <fsm_multi_mode_run+0x4b4>)
 8000504:	6013      	str	r3, [r2, #0]
			redTime = grnTime + yelTime;
 8000506:	4b3e      	ldr	r3, [pc, #248]	; (8000600 <fsm_multi_mode_run+0x4b4>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4b40      	ldr	r3, [pc, #256]	; (800060c <fsm_multi_mode_run+0x4c0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4413      	add	r3, r2
 8000510:	4a40      	ldr	r2, [pc, #256]	; (8000614 <fsm_multi_mode_run+0x4c8>)
 8000512:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8000514:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <fsm_multi_mode_run+0x4ac>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d165      	bne.n	80005e8 <fsm_multi_mode_run+0x49c>
			setTimer1(LED_BLINK);
 800051c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000520:	f000 fdb8 	bl	8001094 <setTimer1>
			trafficLightBlinkGrn(TRAFFIC_LIGHT_1);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 ffd5 	bl	80014d4 <trafficLightBlinkGrn>
			trafficLightBlinkGrn(TRAFFIC_LIGHT_2);
 800052a:	2001      	movs	r0, #1
 800052c:	f000 ffd2 	bl	80014d4 <trafficLightBlinkGrn>
		}
		break;
 8000530:	e05a      	b.n	80005e8 <fsm_multi_mode_run+0x49c>

	case SET_YEL:
		if(isButtonPressed(BUTTON_1)) {
 8000532:	2001      	movs	r0, #1
 8000534:	f000 fabc 	bl	8000ab0 <isButtonPressed>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d019      	beq.n	8000572 <fsm_multi_mode_run+0x426>
			setTimer1(SECOND);
 800053e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000542:	f000 fda7 	bl	8001094 <setTimer1>
			countdown = grnTime;
 8000546:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <fsm_multi_mode_run+0x4b4>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a2c      	ldr	r2, [pc, #176]	; (80005fc <fsm_multi_mode_run+0x4b0>)
 800054c:	6013      	str	r3, [r2, #0]
			auto_mode = 1;
 800054e:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <fsm_multi_mode_run+0x4a8>)
 8000550:	2201      	movs	r2, #1
 8000552:	601a      	str	r2, [r3, #0]
			sysStatus = RED__GRN;
 8000554:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <fsm_multi_mode_run+0x4b8>)
 8000556:	2201      	movs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
			trafficLightRed(TRAFFIC_LIGHT_1);
 800055a:	2000      	movs	r0, #0
 800055c:	f001 f852 	bl	8001604 <trafficLightRed>
			trafficLightGrn(TRAFFIC_LIGHT_2);
 8000560:	2001      	movs	r0, #1
 8000562:	f001 f803 	bl	800156c <trafficLightGrn>
			displayCountdown(countdown);
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <fsm_multi_mode_run+0x4b0>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f001 f870 	bl	8001650 <displayCountdown>
 8000570:	e021      	b.n	80005b6 <fsm_multi_mode_run+0x46a>
		}
		else if(isButtonPressed(BUTTON_2)) {
 8000572:	2002      	movs	r0, #2
 8000574:	f000 fa9c 	bl	8000ab0 <isButtonPressed>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00a      	beq.n	8000594 <fsm_multi_mode_run+0x448>
			newYelTime++;
 800057e:	4b24      	ldr	r3, [pc, #144]	; (8000610 <fsm_multi_mode_run+0x4c4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	3301      	adds	r3, #1
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <fsm_multi_mode_run+0x4c4>)
 8000586:	6013      	str	r3, [r2, #0]
			displayCountdown(newYelTime);
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <fsm_multi_mode_run+0x4c4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f85f 	bl	8001650 <displayCountdown>
 8000592:	e010      	b.n	80005b6 <fsm_multi_mode_run+0x46a>
		}
		else if(isButtonPressed(BUTTON_3)) {
 8000594:	2003      	movs	r0, #3
 8000596:	f000 fa8b 	bl	8000ab0 <isButtonPressed>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00a      	beq.n	80005b6 <fsm_multi_mode_run+0x46a>
			yelTime = newYelTime;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <fsm_multi_mode_run+0x4c4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a19      	ldr	r2, [pc, #100]	; (800060c <fsm_multi_mode_run+0x4c0>)
 80005a6:	6013      	str	r3, [r2, #0]
			redTime = grnTime + yelTime;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <fsm_multi_mode_run+0x4b4>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <fsm_multi_mode_run+0x4c0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4413      	add	r3, r2
 80005b2:	4a18      	ldr	r2, [pc, #96]	; (8000614 <fsm_multi_mode_run+0x4c8>)
 80005b4:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <fsm_multi_mode_run+0x4ac>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d116      	bne.n	80005ec <fsm_multi_mode_run+0x4a0>
			setTimer1(LED_BLINK);
 80005be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c2:	f000 fd67 	bl	8001094 <setTimer1>
			trafficLightBlinkYel(TRAFFIC_LIGHT_1);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 ffaa 	bl	8001520 <trafficLightBlinkYel>
			trafficLightBlinkYel(TRAFFIC_LIGHT_2);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 ffa7 	bl	8001520 <trafficLightBlinkYel>
		}
		break;
 80005d2:	e00b      	b.n	80005ec <fsm_multi_mode_run+0x4a0>

	default: break;
 80005d4:	bf00      	nop
 80005d6:	e00a      	b.n	80005ee <fsm_multi_mode_run+0x4a2>
		break;
 80005d8:	bf00      	nop
 80005da:	e008      	b.n	80005ee <fsm_multi_mode_run+0x4a2>
		break;
 80005dc:	bf00      	nop
 80005de:	e006      	b.n	80005ee <fsm_multi_mode_run+0x4a2>
		break;
 80005e0:	bf00      	nop
 80005e2:	e004      	b.n	80005ee <fsm_multi_mode_run+0x4a2>
		break;
 80005e4:	bf00      	nop
 80005e6:	e002      	b.n	80005ee <fsm_multi_mode_run+0x4a2>
		break;
 80005e8:	bf00      	nop
 80005ea:	e000      	b.n	80005ee <fsm_multi_mode_run+0x4a2>
		break;
 80005ec:	bf00      	nop
	}
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000000c 	.word	0x2000000c
 80005f8:	20000438 	.word	0x20000438
 80005fc:	200000f8 	.word	0x200000f8
 8000600:	20000008 	.word	0x20000008
 8000604:	200000f4 	.word	0x200000f4
 8000608:	200000e8 	.word	0x200000e8
 800060c:	20000004 	.word	0x20000004
 8000610:	200000ec 	.word	0x200000ec
 8000614:	20000000 	.word	0x20000000

08000618 <fsm_for_pedestrian>:

#include "fsm_for_pedestrian.h"

int timeOut;

void fsm_for_pedestrian(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 800061c:	4b73      	ldr	r3, [pc, #460]	; (80007ec <fsm_for_pedestrian+0x1d4>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b02      	cmp	r3, #2
 8000622:	f000 808f 	beq.w	8000744 <fsm_for_pedestrian+0x12c>
 8000626:	2b02      	cmp	r3, #2
 8000628:	f300 80de 	bgt.w	80007e8 <fsm_for_pedestrian+0x1d0>
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <fsm_for_pedestrian+0x1e>
 8000630:	2b01      	cmp	r3, #1
 8000632:	d03a      	beq.n	80006aa <fsm_for_pedestrian+0x92>
				pedestrianLightBlinkRed();
			}
		}
		break;
	}
}
 8000634:	e0d8      	b.n	80007e8 <fsm_for_pedestrian+0x1d0>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 8000636:	2000      	movs	r0, #0
 8000638:	f000 fa3a 	bl	8000ab0 <isButtonPressed>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 80cd 	beq.w	80007de <fsm_for_pedestrian+0x1c6>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 8000644:	4b6a      	ldr	r3, [pc, #424]	; (80007f0 <fsm_for_pedestrian+0x1d8>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b6a      	ldr	r3, [pc, #424]	; (80007f4 <fsm_for_pedestrian+0x1dc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	441a      	add	r2, r3
 800064e:	4b6a      	ldr	r3, [pc, #424]	; (80007f8 <fsm_for_pedestrian+0x1e0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000658:	fb02 f303 	mul.w	r3, r2, r3
 800065c:	4a67      	ldr	r2, [pc, #412]	; (80007fc <fsm_for_pedestrian+0x1e4>)
 800065e:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 8000660:	4b66      	ldr	r3, [pc, #408]	; (80007fc <fsm_for_pedestrian+0x1e4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fd31 	bl	80010cc <setTimer2>
			setTimer3(TIMER_INIT);
 800066a:	200a      	movs	r0, #10
 800066c:	f000 fd4a 	bl	8001104 <setTimer3>
			if(sysStatus == RED__GRN || sysStatus == RED__YEL) {
 8000670:	4b63      	ldr	r3, [pc, #396]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d003      	beq.n	8000680 <fsm_for_pedestrian+0x68>
 8000678:	4b61      	ldr	r3, [pc, #388]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d105      	bne.n	800068c <fsm_for_pedestrian+0x74>
				pedestrianStatus = GRN;
 8000680:	4b5a      	ldr	r3, [pc, #360]	; (80007ec <fsm_for_pedestrian+0x1d4>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
				pedestrianLightGrn();
 8000686:	f000 fae5 	bl	8000c54 <pedestrianLightGrn>
		break;
 800068a:	e0a8      	b.n	80007de <fsm_for_pedestrian+0x1c6>
			else if(sysStatus == GRN__RED || sysStatus == YEL__RED) {
 800068c:	4b5c      	ldr	r3, [pc, #368]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b03      	cmp	r3, #3
 8000692:	d004      	beq.n	800069e <fsm_for_pedestrian+0x86>
 8000694:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b04      	cmp	r3, #4
 800069a:	f040 80a0 	bne.w	80007de <fsm_for_pedestrian+0x1c6>
				pedestrianStatus = RED;
 800069e:	4b53      	ldr	r3, [pc, #332]	; (80007ec <fsm_for_pedestrian+0x1d4>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	701a      	strb	r2, [r3, #0]
				pedestrianLightRed();
 80006a4:	f000 faee 	bl	8000c84 <pedestrianLightRed>
		break;
 80006a8:	e099      	b.n	80007de <fsm_for_pedestrian+0x1c6>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 fa00 	bl	8000ab0 <isButtonPressed>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d012      	beq.n	80006dc <fsm_for_pedestrian+0xc4>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 80006b6:	4b4e      	ldr	r3, [pc, #312]	; (80007f0 <fsm_for_pedestrian+0x1d8>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b4e      	ldr	r3, [pc, #312]	; (80007f4 <fsm_for_pedestrian+0x1dc>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	441a      	add	r2, r3
 80006c0:	4b4d      	ldr	r3, [pc, #308]	; (80007f8 <fsm_for_pedestrian+0x1e0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4413      	add	r3, r2
 80006c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ca:	fb02 f303 	mul.w	r3, r2, r3
 80006ce:	4a4b      	ldr	r2, [pc, #300]	; (80007fc <fsm_for_pedestrian+0x1e4>)
 80006d0:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 80006d2:	4b4a      	ldr	r3, [pc, #296]	; (80007fc <fsm_for_pedestrian+0x1e4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fcf8 	bl	80010cc <setTimer2>
		if(sysStatus == SET_GRN || sysStatus == SET_YEL) {
 80006dc:	4b48      	ldr	r3, [pc, #288]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d003      	beq.n	80006ec <fsm_for_pedestrian+0xd4>
 80006e4:	4b46      	ldr	r3, [pc, #280]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b05      	cmp	r3, #5
 80006ea:	d107      	bne.n	80006fc <fsm_for_pedestrian+0xe4>
			setTimer2(0);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 fced 	bl	80010cc <setTimer2>
			pedestrianStatus = WAIT;
 80006f2:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <fsm_for_pedestrian+0x1d4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 80006f8:	f000 fadc 	bl	8000cb4 <pedestrianLightOff>
		if(timer2_flag == 1) {
 80006fc:	4b41      	ldr	r3, [pc, #260]	; (8000804 <fsm_for_pedestrian+0x1ec>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d107      	bne.n	8000714 <fsm_for_pedestrian+0xfc>
			setTimer2(0);
 8000704:	2000      	movs	r0, #0
 8000706:	f000 fce1 	bl	80010cc <setTimer2>
			pedestrianStatus = WAIT;
 800070a:	4b38      	ldr	r3, [pc, #224]	; (80007ec <fsm_for_pedestrian+0x1d4>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 8000710:	f000 fad0 	bl	8000cb4 <pedestrianLightOff>
		if(sysStatus == GRN__RED) {
 8000714:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d104      	bne.n	8000726 <fsm_for_pedestrian+0x10e>
			pedestrianStatus = RED;
 800071c:	4b33      	ldr	r3, [pc, #204]	; (80007ec <fsm_for_pedestrian+0x1d4>)
 800071e:	2202      	movs	r2, #2
 8000720:	701a      	strb	r2, [r3, #0]
			pedestrianLightRed();
 8000722:	f000 faaf 	bl	8000c84 <pedestrianLightRed>
		if(sysStatus == RED__YEL) {
 8000726:	4b36      	ldr	r3, [pc, #216]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d159      	bne.n	80007e2 <fsm_for_pedestrian+0x1ca>
			if(timer3_flag == 1) {
 800072e:	4b36      	ldr	r3, [pc, #216]	; (8000808 <fsm_for_pedestrian+0x1f0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d155      	bne.n	80007e2 <fsm_for_pedestrian+0x1ca>
				setTimer3(LED_BLINK);
 8000736:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800073a:	f000 fce3 	bl	8001104 <setTimer3>
				pedestrianLightBlinkGrn();
 800073e:	f000 fa59 	bl	8000bf4 <pedestrianLightBlinkGrn>
		break;
 8000742:	e04e      	b.n	80007e2 <fsm_for_pedestrian+0x1ca>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 8000744:	2000      	movs	r0, #0
 8000746:	f000 f9b3 	bl	8000ab0 <isButtonPressed>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d012      	beq.n	8000776 <fsm_for_pedestrian+0x15e>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <fsm_for_pedestrian+0x1d8>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <fsm_for_pedestrian+0x1dc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	441a      	add	r2, r3
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <fsm_for_pedestrian+0x1e0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000764:	fb02 f303 	mul.w	r3, r2, r3
 8000768:	4a24      	ldr	r2, [pc, #144]	; (80007fc <fsm_for_pedestrian+0x1e4>)
 800076a:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 800076c:	4b23      	ldr	r3, [pc, #140]	; (80007fc <fsm_for_pedestrian+0x1e4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fcab 	bl	80010cc <setTimer2>
		if(sysStatus == SET_GRN || sysStatus == SET_YEL) {
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b06      	cmp	r3, #6
 800077c:	d003      	beq.n	8000786 <fsm_for_pedestrian+0x16e>
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b05      	cmp	r3, #5
 8000784:	d107      	bne.n	8000796 <fsm_for_pedestrian+0x17e>
			setTimer2(0);
 8000786:	2000      	movs	r0, #0
 8000788:	f000 fca0 	bl	80010cc <setTimer2>
			pedestrianStatus = WAIT;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <fsm_for_pedestrian+0x1d4>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 8000792:	f000 fa8f 	bl	8000cb4 <pedestrianLightOff>
		if(timer2_flag == 1) {
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <fsm_for_pedestrian+0x1ec>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d107      	bne.n	80007ae <fsm_for_pedestrian+0x196>
			setTimer2(0);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 fc94 	bl	80010cc <setTimer2>
			pedestrianStatus = WAIT;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <fsm_for_pedestrian+0x1d4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 80007aa:	f000 fa83 	bl	8000cb4 <pedestrianLightOff>
		if(sysStatus == RED__GRN) {
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d104      	bne.n	80007c0 <fsm_for_pedestrian+0x1a8>
			pedestrianStatus = GRN;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <fsm_for_pedestrian+0x1d4>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
			pedestrianLightGrn();
 80007bc:	f000 fa4a 	bl	8000c54 <pedestrianLightGrn>
		if(sysStatus == YEL__RED) {
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <fsm_for_pedestrian+0x1e8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d10e      	bne.n	80007e6 <fsm_for_pedestrian+0x1ce>
			if(timer3_flag == 1) {
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <fsm_for_pedestrian+0x1f0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10a      	bne.n	80007e6 <fsm_for_pedestrian+0x1ce>
				setTimer3(LED_BLINK);
 80007d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d4:	f000 fc96 	bl	8001104 <setTimer3>
				pedestrianLightBlinkRed();
 80007d8:	f000 fa24 	bl	8000c24 <pedestrianLightBlinkRed>
		break;
 80007dc:	e003      	b.n	80007e6 <fsm_for_pedestrian+0x1ce>
		break;
 80007de:	bf00      	nop
 80007e0:	e002      	b.n	80007e8 <fsm_for_pedestrian+0x1d0>
		break;
 80007e2:	bf00      	nop
 80007e4:	e000      	b.n	80007e8 <fsm_for_pedestrian+0x1d0>
		break;
 80007e6:	bf00      	nop
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200000f5 	.word	0x200000f5
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000004 	.word	0x20000004
 80007f8:	20000008 	.word	0x20000008
 80007fc:	200000f0 	.word	0x200000f0
 8000800:	200000f4 	.word	0x200000f4
 8000804:	20000440 	.word	0x20000440
 8000808:	20000448 	.word	0x20000448

0800080c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	4b45      	ldr	r3, [pc, #276]	; (8000938 <MX_GPIO_Init+0x12c>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a44      	ldr	r2, [pc, #272]	; (8000938 <MX_GPIO_Init+0x12c>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b42      	ldr	r3, [pc, #264]	; (8000938 <MX_GPIO_Init+0x12c>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0310 	and.w	r3, r3, #16
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000838:	4b3f      	ldr	r3, [pc, #252]	; (8000938 <MX_GPIO_Init+0x12c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a3e      	ldr	r2, [pc, #248]	; (8000938 <MX_GPIO_Init+0x12c>)
 800083e:	f043 0320 	orr.w	r3, r3, #32
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_GPIO_Init+0x12c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_GPIO_Init+0x12c>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a38      	ldr	r2, [pc, #224]	; (8000938 <MX_GPIO_Init+0x12c>)
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_GPIO_Init+0x12c>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000868:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_GPIO_Init+0x12c>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <MX_GPIO_Init+0x12c>)
 800086e:	f043 0308 	orr.w	r3, r3, #8
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_GPIO_Init+0x12c>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0308 	and.w	r3, r3, #8
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D12_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 8000886:	482d      	ldr	r0, [pc, #180]	; (800093c <MX_GPIO_Init+0x130>)
 8000888:	f001 fa97 	bl	8001dba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000892:	482b      	ldr	r0, [pc, #172]	; (8000940 <MX_GPIO_Init+0x134>)
 8000894:	f001 fa91 	bl	8001dba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_GPIO_Init+0x138>)
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4619      	mov	r1, r3
 80008ac:	4826      	ldr	r0, [pc, #152]	; (8000948 <MX_GPIO_Init+0x13c>)
 80008ae:	f001 f8e9 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80008b2:	2313      	movs	r3, #19
 80008b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	481d      	ldr	r0, [pc, #116]	; (800093c <MX_GPIO_Init+0x130>)
 80008c6:	f001 f8dd 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|D12_Pin|D7_Pin|D2_Pin;
 80008ca:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2302      	movs	r3, #2
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	4816      	ldr	r0, [pc, #88]	; (800093c <MX_GPIO_Init+0x130>)
 80008e4:	f001 f8ce 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A3_Pin;
 80008e8:	2301      	movs	r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	4811      	ldr	r0, [pc, #68]	; (8000940 <MX_GPIO_Init+0x134>)
 80008fc:	f001 f8c2 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000900:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2302      	movs	r3, #2
 8000910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4619      	mov	r1, r3
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_GPIO_Init+0x134>)
 800091a:	f001 f8b3 	bl	8001a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2028      	movs	r0, #40	; 0x28
 8000924:	f001 f877 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000928:	2028      	movs	r0, #40	; 0x28
 800092a:	f001 f890 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	40010800 	.word	0x40010800
 8000940:	40010c00 	.word	0x40010c00
 8000944:	10110000 	.word	0x10110000
 8000948:	40011000 	.word	0x40011000

0800094c <buttonRead>:
static uint8_t flagForButtonHold[NO_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonHold[NO_OF_BUTTONS] = {0, 0, 0, 0};

void buttonRead(void){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	e08e      	b.n	8000a76 <buttonRead+0x12a>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000958:	4a4b      	ldr	r2, [pc, #300]	; (8000a88 <buttonRead+0x13c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	7819      	ldrb	r1, [r3, #0]
 8000960:	4a4a      	ldr	r2, [pc, #296]	; (8000a8c <buttonRead+0x140>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	460a      	mov	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 800096a:	4a49      	ldr	r2, [pc, #292]	; (8000a90 <buttonRead+0x144>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4413      	add	r3, r2
 8000970:	7819      	ldrb	r1, [r3, #0]
 8000972:	4a45      	ldr	r2, [pc, #276]	; (8000a88 <buttonRead+0x13c>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	460a      	mov	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 800097c:	4a45      	ldr	r2, [pc, #276]	; (8000a94 <buttonRead+0x148>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000984:	4944      	ldr	r1, [pc, #272]	; (8000a98 <buttonRead+0x14c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800098c:	4619      	mov	r1, r3
 800098e:	4610      	mov	r0, r2
 8000990:	f001 f9fc 	bl	8001d8c <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	4619      	mov	r1, r3
 8000998:	4a3d      	ldr	r2, [pc, #244]	; (8000a90 <buttonRead+0x144>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	460a      	mov	r2, r1
 80009a0:	701a      	strb	r2, [r3, #0]
		if((debounceButtonBuffer2[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer0[i])) {
 80009a2:	4a3a      	ldr	r2, [pc, #232]	; (8000a8c <buttonRead+0x140>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	4937      	ldr	r1, [pc, #220]	; (8000a88 <buttonRead+0x13c>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	440b      	add	r3, r1
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d15c      	bne.n	8000a70 <buttonRead+0x124>
 80009b6:	4a34      	ldr	r2, [pc, #208]	; (8000a88 <buttonRead+0x13c>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4934      	ldr	r1, [pc, #208]	; (8000a90 <buttonRead+0x144>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	440b      	add	r3, r1
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d152      	bne.n	8000a70 <buttonRead+0x124>
			if(buttonBuffer[i] != debounceButtonBuffer0[i]) {
 80009ca:	4a34      	ldr	r2, [pc, #208]	; (8000a9c <buttonRead+0x150>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	492f      	ldr	r1, [pc, #188]	; (8000a90 <buttonRead+0x144>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	440b      	add	r3, r1
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d02d      	beq.n	8000a3a <buttonRead+0xee>
				buttonBuffer[i] = debounceButtonBuffer0[i];
 80009de:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <buttonRead+0x144>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4413      	add	r3, r2
 80009e4:	7819      	ldrb	r1, [r3, #0]
 80009e6:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <buttonRead+0x150>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	460a      	mov	r2, r1
 80009ee:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80009f0:	4a2a      	ldr	r2, [pc, #168]	; (8000a9c <buttonRead+0x150>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d118      	bne.n	8000a2e <buttonRead+0xe2>
					counterForButtonHold[i] = DURATION_FOR_BUTTON_HOLD;
 80009fc:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <buttonRead+0x154>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(SYSTEM_DELAY > 0) counterForButtonHold[i] /= SYSTEM_DELAY;
 8000a08:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <buttonRead+0x154>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a10:	4a24      	ldr	r2, [pc, #144]	; (8000aa4 <buttonRead+0x158>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	08db      	lsrs	r3, r3, #3
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <buttonRead+0x154>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					flagForButtonPressed[i] = 1;
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <buttonRead+0x15c>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e020      	b.n	8000a70 <buttonRead+0x124>
				}
				else {
					flagForButtonHold[i] = 0;
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <buttonRead+0x160>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4413      	add	r3, r2
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
 8000a38:	e01a      	b.n	8000a70 <buttonRead+0x124>
				}
			}
			else {
				if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <buttonRead+0x150>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d114      	bne.n	8000a70 <buttonRead+0x124>
					counterForButtonHold[i]--;
 8000a46:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <buttonRead+0x154>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	b299      	uxth	r1, r3
 8000a52:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <buttonRead+0x154>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonHold[i] == 0) {
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <buttonRead+0x154>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d104      	bne.n	8000a70 <buttonRead+0x124>
						flagForButtonHold[i] = 1;
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <buttonRead+0x160>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3301      	adds	r3, #1
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	f77f af6d 	ble.w	8000958 <buttonRead+0xc>
					}
				}
			}
		}
	}
}
 8000a7e:	bf00      	nop
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000030 	.word	0x20000030
 8000a8c:	20000034 	.word	0x20000034
 8000a90:	2000002c 	.word	0x2000002c
 8000a94:	20000010 	.word	0x20000010
 8000a98:	20000020 	.word	0x20000020
 8000a9c:	20000028 	.word	0x20000028
 8000aa0:	20000104 	.word	0x20000104
 8000aa4:	cccccccd 	.word	0xcccccccd
 8000aa8:	200000fc 	.word	0x200000fc
 8000aac:	20000100 	.word	0x20000100

08000ab0 <isButtonPressed>:

int isButtonPressed(int index) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if(index < 0 || index > NO_OF_BUTTONS) return 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db02      	blt.n	8000ac4 <isButtonPressed+0x14>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	dd01      	ble.n	8000ac8 <isButtonPressed+0x18>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e00d      	b.n	8000ae4 <isButtonPressed+0x34>
	if(flagForButtonPressed[index] == 1) {
 8000ac8:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <isButtonPressed+0x40>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d106      	bne.n	8000ae2 <isButtonPressed+0x32>
		flagForButtonPressed[index] = 0;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <isButtonPressed+0x40>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
		return 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <isButtonPressed+0x34>
	}
	return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200000fc 	.word	0x200000fc

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af8:	f000 fe54 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afc:	f000 f82a 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b00:	f7ff fe84 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b04:	f000 fdc0 	bl	8001688 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b08:	f000 fc02 	bl	8001310 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <main+0x4c>)
 8000b0e:	f001 fe11 	bl	8002734 <HAL_TIM_Base_Start_IT>

  SCH_Add_Task(&buttonRead, 0, 10);
 8000b12:	220a      	movs	r2, #10
 8000b14:	2100      	movs	r1, #0
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <main+0x50>)
 8000b18:	f000 f8e4 	bl	8000ce4 <SCH_Add_Task>
  SCH_Add_Task(&timerRun, 10, 10);
 8000b1c:	220a      	movs	r2, #10
 8000b1e:	210a      	movs	r1, #10
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <main+0x54>)
 8000b22:	f000 f8df 	bl	8000ce4 <SCH_Add_Task>
  SCH_Add_Task(&fsm_multi_mode_run, 20, 10);
 8000b26:	220a      	movs	r2, #10
 8000b28:	2114      	movs	r1, #20
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <main+0x58>)
 8000b2c:	f000 f8da 	bl	8000ce4 <SCH_Add_Task>
  SCH_Add_Task(&fsm_for_pedestrian, 30, 10);
 8000b30:	220a      	movs	r2, #10
 8000b32:	211e      	movs	r1, #30
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <main+0x5c>)
 8000b36:	f000 f8d5 	bl	8000ce4 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCH_Dispatch_Tasks();
 8000b3a:	f000 fa5f 	bl	8000ffc <SCH_Dispatch_Tasks>
 8000b3e:	e7fc      	b.n	8000b3a <main+0x46>
 8000b40:	20000450 	.word	0x20000450
 8000b44:	0800094d 	.word	0x0800094d
 8000b48:	0800113d 	.word	0x0800113d
 8000b4c:	0800014d 	.word	0x0800014d
 8000b50:	08000619 	.word	0x08000619

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b090      	sub	sp, #64	; 0x40
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0318 	add.w	r3, r7, #24
 8000b5e:	2228      	movs	r2, #40	; 0x28
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fe10 	bl	8003788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7e:	2310      	movs	r3, #16
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b82:	2302      	movs	r3, #2
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b86:	2300      	movs	r3, #0
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b8a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 f963 	bl	8001e60 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ba0:	f000 f823 	bl	8000bea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fbd0 	bl	8002364 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bca:	f000 f80e 	bl	8000bea <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3740      	adds	r7, #64	; 0x40
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int count = 100;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000bde:	f000 fa43 	bl	8001068 <SCH_Update>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bee:	b672      	cpsid	i
}
 8000bf0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <Error_Handler+0x8>

08000bf4 <pedestrianLightBlinkGrn>:
uint16_t pedestrianLightPin[NUM_OF_PORTS] = {
		D6_Pin,
		D7_Pin
};

void pedestrianLightBlinkGrn(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT]);
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <pedestrianLightBlinkGrn+0x28>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <pedestrianLightBlinkGrn+0x2c>)
 8000bfe:	8852      	ldrh	r2, [r2, #2]
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 f8f1 	bl	8001dea <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <pedestrianLightBlinkGrn+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <pedestrianLightBlinkGrn+0x2c>)
 8000c0e:	8811      	ldrh	r1, [r2, #0]
 8000c10:	2200      	movs	r2, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 f8d1 	bl	8001dba <HAL_GPIO_WritePin>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000038 	.word	0x20000038
 8000c20:	20000040 	.word	0x20000040

08000c24 <pedestrianLightBlinkRed>:

void pedestrianLightBlinkRed(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT]);
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <pedestrianLightBlinkRed+0x28>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <pedestrianLightBlinkRed+0x2c>)
 8000c2e:	8812      	ldrh	r2, [r2, #0]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 f8d9 	bl	8001dea <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <pedestrianLightBlinkRed+0x28>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <pedestrianLightBlinkRed+0x2c>)
 8000c3e:	8851      	ldrh	r1, [r2, #2]
 8000c40:	2200      	movs	r2, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f8b9 	bl	8001dba <HAL_GPIO_WritePin>
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000038 	.word	0x20000038
 8000c50:	20000040 	.word	0x20000040

08000c54 <pedestrianLightGrn>:

void pedestrianLightGrn(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], ON);
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <pedestrianLightGrn+0x28>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <pedestrianLightGrn+0x2c>)
 8000c5e:	8851      	ldrh	r1, [r2, #2]
 8000c60:	2201      	movs	r2, #1
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f8a9 	bl	8001dba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <pedestrianLightGrn+0x28>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <pedestrianLightGrn+0x2c>)
 8000c6e:	8811      	ldrh	r1, [r2, #0]
 8000c70:	2200      	movs	r2, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 f8a1 	bl	8001dba <HAL_GPIO_WritePin>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000038 	.word	0x20000038
 8000c80:	20000040 	.word	0x20000040

08000c84 <pedestrianLightRed>:

void pedestrianLightRed(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], ON);
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <pedestrianLightRed+0x28>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <pedestrianLightRed+0x2c>)
 8000c8e:	8811      	ldrh	r1, [r2, #0]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 f891 	bl	8001dba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <pedestrianLightRed+0x28>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <pedestrianLightRed+0x2c>)
 8000c9e:	8851      	ldrh	r1, [r2, #2]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 f889 	bl	8001dba <HAL_GPIO_WritePin>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000038 	.word	0x20000038
 8000cb0:	20000040 	.word	0x20000040

08000cb4 <pedestrianLightOff>:

void pedestrianLightOff(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <pedestrianLightOff+0x28>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <pedestrianLightOff+0x2c>)
 8000cbe:	8851      	ldrh	r1, [r2, #2]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f879 	bl	8001dba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <pedestrianLightOff+0x28>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <pedestrianLightOff+0x2c>)
 8000cce:	8811      	ldrh	r1, [r2, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 f871 	bl	8001dba <HAL_GPIO_WritePin>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000038 	.word	0x20000038
 8000ce0:	20000040 	.word	0x20000040

08000ce4 <SCH_Add_Task>:
		SCH_tasks_G[Index].Period = 0;
		SCH_tasks_G[Index].RunMe = 0;
	}
}

uint32_t SCH_Add_Task(void (* pFunction)(void), uint32_t DELAY, uint32_t PERIOD) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
	if(Size == SCH_MAX_TASKS - 1) return SCH_MAX_TASKS;
 8000cf0:	4b7b      	ldr	r3, [pc, #492]	; (8000ee0 <SCH_Add_Task+0x1fc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b27      	cmp	r3, #39	; 0x27
 8000cf6:	d101      	bne.n	8000cfc <SCH_Add_Task+0x18>
 8000cf8:	2328      	movs	r3, #40	; 0x28
 8000cfa:	e0ec      	b.n	8000ed6 <SCH_Add_Task+0x1f2>

	uint8_t flag = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	77fb      	strb	r3, [r7, #31]
	uint32_t Index = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
	if(SYSTEM_DELAY > 0) {
		DELAY /= SYSTEM_DELAY;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4a77      	ldr	r2, [pc, #476]	; (8000ee4 <SCH_Add_Task+0x200>)
 8000d08:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0c:	08db      	lsrs	r3, r3, #3
 8000d0e:	60bb      	str	r3, [r7, #8]
	}
	for(; Index < Size && flag == 0; Index++) {
 8000d10:	e031      	b.n	8000d76 <SCH_Add_Task+0x92>
		if(DELAY > SCH_tasks_G[Index].Delay) {
 8000d12:	4975      	ldr	r1, [pc, #468]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	440b      	add	r3, r1
 8000d20:	3304      	adds	r3, #4
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d90c      	bls.n	8000d44 <SCH_Add_Task+0x60>
			DELAY -= SCH_tasks_G[Index].Delay;
 8000d2a:	496f      	ldr	r1, [pc, #444]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	3304      	adds	r3, #4
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	e015      	b.n	8000d70 <SCH_Add_Task+0x8c>
		}
		else {
			flag = 1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	77fb      	strb	r3, [r7, #31]
			SCH_tasks_G[Index].Delay -= DELAY;
 8000d48:	4967      	ldr	r1, [pc, #412]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	440b      	add	r3, r1
 8000d56:	3304      	adds	r3, #4
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad1      	subs	r1, r2, r3
 8000d5e:	4862      	ldr	r0, [pc, #392]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4403      	add	r3, r0
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	6019      	str	r1, [r3, #0]
	for(; Index < Size && flag == 0; Index++) {
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	3301      	adds	r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <SCH_Add_Task+0x1fc>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d202      	bcs.n	8000d86 <SCH_Add_Task+0xa2>
 8000d80:	7ffb      	ldrb	r3, [r7, #31]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0c5      	beq.n	8000d12 <SCH_Add_Task+0x2e>
		}
	}
	if(flag == 1) {
 8000d86:	7ffb      	ldrb	r3, [r7, #31]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d16d      	bne.n	8000e68 <SCH_Add_Task+0x184>
		Index -= 1;
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
		for(uint32_t Temp = Size; Temp > Index; Temp--) {
 8000d92:	4b53      	ldr	r3, [pc, #332]	; (8000ee0 <SCH_Add_Task+0x1fc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e062      	b.n	8000e60 <SCH_Add_Task+0x17c>
			SCH_tasks_G[Temp].pTask = SCH_tasks_G[Temp - 1].pTask;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	1e5a      	subs	r2, r3, #1
 8000d9e:	4952      	ldr	r1, [pc, #328]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	6819      	ldr	r1, [r3, #0]
 8000dac:	484e      	ldr	r0, [pc, #312]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4403      	add	r3, r0
 8000dba:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[Temp].Delay = SCH_tasks_G[Temp - 1].Delay;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	4949      	ldr	r1, [pc, #292]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	440b      	add	r3, r1
 8000dcc:	3304      	adds	r3, #4
 8000dce:	6819      	ldr	r1, [r3, #0]
 8000dd0:	4845      	ldr	r0, [pc, #276]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4403      	add	r3, r0
 8000dde:	3304      	adds	r3, #4
 8000de0:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[Temp].Period = SCH_tasks_G[Temp - 1].Period;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	4940      	ldr	r1, [pc, #256]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	3308      	adds	r3, #8
 8000df4:	6819      	ldr	r1, [r3, #0]
 8000df6:	483c      	ldr	r0, [pc, #240]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4403      	add	r3, r0
 8000e04:	3308      	adds	r3, #8
 8000e06:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[Temp].RunMe = SCH_tasks_G[Temp - 1].RunMe;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	1e5a      	subs	r2, r3, #1
 8000e0c:	4936      	ldr	r1, [pc, #216]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	440b      	add	r3, r1
 8000e18:	330c      	adds	r3, #12
 8000e1a:	7818      	ldrb	r0, [r3, #0]
 8000e1c:	4932      	ldr	r1, [pc, #200]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	330c      	adds	r3, #12
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[Temp].TaskID = SCH_tasks_G[Temp - 1].RunMe + 1;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	492c      	ldr	r1, [pc, #176]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	330c      	adds	r3, #12
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4618      	mov	r0, r3
 8000e48:	4927      	ldr	r1, [pc, #156]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	3310      	adds	r3, #16
 8000e58:	6018      	str	r0, [r3, #0]
		for(uint32_t Temp = Size; Temp > Index; Temp--) {
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d898      	bhi.n	8000d9a <SCH_Add_Task+0xb6>
		}
	}
	SCH_tasks_G[Index].pTask = pFunction;
 8000e68:	491f      	ldr	r1, [pc, #124]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 8000e7a:	491b      	ldr	r1, [pc, #108]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	3304      	adds	r3, #4
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 8000e8e:	4916      	ldr	r1, [pc, #88]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3308      	adds	r3, #8
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 8000ea2:	4911      	ldr	r1, [pc, #68]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[Index].TaskID = Index;
 8000eb6:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <SCH_Add_Task+0x204>)
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3310      	adds	r3, #16
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	601a      	str	r2, [r3, #0]

	Size += 1;
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SCH_Add_Task+0x1fc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <SCH_Add_Task+0x1fc>)
 8000ed2:	6013      	str	r3, [r2, #0]

	return Index;
 8000ed4:	69bb      	ldr	r3, [r7, #24]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	20000430 	.word	0x20000430
 8000ee4:	cccccccd 	.word	0xcccccccd
 8000ee8:	2000010c 	.word	0x2000010c

08000eec <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t TASK_INDEX) {
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[TASK_INDEX].pTask == 0) return;
 8000ef4:	493f      	ldr	r1, [pc, #252]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d070      	beq.n	8000fea <SCH_Delete_Task+0xfe>

	for(uint32_t Temp = TASK_INDEX; Temp < Size - 1; Temp++) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e061      	b.n	8000fd2 <SCH_Delete_Task+0xe6>
		SCH_tasks_G[Temp].pTask = SCH_tasks_G[Temp + 1].pTask;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	4938      	ldr	r1, [pc, #224]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	6819      	ldr	r1, [r3, #0]
 8000f20:	4834      	ldr	r0, [pc, #208]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4403      	add	r3, r0
 8000f2e:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Temp].Delay = SCH_tasks_G[Temp + 1].Delay;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	492f      	ldr	r1, [pc, #188]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3304      	adds	r3, #4
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	482b      	ldr	r0, [pc, #172]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4403      	add	r3, r0
 8000f52:	3304      	adds	r3, #4
 8000f54:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Temp].Period = SCH_tasks_G[Temp + 1].Period;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	4926      	ldr	r1, [pc, #152]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	3308      	adds	r3, #8
 8000f68:	6819      	ldr	r1, [r3, #0]
 8000f6a:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4403      	add	r3, r0
 8000f78:	3308      	adds	r3, #8
 8000f7a:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Temp].RunMe = SCH_tasks_G[Temp + 1].RunMe;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	491c      	ldr	r1, [pc, #112]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	330c      	adds	r3, #12
 8000f8e:	7818      	ldrb	r0, [r3, #0]
 8000f90:	4918      	ldr	r1, [pc, #96]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[Temp].TaskID = SCH_tasks_G[Temp + 1].TaskID - 1;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	4912      	ldr	r1, [pc, #72]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3310      	adds	r3, #16
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	1e59      	subs	r1, r3, #1
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <SCH_Delete_Task+0x108>)
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4403      	add	r3, r0
 8000fc8:	3310      	adds	r3, #16
 8000fca:	6019      	str	r1, [r3, #0]
	for(uint32_t Temp = TASK_INDEX; Temp < Size - 1; Temp++) {
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <SCH_Delete_Task+0x10c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d397      	bcc.n	8000f0e <SCH_Delete_Task+0x22>
	}

	Size -= 1;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SCH_Delete_Task+0x10c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <SCH_Delete_Task+0x10c>)
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	e000      	b.n	8000fec <SCH_Delete_Task+0x100>
	if(SCH_tasks_G[TASK_INDEX].pTask == 0) return;
 8000fea:	bf00      	nop
}
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	2000010c 	.word	0x2000010c
 8000ff8:	20000430 	.word	0x20000430

08000ffc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000ffc:	b598      	push	{r3, r4, r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe == 1) {
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <SCH_Dispatch_Tasks+0x64>)
 8001002:	7b1b      	ldrb	r3, [r3, #12]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d129      	bne.n	800105c <SCH_Dispatch_Tasks+0x60>
		(*SCH_tasks_G[0].pTask)();
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <SCH_Dispatch_Tasks+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4798      	blx	r3

		if(SCH_tasks_G[0].Period > 0) {
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <SCH_Dispatch_Tasks+0x64>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d01f      	beq.n	8001056 <SCH_Dispatch_Tasks+0x5a>
			SCH_Add_Task(SCH_tasks_G[Current].pTask, SCH_tasks_G[Current].Period, SCH_tasks_G[Current].Period);
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <SCH_Dispatch_Tasks+0x68>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4911      	ldr	r1, [pc, #68]	; (8001060 <SCH_Dispatch_Tasks+0x64>)
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <SCH_Dispatch_Tasks+0x68>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <SCH_Dispatch_Tasks+0x64>)
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3308      	adds	r3, #8
 800103a:	6819      	ldr	r1, [r3, #0]
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <SCH_Dispatch_Tasks+0x68>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4c07      	ldr	r4, [pc, #28]	; (8001060 <SCH_Dispatch_Tasks+0x64>)
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4423      	add	r3, r4
 800104c:	3308      	adds	r3, #8
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	f7ff fe47 	bl	8000ce4 <SCH_Add_Task>
		}

		SCH_Delete_Task(0);
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff ff48 	bl	8000eec <SCH_Delete_Task>
	}
}
 800105c:	bf00      	nop
 800105e:	bd98      	pop	{r3, r4, r7, pc}
 8001060:	2000010c 	.word	0x2000010c
 8001064:	2000042c 	.word	0x2000042c

08001068 <SCH_Update>:

void SCH_Update(void) {
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].Delay == 0) {
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <SCH_Update+0x28>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d103      	bne.n	800107c <SCH_Update+0x14>
		SCH_tasks_G[0].RunMe = 1;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SCH_Update+0x28>)
 8001076:	2201      	movs	r2, #1
 8001078:	731a      	strb	r2, [r3, #12]
	}
	else {
		SCH_tasks_G[0].Delay--;
	}
}
 800107a:	e004      	b.n	8001086 <SCH_Update+0x1e>
		SCH_tasks_G[0].Delay--;
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SCH_Update+0x28>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	3b01      	subs	r3, #1
 8001082:	4a03      	ldr	r2, [pc, #12]	; (8001090 <SCH_Update+0x28>)
 8001084:	6053      	str	r3, [r2, #4]
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000010c 	.word	0x2000010c

08001094 <setTimer1>:
int timer2_flag = 0;

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer1_counter = duration / SYSTEM_DELAY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <setTimer1+0x2c>)
 80010a0:	fb82 1203 	smull	r1, r2, r2, r3
 80010a4:	1092      	asrs	r2, r2, #2
 80010a6:	17db      	asrs	r3, r3, #31
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <setTimer1+0x30>)
 80010ac:	6013      	str	r3, [r2, #0]
	} else timer1_counter = duration;
	timer1_flag = 0;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <setTimer1+0x34>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	66666667 	.word	0x66666667
 80010c4:	20000434 	.word	0x20000434
 80010c8:	20000438 	.word	0x20000438

080010cc <setTimer2>:

void setTimer2(int duration) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer2_counter = duration / SYSTEM_DELAY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <setTimer2+0x2c>)
 80010d8:	fb82 1203 	smull	r1, r2, r2, r3
 80010dc:	1092      	asrs	r2, r2, #2
 80010de:	17db      	asrs	r3, r3, #31
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	4a06      	ldr	r2, [pc, #24]	; (80010fc <setTimer2+0x30>)
 80010e4:	6013      	str	r3, [r2, #0]
	} else timer2_counter = duration;
	timer2_flag = 0;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <setTimer2+0x34>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	66666667 	.word	0x66666667
 80010fc:	2000043c 	.word	0x2000043c
 8001100:	20000440 	.word	0x20000440

08001104 <setTimer3>:


void setTimer3(int duration) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer3_counter = duration / SYSTEM_DELAY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <setTimer3+0x2c>)
 8001110:	fb82 1203 	smull	r1, r2, r2, r3
 8001114:	1092      	asrs	r2, r2, #2
 8001116:	17db      	asrs	r3, r3, #31
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	4a06      	ldr	r2, [pc, #24]	; (8001134 <setTimer3+0x30>)
 800111c:	6013      	str	r3, [r2, #0]
	} else timer3_counter = duration;
	timer3_flag = 0;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <setTimer3+0x34>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	66666667 	.word	0x66666667
 8001134:	20000444 	.word	0x20000444
 8001138:	20000448 	.word	0x20000448

0800113c <timerRun>:

void timerRun(void) {
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <timerRun+0x6c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	dd0b      	ble.n	8001160 <timerRun+0x24>
		timer1_counter--;
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <timerRun+0x6c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3b01      	subs	r3, #1
 800114e:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <timerRun+0x6c>)
 8001150:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <timerRun+0x6c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	dc02      	bgt.n	8001160 <timerRun+0x24>
			timer1_flag = 1;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <timerRun+0x70>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <timerRun+0x74>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	dd0b      	ble.n	8001180 <timerRun+0x44>
		timer2_counter--;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <timerRun+0x74>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	3b01      	subs	r3, #1
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <timerRun+0x74>)
 8001170:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <timerRun+0x74>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	dc02      	bgt.n	8001180 <timerRun+0x44>
			timer2_flag = 1;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <timerRun+0x78>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <timerRun+0x7c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dd0b      	ble.n	80011a0 <timerRun+0x64>
		timer3_counter--;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <timerRun+0x7c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <timerRun+0x7c>)
 8001190:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <timerRun+0x7c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dc02      	bgt.n	80011a0 <timerRun+0x64>
			timer3_flag = 1;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <timerRun+0x80>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
		}
	}
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	20000434 	.word	0x20000434
 80011ac:	20000438 	.word	0x20000438
 80011b0:	2000043c 	.word	0x2000043c
 80011b4:	20000440 	.word	0x20000440
 80011b8:	20000444 	.word	0x20000444
 80011bc:	20000448 	.word	0x20000448

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_MspInit+0x5c>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	4a14      	ldr	r2, [pc, #80]	; (800121c <HAL_MspInit+0x5c>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6193      	str	r3, [r2, #24]
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_MspInit+0x5c>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_MspInit+0x5c>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_MspInit+0x5c>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_MspInit+0x5c>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_MspInit+0x60>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_MspInit+0x60>)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40021000 	.word	0x40021000
 8001220:	40010000 	.word	0x40010000

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126a:	f000 fae1 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TIM3_IRQHandler+0x10>)
 800127a:	f001 fb05 	bl	8002888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000450 	.word	0x20000450

08001288 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800128c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001290:	f000 fdc4 	bl	8001e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f002 fa34 	bl	8003734 <__errno>
 80012cc:	4603      	mov	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <_sbrk+0x64>)
 80012e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20005000 	.word	0x20005000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	2000044c 	.word	0x2000044c
 8001300:	200004f0 	.word	0x200004f0

08001304 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001340:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <MX_TIM3_Init+0xe4>)
 8001342:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <MX_TIM3_Init+0xe8>)
 8001344:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8001346:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <MX_TIM3_Init+0xe4>)
 8001348:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800134c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <MX_TIM3_Init+0xe4>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <MX_TIM3_Init+0xe4>)
 8001356:	2263      	movs	r2, #99	; 0x63
 8001358:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MX_TIM3_Init+0xe4>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <MX_TIM3_Init+0xe4>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001366:	4823      	ldr	r0, [pc, #140]	; (80013f4 <MX_TIM3_Init+0xe4>)
 8001368:	f001 f994 	bl	8002694 <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001372:	f7ff fc3a 	bl	8000bea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800137c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001380:	4619      	mov	r1, r3
 8001382:	481c      	ldr	r0, [pc, #112]	; (80013f4 <MX_TIM3_Init+0xe4>)
 8001384:	f001 fc46 	bl	8002c14 <HAL_TIM_ConfigClockSource>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800138e:	f7ff fc2c 	bl	8000bea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001392:	4818      	ldr	r0, [pc, #96]	; (80013f4 <MX_TIM3_Init+0xe4>)
 8001394:	f001 fa20 	bl	80027d8 <HAL_TIM_PWM_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800139e:	f7ff fc24 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	4619      	mov	r1, r3
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <MX_TIM3_Init+0xe4>)
 80013b2:	f001 ff97 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013bc:	f7ff fc15 	bl	8000bea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c0:	2360      	movs	r3, #96	; 0x60
 80013c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	4619      	mov	r1, r3
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_TIM3_Init+0xe4>)
 80013d8:	f001 fb5e 	bl	8002a98 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013e2:	f7ff fc02 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <MX_TIM3_Init+0xe4>)
 80013e8:	f000 f82e 	bl	8001448 <HAL_TIM_MspPostInit>

}
 80013ec:	bf00      	nop
 80013ee:	3738      	adds	r7, #56	; 0x38
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000450 	.word	0x20000450
 80013f8:	40000400 	.word	0x40000400

080013fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_TIM_Base_MspInit+0x44>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d113      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_TIM_Base_MspInit+0x48>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <HAL_TIM_Base_MspInit+0x48>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_TIM_Base_MspInit+0x48>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	201d      	movs	r0, #29
 800142c:	f000 faf3 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001430:	201d      	movs	r0, #29
 8001432:	f000 fb0c 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40000400 	.word	0x40000400
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <HAL_TIM_MspPostInit+0x7c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d129      	bne.n	80014bc <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001468:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_TIM_MspPostInit+0x80>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <HAL_TIM_MspPostInit+0x80>)
 800146e:	f043 0310 	orr.w	r3, r3, #16
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_TIM_MspPostInit+0x80>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0310 	and.w	r3, r3, #16
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001480:	2340      	movs	r3, #64	; 0x40
 8001482:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4619      	mov	r1, r3
 8001492:	480e      	ldr	r0, [pc, #56]	; (80014cc <HAL_TIM_MspPostInit+0x84>)
 8001494:	f000 faf6 	bl	8001a84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_TIM_MspPostInit+0x88>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <HAL_TIM_MspPostInit+0x88>)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40000400 	.word	0x40000400
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40011000 	.word	0x40011000
 80014d0:	40010000 	.word	0x40010000

080014d4 <trafficLightBlinkGrn>:
uint16_t trafficLightPin[NUM_OF_TRAFFIC_LIGHTS][NUM_OF_PORTS] = {
		{D2_Pin, D3_Pin},
		{D4_Pin, D5_Pin}
};

void trafficLightBlinkGrn(int index) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT]);
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <trafficLightBlinkGrn+0x44>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	490d      	ldr	r1, [pc, #52]	; (800151c <trafficLightBlinkGrn+0x48>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	885b      	ldrh	r3, [r3, #2]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f000 fc79 	bl	8001dea <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], OFF);
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <trafficLightBlinkGrn+0x44>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <trafficLightBlinkGrn+0x48>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001508:	2200      	movs	r2, #0
 800150a:	4619      	mov	r1, r3
 800150c:	f000 fc55 	bl	8001dba <HAL_GPIO_WritePin>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000048 	.word	0x20000048
 800151c:	20000058 	.word	0x20000058

08001520 <trafficLightBlinkYel>:

void trafficLightBlinkYel(int index) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT]);
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <trafficLightBlinkYel+0x44>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	490d      	ldr	r1, [pc, #52]	; (8001568 <trafficLightBlinkYel+0x48>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	885b      	ldrh	r3, [r3, #2]
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f000 fc53 	bl	8001dea <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT]);
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <trafficLightBlinkYel+0x44>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800154c:	4906      	ldr	r1, [pc, #24]	; (8001568 <trafficLightBlinkYel+0x48>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f000 fc47 	bl	8001dea <HAL_GPIO_TogglePin>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000048 	.word	0x20000048
 8001568:	20000058 	.word	0x20000058

0800156c <trafficLightGrn>:
void trafficLightBlinkRed(int index) {
	HAL_GPIO_TogglePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT]);
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], OFF);
}

void trafficLightGrn(int index) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], ON);
 8001574:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <trafficLightGrn+0x44>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	6858      	ldr	r0, [r3, #4]
 800157e:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <trafficLightGrn+0x48>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	885b      	ldrh	r3, [r3, #2]
 8001588:	2201      	movs	r2, #1
 800158a:	4619      	mov	r1, r3
 800158c:	f000 fc15 	bl	8001dba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], OFF);
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <trafficLightGrn+0x44>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <trafficLightGrn+0x48>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80015a0:	2200      	movs	r2, #0
 80015a2:	4619      	mov	r1, r3
 80015a4:	f000 fc09 	bl	8001dba <HAL_GPIO_WritePin>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000048 	.word	0x20000048
 80015b4:	20000058 	.word	0x20000058

080015b8 <trafficLightYel>:

void trafficLightYel(int index) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], ON);
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <trafficLightYel+0x44>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	6858      	ldr	r0, [r3, #4]
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <trafficLightYel+0x48>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	885b      	ldrh	r3, [r3, #2]
 80015d4:	2201      	movs	r2, #1
 80015d6:	4619      	mov	r1, r3
 80015d8:	f000 fbef 	bl	8001dba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], ON);
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <trafficLightYel+0x44>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <trafficLightYel+0x48>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80015ec:	2201      	movs	r2, #1
 80015ee:	4619      	mov	r1, r3
 80015f0:	f000 fbe3 	bl	8001dba <HAL_GPIO_WritePin>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000048 	.word	0x20000048
 8001600:	20000058 	.word	0x20000058

08001604 <trafficLightRed>:

void trafficLightRed(int index) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], ON);
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <trafficLightRed+0x44>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <trafficLightRed+0x48>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	f000 fbcb 	bl	8001dba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], OFF);
 8001624:	4a08      	ldr	r2, [pc, #32]	; (8001648 <trafficLightRed+0x44>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	6858      	ldr	r0, [r3, #4]
 800162e:	4a07      	ldr	r2, [pc, #28]	; (800164c <trafficLightRed+0x48>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	885b      	ldrh	r3, [r3, #2]
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	f000 fbbd 	bl	8001dba <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000048 	.word	0x20000048
 800164c:	20000058 	.word	0x20000058

08001650 <displayCountdown>:
 */


#include "uart_communication.h"

void displayCountdown(int value) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b090      	sub	sp, #64	; 0x40
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	char str[50];
	HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "!7SEG=%d#\r\n", value), 1000);
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <displayCountdown+0x30>)
 8001660:	4618      	mov	r0, r3
 8001662:	f002 f899 	bl	8003798 <siprintf>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 010c 	add.w	r1, r7, #12
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	4804      	ldr	r0, [pc, #16]	; (8001684 <displayCountdown+0x34>)
 8001674:	f001 fef3 	bl	800345e <HAL_UART_Transmit>
}
 8001678:	bf00      	nop
 800167a:	3740      	adds	r7, #64	; 0x40
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	080040a4 	.word	0x080040a4
 8001684:	20000498 	.word	0x20000498

08001688 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_USART2_UART_Init+0x4c>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <MX_USART2_UART_Init+0x50>)
 8001690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <MX_USART2_UART_Init+0x4c>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_USART2_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f001 fe80 	bl	80033c4 <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ca:	f7ff fa8e 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000498 	.word	0x20000498
 80016d8:	40004400 	.word	0x40004400

080016dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <HAL_UART_MspInit+0x70>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d123      	bne.n	8001744 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_UART_MspInit+0x74>)
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	4a13      	ldr	r2, [pc, #76]	; (8001750 <HAL_UART_MspInit+0x74>)
 8001702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001706:	61d3      	str	r3, [r2, #28]
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_UART_MspInit+0x74>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_UART_MspInit+0x74>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <HAL_UART_MspInit+0x74>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_UART_MspInit+0x74>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800172c:	230c      	movs	r3, #12
 800172e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2302      	movs	r3, #2
 8001736:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_UART_MspInit+0x78>)
 8001740:	f000 f9a0 	bl	8001a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001744:	bf00      	nop
 8001746:	3720      	adds	r7, #32
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40004400 	.word	0x40004400
 8001750:	40021000 	.word	0x40021000
 8001754:	40010800 	.word	0x40010800

08001758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001758:	480c      	ldr	r0, [pc, #48]	; (800178c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175a:	490d      	ldr	r1, [pc, #52]	; (8001790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001770:	4c0a      	ldr	r4, [pc, #40]	; (800179c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800177e:	f7ff fdc1 	bl	8001304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001782:	f001 ffdd 	bl	8003740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001786:	f7ff f9b5 	bl	8000af4 <main>
  bx lr
 800178a:	4770      	bx	lr
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001794:	08004114 	.word	0x08004114
  ldr r2, =_sbss
 8001798:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 800179c:	200004f0 	.word	0x200004f0

080017a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC1_2_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_Init+0x28>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_Init+0x28>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f923 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 f808 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff fcfe 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f93b 	bl	8001a6a <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 f903 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000044 	.word	0x20000044
 8001828:	20000064 	.word	0x20000064
 800182c:	20000060 	.word	0x20000060

08001830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x1c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x20>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <HAL_IncTick+0x20>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	20000064 	.word	0x20000064
 8001850:	200004dc 	.word	0x200004dc

08001854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <HAL_GetTick+0x10>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	200004dc 	.word	0x200004dc

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4906      	ldr	r1, [pc, #24]	; (8001900 <__NVIC_EnableIRQ+0x34>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff90 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff2d 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff42 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff90 	bl	8001958 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5f 	bl	8001904 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff35 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b08b      	sub	sp, #44	; 0x2c
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a96:	e169      	b.n	8001d6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 8158 	bne.w	8001d66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a9a      	ldr	r2, [pc, #616]	; (8001d24 <HAL_GPIO_Init+0x2a0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d05e      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
 8001ac0:	4a98      	ldr	r2, [pc, #608]	; (8001d24 <HAL_GPIO_Init+0x2a0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d875      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001ac6:	4a98      	ldr	r2, [pc, #608]	; (8001d28 <HAL_GPIO_Init+0x2a4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d058      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
 8001acc:	4a96      	ldr	r2, [pc, #600]	; (8001d28 <HAL_GPIO_Init+0x2a4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d86f      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001ad2:	4a96      	ldr	r2, [pc, #600]	; (8001d2c <HAL_GPIO_Init+0x2a8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d052      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
 8001ad8:	4a94      	ldr	r2, [pc, #592]	; (8001d2c <HAL_GPIO_Init+0x2a8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d869      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001ade:	4a94      	ldr	r2, [pc, #592]	; (8001d30 <HAL_GPIO_Init+0x2ac>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d04c      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
 8001ae4:	4a92      	ldr	r2, [pc, #584]	; (8001d30 <HAL_GPIO_Init+0x2ac>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d863      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001aea:	4a92      	ldr	r2, [pc, #584]	; (8001d34 <HAL_GPIO_Init+0x2b0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d046      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
 8001af0:	4a90      	ldr	r2, [pc, #576]	; (8001d34 <HAL_GPIO_Init+0x2b0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d85d      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001af6:	2b12      	cmp	r3, #18
 8001af8:	d82a      	bhi.n	8001b50 <HAL_GPIO_Init+0xcc>
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	d859      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001afe:	a201      	add	r2, pc, #4	; (adr r2, 8001b04 <HAL_GPIO_Init+0x80>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b7f 	.word	0x08001b7f
 8001b08:	08001b59 	.word	0x08001b59
 8001b0c:	08001b6b 	.word	0x08001b6b
 8001b10:	08001bad 	.word	0x08001bad
 8001b14:	08001bb3 	.word	0x08001bb3
 8001b18:	08001bb3 	.word	0x08001bb3
 8001b1c:	08001bb3 	.word	0x08001bb3
 8001b20:	08001bb3 	.word	0x08001bb3
 8001b24:	08001bb3 	.word	0x08001bb3
 8001b28:	08001bb3 	.word	0x08001bb3
 8001b2c:	08001bb3 	.word	0x08001bb3
 8001b30:	08001bb3 	.word	0x08001bb3
 8001b34:	08001bb3 	.word	0x08001bb3
 8001b38:	08001bb3 	.word	0x08001bb3
 8001b3c:	08001bb3 	.word	0x08001bb3
 8001b40:	08001bb3 	.word	0x08001bb3
 8001b44:	08001bb3 	.word	0x08001bb3
 8001b48:	08001b61 	.word	0x08001b61
 8001b4c:	08001b75 	.word	0x08001b75
 8001b50:	4a79      	ldr	r2, [pc, #484]	; (8001d38 <HAL_GPIO_Init+0x2b4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d013      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b56:	e02c      	b.n	8001bb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	623b      	str	r3, [r7, #32]
          break;
 8001b5e:	e029      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	3304      	adds	r3, #4
 8001b66:	623b      	str	r3, [r7, #32]
          break;
 8001b68:	e024      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	3308      	adds	r3, #8
 8001b70:	623b      	str	r3, [r7, #32]
          break;
 8001b72:	e01f      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	330c      	adds	r3, #12
 8001b7a:	623b      	str	r3, [r7, #32]
          break;
 8001b7c:	e01a      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b86:	2304      	movs	r3, #4
 8001b88:	623b      	str	r3, [r7, #32]
          break;
 8001b8a:	e013      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b94:	2308      	movs	r3, #8
 8001b96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	611a      	str	r2, [r3, #16]
          break;
 8001b9e:	e009      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	615a      	str	r2, [r3, #20]
          break;
 8001baa:	e003      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
          break;
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          break;
 8001bb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2bff      	cmp	r3, #255	; 0xff
 8001bb8:	d801      	bhi.n	8001bbe <HAL_GPIO_Init+0x13a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	e001      	b.n	8001bc2 <HAL_GPIO_Init+0x13e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2bff      	cmp	r3, #255	; 0xff
 8001bc8:	d802      	bhi.n	8001bd0 <HAL_GPIO_Init+0x14c>
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	e002      	b.n	8001bd6 <HAL_GPIO_Init+0x152>
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	3b08      	subs	r3, #8
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	210f      	movs	r1, #15
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	401a      	ands	r2, r3
 8001be8:	6a39      	ldr	r1, [r7, #32]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80b1 	beq.w	8001d66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c04:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c1c:	4a48      	ldr	r2, [pc, #288]	; (8001d40 <HAL_GPIO_Init+0x2bc>)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a40      	ldr	r2, [pc, #256]	; (8001d44 <HAL_GPIO_Init+0x2c0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d013      	beq.n	8001c70 <HAL_GPIO_Init+0x1ec>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3f      	ldr	r2, [pc, #252]	; (8001d48 <HAL_GPIO_Init+0x2c4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00d      	beq.n	8001c6c <HAL_GPIO_Init+0x1e8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3e      	ldr	r2, [pc, #248]	; (8001d4c <HAL_GPIO_Init+0x2c8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d007      	beq.n	8001c68 <HAL_GPIO_Init+0x1e4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a3d      	ldr	r2, [pc, #244]	; (8001d50 <HAL_GPIO_Init+0x2cc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_GPIO_Init+0x1e0>
 8001c60:	2303      	movs	r3, #3
 8001c62:	e006      	b.n	8001c72 <HAL_GPIO_Init+0x1ee>
 8001c64:	2304      	movs	r3, #4
 8001c66:	e004      	b.n	8001c72 <HAL_GPIO_Init+0x1ee>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e002      	b.n	8001c72 <HAL_GPIO_Init+0x1ee>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_GPIO_Init+0x1ee>
 8001c70:	2300      	movs	r3, #0
 8001c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c74:	f002 0203 	and.w	r2, r2, #3
 8001c78:	0092      	lsls	r2, r2, #2
 8001c7a:	4093      	lsls	r3, r2
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c82:	492f      	ldr	r1, [pc, #188]	; (8001d40 <HAL_GPIO_Init+0x2bc>)
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	492c      	ldr	r1, [pc, #176]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	4928      	ldr	r1, [pc, #160]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4922      	ldr	r1, [pc, #136]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	491e      	ldr	r1, [pc, #120]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4918      	ldr	r1, [pc, #96]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4914      	ldr	r1, [pc, #80]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d021      	beq.n	8001d58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60cb      	str	r3, [r1, #12]
 8001d20:	e021      	b.n	8001d66 <HAL_GPIO_Init+0x2e2>
 8001d22:	bf00      	nop
 8001d24:	10320000 	.word	0x10320000
 8001d28:	10310000 	.word	0x10310000
 8001d2c:	10220000 	.word	0x10220000
 8001d30:	10210000 	.word	0x10210000
 8001d34:	10120000 	.word	0x10120000
 8001d38:	10110000 	.word	0x10110000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40010800 	.word	0x40010800
 8001d48:	40010c00 	.word	0x40010c00
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	40011400 	.word	0x40011400
 8001d54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	4909      	ldr	r1, [pc, #36]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	3301      	adds	r3, #1
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	fa22 f303 	lsr.w	r3, r2, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f47f ae8e 	bne.w	8001a98 <HAL_GPIO_Init+0x14>
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	372c      	adds	r7, #44	; 0x2c
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e001      	b.n	8001dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	807b      	strh	r3, [r7, #2]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dca:	787b      	ldrb	r3, [r7, #1]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd0:	887a      	ldrh	r2, [r7, #2]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dd6:	e003      	b.n	8001de0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	041a      	lsls	r2, r3, #16
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	611a      	str	r2, [r3, #16]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dfc:	887a      	ldrh	r2, [r7, #2]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4013      	ands	r3, r2
 8001e02:	041a      	lsls	r2, r3, #16
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	400b      	ands	r3, r1
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	611a      	str	r2, [r3, #16]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f806 	bl	8001e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40010400 	.word	0x40010400

08001e4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e272      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8087 	beq.w	8001f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e80:	4b92      	ldr	r3, [pc, #584]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e8c:	4b8f      	ldr	r3, [pc, #572]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d112      	bne.n	8001ebe <HAL_RCC_OscConfig+0x5e>
 8001e98:	4b8c      	ldr	r3, [pc, #560]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d10b      	bne.n	8001ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea6:	4b89      	ldr	r3, [pc, #548]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d06c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x12c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d168      	bne.n	8001f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e24c      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x76>
 8001ec8:	4b80      	ldr	r3, [pc, #512]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a7f      	ldr	r2, [pc, #508]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	e02e      	b.n	8001f34 <HAL_RCC_OscConfig+0xd4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x98>
 8001ede:	4b7b      	ldr	r3, [pc, #492]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7a      	ldr	r2, [pc, #488]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b78      	ldr	r3, [pc, #480]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a77      	ldr	r2, [pc, #476]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xd4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0xbc>
 8001f02:	4b72      	ldr	r3, [pc, #456]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a71      	ldr	r2, [pc, #452]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a6e      	ldr	r2, [pc, #440]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xd4>
 8001f1c:	4b6b      	ldr	r3, [pc, #428]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a6a      	ldr	r2, [pc, #424]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b68      	ldr	r3, [pc, #416]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a67      	ldr	r2, [pc, #412]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fc8a 	bl	8001854 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff fc86 	bl	8001854 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e200      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b5d      	ldr	r3, [pc, #372]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe4>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fc76 	bl	8001854 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fc72 	bl	8001854 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1ec      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x10c>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9a:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fa6:	4b49      	ldr	r3, [pc, #292]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x18c>
 8001fb2:	4b46      	ldr	r3, [pc, #280]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	4b43      	ldr	r3, [pc, #268]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x176>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1c0      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4939      	ldr	r1, [pc, #228]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	e03a      	b.n	8002062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fc2b 	bl	8001854 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff fc27 	bl	8001854 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1a1      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4927      	ldr	r1, [pc, #156]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002036:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <HAL_RCC_OscConfig+0x270>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fc0a 	bl	8001854 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002044:	f7ff fc06 	bl	8001854 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e180      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d03a      	beq.n	80020e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d019      	beq.n	80020aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_RCC_OscConfig+0x274>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7ff fbea 	bl	8001854 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fbe6 	bl	8001854 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e160      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCC_OscConfig+0x26c>)
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f000 fad8 	bl	8002658 <RCC_Delay>
 80020a8:	e01c      	b.n	80020e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <HAL_RCC_OscConfig+0x274>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff fbd0 	bl	8001854 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b6:	e00f      	b.n	80020d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff fbcc 	bl	8001854 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d908      	bls.n	80020d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e146      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	42420000 	.word	0x42420000
 80020d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	4b92      	ldr	r3, [pc, #584]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e9      	bne.n	80020b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a6 	beq.w	800223e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b88      	ldr	r3, [pc, #544]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a87      	ldr	r2, [pc, #540]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b85      	ldr	r3, [pc, #532]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b82      	ldr	r3, [pc, #520]	; (8002328 <HAL_RCC_OscConfig+0x4c8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212a:	4b7f      	ldr	r3, [pc, #508]	; (8002328 <HAL_RCC_OscConfig+0x4c8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7e      	ldr	r2, [pc, #504]	; (8002328 <HAL_RCC_OscConfig+0x4c8>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7ff fb8d 	bl	8001854 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7ff fb89 	bl	8001854 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	; 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e103      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	4b75      	ldr	r3, [pc, #468]	; (8002328 <HAL_RCC_OscConfig+0x4c8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x312>
 8002164:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a6e      	ldr	r2, [pc, #440]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	e02d      	b.n	80021ce <HAL_RCC_OscConfig+0x36e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x334>
 800217a:	4b6a      	ldr	r3, [pc, #424]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a69      	ldr	r2, [pc, #420]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	4b67      	ldr	r3, [pc, #412]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4a66      	ldr	r2, [pc, #408]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	6213      	str	r3, [r2, #32]
 8002192:	e01c      	b.n	80021ce <HAL_RCC_OscConfig+0x36e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d10c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x356>
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a60      	ldr	r2, [pc, #384]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	4b5e      	ldr	r3, [pc, #376]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a5d      	ldr	r2, [pc, #372]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6213      	str	r3, [r2, #32]
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x36e>
 80021b6:	4b5b      	ldr	r3, [pc, #364]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a5a      	ldr	r2, [pc, #360]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6213      	str	r3, [r2, #32]
 80021c2:	4b58      	ldr	r3, [pc, #352]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	4a57      	ldr	r2, [pc, #348]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d015      	beq.n	8002202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7ff fb3d 	bl	8001854 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7ff fb39 	bl	8001854 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0b1      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	4b4b      	ldr	r3, [pc, #300]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ee      	beq.n	80021de <HAL_RCC_OscConfig+0x37e>
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7ff fb27 	bl	8001854 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff fb23 	bl	8001854 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e09b      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	4b40      	ldr	r3, [pc, #256]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ee      	bne.n	800220a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a3b      	ldr	r2, [pc, #236]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8087 	beq.w	8002356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d061      	beq.n	8002318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d146      	bne.n	80022ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b33      	ldr	r3, [pc, #204]	; (800232c <HAL_RCC_OscConfig+0x4cc>)
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7ff faf7 	bl	8001854 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7ff faf3 	bl	8001854 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e06d      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227c:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d108      	bne.n	80022a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4921      	ldr	r1, [pc, #132]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a4:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a19      	ldr	r1, [r3, #32]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	430b      	orrs	r3, r1
 80022b6:	491b      	ldr	r1, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_RCC_OscConfig+0x4cc>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7ff fac7 	bl	8001854 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7ff fac3 	bl	8001854 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e03d      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x46a>
 80022e8:	e035      	b.n	8002356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_RCC_OscConfig+0x4cc>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff fab0 	bl	8001854 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7ff faac 	bl	8001854 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e026      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x498>
 8002316:	e01e      	b.n	8002356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e019      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
 8002324:	40021000 	.word	0x40021000
 8002328:	40007000 	.word	0x40007000
 800232c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x500>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	429a      	cmp	r2, r3
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0d0      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b6a      	ldr	r3, [pc, #424]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b67      	ldr	r3, [pc, #412]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4965      	ldr	r1, [pc, #404]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b63      	ldr	r3, [pc, #396]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0b8      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c0:	4b59      	ldr	r3, [pc, #356]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a58      	ldr	r2, [pc, #352]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d8:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a52      	ldr	r2, [pc, #328]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4b50      	ldr	r3, [pc, #320]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	494d      	ldr	r1, [pc, #308]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d040      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d115      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e07f      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e073      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06b      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b39      	ldr	r3, [pc, #228]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4936      	ldr	r1, [pc, #216]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7ff f9fe 	bl	8001854 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7ff f9fa 	bl	8001854 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e053      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d210      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	4922      	ldr	r1, [pc, #136]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e032      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4916      	ldr	r1, [pc, #88]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	490e      	ldr	r1, [pc, #56]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024f2:	f000 f821 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	490a      	ldr	r1, [pc, #40]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	5ccb      	ldrb	r3, [r1, r3]
 8002506:	fa22 f303 	lsr.w	r3, r2, r3
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1cc>)
 800250c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1d0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff f95c 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40022000 	.word	0x40022000
 8002528:	40021000 	.word	0x40021000
 800252c:	080040c0 	.word	0x080040c0
 8002530:	20000044 	.word	0x20000044
 8002534:	20000060 	.word	0x20000060

08002538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	b490      	push	{r4, r7}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800253e:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002540:	1d3c      	adds	r4, r7, #4
 8002542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002548:	f240 2301 	movw	r3, #513	; 0x201
 800254c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x40>
 8002572:	2b08      	cmp	r3, #8
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x46>
 8002576:	e02b      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800257a:	623b      	str	r3, [r7, #32]
      break;
 800257c:	e02b      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	0c9b      	lsrs	r3, r3, #18
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	3328      	adds	r3, #40	; 0x28
 8002588:	443b      	add	r3, r7
 800258a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800258e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d012      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0c5b      	lsrs	r3, r3, #17
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	3328      	adds	r3, #40	; 0x28
 80025a6:	443b      	add	r3, r7
 80025a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80025b2:	fb03 f202 	mul.w	r2, r3, r2
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	e004      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	623b      	str	r3, [r7, #32]
      break;
 80025ce:	e002      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80025d2:	623b      	str	r3, [r7, #32]
      break;
 80025d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d6:	6a3b      	ldr	r3, [r7, #32]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc90      	pop	{r4, r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	080040b0 	.word	0x080040b0
 80025e8:	40021000 	.word	0x40021000
 80025ec:	007a1200 	.word	0x007a1200
 80025f0:	003d0900 	.word	0x003d0900

080025f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f8:	4b02      	ldr	r3, [pc, #8]	; (8002604 <HAL_RCC_GetHCLKFreq+0x10>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	20000044 	.word	0x20000044

08002608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800260c:	f7ff fff2 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	; (800262c <HAL_RCC_GetPCLK1Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	080040d0 	.word	0x080040d0

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002634:	f7ff ffde 	bl	80025f4 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0adb      	lsrs	r3, r3, #11
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	080040d0 	.word	0x080040d0

08002658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <RCC_Delay+0x34>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <RCC_Delay+0x38>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0a5b      	lsrs	r3, r3, #9
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002674:	bf00      	nop
  }
  while (Delay --);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	60fa      	str	r2, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f9      	bne.n	8002674 <RCC_Delay+0x1c>
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	20000044 	.word	0x20000044
 8002690:	10624dd3 	.word	0x10624dd3

08002694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e041      	b.n	800272a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fe9e 	bl	80013fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f000 fb86 	bl	8002de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d001      	beq.n	800274c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e03a      	b.n	80027c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_TIM_Base_Start_IT+0x98>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00e      	beq.n	800278c <HAL_TIM_Base_Start_IT+0x58>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002776:	d009      	beq.n	800278c <HAL_TIM_Base_Start_IT+0x58>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_TIM_Base_Start_IT+0x58>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d111      	bne.n	80027b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b06      	cmp	r3, #6
 800279c:	d010      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ae:	e007      	b.n	80027c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800

080027d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e041      	b.n	800286e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f839 	bl	8002876 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f000 fae4 	bl	8002de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b02      	cmp	r3, #2
 800289c:	d122      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d11b      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0202 	mvn.w	r2, #2
 80028b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fa6f 	bl	8002dae <HAL_TIM_IC_CaptureCallback>
 80028d0:	e005      	b.n	80028de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa62 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fa71 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d122      	bne.n	8002938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d11b      	bne.n	8002938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0204 	mvn.w	r2, #4
 8002908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2202      	movs	r2, #2
 800290e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fa45 	bl	8002dae <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fa38 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fa47 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b08      	cmp	r3, #8
 8002944:	d122      	bne.n	800298c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b08      	cmp	r3, #8
 8002952:	d11b      	bne.n	800298c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0208 	mvn.w	r2, #8
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2204      	movs	r2, #4
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa1b 	bl	8002dae <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa0e 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fa1d 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b10      	cmp	r3, #16
 8002998:	d122      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d11b      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0210 	mvn.w	r2, #16
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2208      	movs	r2, #8
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f9f1 	bl	8002dae <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f9e4 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f9f3 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d10e      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d107      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0201 	mvn.w	r2, #1
 8002a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe f8e5 	bl	8000bd6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a16:	2b80      	cmp	r3, #128	; 0x80
 8002a18:	d10e      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b80      	cmp	r3, #128	; 0x80
 8002a26:	d107      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fcbd 	bl	80033b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a42:	2b40      	cmp	r3, #64	; 0x40
 8002a44:	d10e      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b40      	cmp	r3, #64	; 0x40
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f9b7 	bl	8002dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d107      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0220 	mvn.w	r2, #32
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fc88 	bl	80033a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e0ac      	b.n	8002c0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0c      	cmp	r3, #12
 8002abe:	f200 809f 	bhi.w	8002c00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ac2:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac8:	08002afd 	.word	0x08002afd
 8002acc:	08002c01 	.word	0x08002c01
 8002ad0:	08002c01 	.word	0x08002c01
 8002ad4:	08002c01 	.word	0x08002c01
 8002ad8:	08002b3d 	.word	0x08002b3d
 8002adc:	08002c01 	.word	0x08002c01
 8002ae0:	08002c01 	.word	0x08002c01
 8002ae4:	08002c01 	.word	0x08002c01
 8002ae8:	08002b7f 	.word	0x08002b7f
 8002aec:	08002c01 	.word	0x08002c01
 8002af0:	08002c01 	.word	0x08002c01
 8002af4:	08002c01 	.word	0x08002c01
 8002af8:	08002bbf 	.word	0x08002bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f9d0 	bl	8002ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6999      	ldr	r1, [r3, #24]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	619a      	str	r2, [r3, #24]
      break;
 8002b3a:	e062      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fa16 	bl	8002f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6999      	ldr	r1, [r3, #24]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	021a      	lsls	r2, r3, #8
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	619a      	str	r2, [r3, #24]
      break;
 8002b7c:	e041      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fa5f 	bl	8003048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0208 	orr.w	r2, r2, #8
 8002b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0204 	bic.w	r2, r2, #4
 8002ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69d9      	ldr	r1, [r3, #28]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
      break;
 8002bbc:	e021      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 faa9 	bl	800311c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69d9      	ldr	r1, [r3, #28]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	021a      	lsls	r2, r3, #8
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	61da      	str	r2, [r3, #28]
      break;
 8002bfe:	e000      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_TIM_ConfigClockSource+0x18>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e0b3      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x180>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c64:	d03e      	beq.n	8002ce4 <HAL_TIM_ConfigClockSource+0xd0>
 8002c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6a:	f200 8087 	bhi.w	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c72:	f000 8085 	beq.w	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7a:	d87f      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c7c:	2b70      	cmp	r3, #112	; 0x70
 8002c7e:	d01a      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0xa2>
 8002c80:	2b70      	cmp	r3, #112	; 0x70
 8002c82:	d87b      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c84:	2b60      	cmp	r3, #96	; 0x60
 8002c86:	d050      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x116>
 8002c88:	2b60      	cmp	r3, #96	; 0x60
 8002c8a:	d877      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c8c:	2b50      	cmp	r3, #80	; 0x50
 8002c8e:	d03c      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0xf6>
 8002c90:	2b50      	cmp	r3, #80	; 0x50
 8002c92:	d873      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d058      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0x136>
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d86f      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c9c:	2b30      	cmp	r3, #48	; 0x30
 8002c9e:	d064      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x156>
 8002ca0:	2b30      	cmp	r3, #48	; 0x30
 8002ca2:	d86b      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d060      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x156>
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d867      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d05c      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x156>
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d05a      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002cb4:	e062      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6899      	ldr	r1, [r3, #8]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f000 faee 	bl	80032a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	609a      	str	r2, [r3, #8]
      break;
 8002ce2:	e04e      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6899      	ldr	r1, [r3, #8]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f000 fad7 	bl	80032a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d06:	609a      	str	r2, [r3, #8]
      break;
 8002d08:	e03b      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	461a      	mov	r2, r3
 8002d18:	f000 fa4e 	bl	80031b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2150      	movs	r1, #80	; 0x50
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 faa5 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 8002d28:	e02b      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f000 fa6c 	bl	8003214 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2160      	movs	r1, #96	; 0x60
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fa95 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 8002d48:	e01b      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f000 fa2e 	bl	80031b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2140      	movs	r1, #64	; 0x40
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fa85 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 8002d68:	e00b      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4619      	mov	r1, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	f000 fa7c 	bl	8003272 <TIM_ITRx_SetConfig>
        break;
 8002d7a:	e002      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d7c:	bf00      	nop
 8002d7e:	e000      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <TIM_Base_SetConfig+0xb8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00b      	beq.n	8002e14 <TIM_Base_SetConfig+0x30>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e02:	d007      	beq.n	8002e14 <TIM_Base_SetConfig+0x30>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a26      	ldr	r2, [pc, #152]	; (8002ea0 <TIM_Base_SetConfig+0xbc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_Base_SetConfig+0x30>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a25      	ldr	r2, [pc, #148]	; (8002ea4 <TIM_Base_SetConfig+0xc0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d108      	bne.n	8002e26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <TIM_Base_SetConfig+0xb8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00b      	beq.n	8002e46 <TIM_Base_SetConfig+0x62>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e34:	d007      	beq.n	8002e46 <TIM_Base_SetConfig+0x62>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <TIM_Base_SetConfig+0xbc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d003      	beq.n	8002e46 <TIM_Base_SetConfig+0x62>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <TIM_Base_SetConfig+0xc0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d108      	bne.n	8002e58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <TIM_Base_SetConfig+0xb8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d103      	bne.n	8002e8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	615a      	str	r2, [r3, #20]
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800

08002ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0201 	bic.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f023 0302 	bic.w	r3, r3, #2
 8002ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <TIM_OC1_SetConfig+0xc8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10c      	bne.n	8002f1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0308 	bic.w	r3, r3, #8
 8002f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <TIM_OC1_SetConfig+0xc8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d111      	bne.n	8002f4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	621a      	str	r2, [r3, #32]
}
 8002f64:	bf00      	nop
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40012c00 	.word	0x40012c00

08002f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0210 	bic.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0320 	bic.w	r3, r3, #32
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <TIM_OC2_SetConfig+0xd0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10d      	bne.n	8002ff0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a14      	ldr	r2, [pc, #80]	; (8003044 <TIM_OC2_SetConfig+0xd0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d113      	bne.n	8003020 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	40012c00 	.word	0x40012c00

08003048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <TIM_OC3_SetConfig+0xd0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10d      	bne.n	80030c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <TIM_OC3_SetConfig+0xd0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d113      	bne.n	80030f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	621a      	str	r2, [r3, #32]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40012c00 	.word	0x40012c00

0800311c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800314a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	031b      	lsls	r3, r3, #12
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0f      	ldr	r2, [pc, #60]	; (80031b4 <TIM_OC4_SetConfig+0x98>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d109      	bne.n	8003190 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	621a      	str	r2, [r3, #32]
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40012c00 	.word	0x40012c00

080031b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f023 0201 	bic.w	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 030a 	bic.w	r3, r3, #10
 80031f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	621a      	str	r2, [r3, #32]
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f023 0210 	bic.w	r2, r3, #16
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800323e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	031b      	lsls	r3, r3, #12
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003250:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	621a      	str	r2, [r3, #32]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	f043 0307 	orr.w	r3, r3, #7
 8003294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b087      	sub	sp, #28
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	021a      	lsls	r2, r3, #8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	609a      	str	r2, [r3, #8]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e046      	b.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a16      	ldr	r2, [pc, #88]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003348:	d009      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a10      	ldr	r2, [pc, #64]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10c      	bne.n	8003378 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4313      	orrs	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800

080033a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e03f      	b.n	8003456 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fe f976 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f905 	bl	8003618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800341c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800342c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800343c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b08a      	sub	sp, #40	; 0x28
 8003462:	af02      	add	r7, sp, #8
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b20      	cmp	r3, #32
 800347c:	d17c      	bne.n	8003578 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_UART_Transmit+0x2c>
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e075      	b.n	800357a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_UART_Transmit+0x3e>
 8003498:	2302      	movs	r3, #2
 800349a:	e06e      	b.n	800357a <HAL_UART_Transmit+0x11c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2221      	movs	r2, #33	; 0x21
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034b2:	f7fe f9cf 	bl	8001854 <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034cc:	d108      	bne.n	80034e0 <HAL_UART_Transmit+0x82>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d104      	bne.n	80034e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	e003      	b.n	80034e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034f0:	e02a      	b.n	8003548 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2200      	movs	r2, #0
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f840 	bl	8003582 <UART_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e036      	b.n	800357a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003520:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	3302      	adds	r3, #2
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	e007      	b.n	800353a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	3301      	adds	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1cf      	bne.n	80034f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	2140      	movs	r1, #64	; 0x40
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f810 	bl	8003582 <UART_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e006      	b.n	800357a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003592:	e02c      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d028      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80035a2:	f7fe f957 	bl	8001854 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d21d      	bcs.n	80035ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e00f      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	429a      	cmp	r2, r3
 800360a:	d0c3      	beq.n	8003594 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003652:	f023 030c 	bic.w	r3, r3, #12
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	430b      	orrs	r3, r1
 800365e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2c      	ldr	r2, [pc, #176]	; (800372c <UART_SetConfig+0x114>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7fe ffd6 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	e002      	b.n	800368e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003688:	f7fe ffbe 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 800368c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009a      	lsls	r2, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	4a22      	ldr	r2, [pc, #136]	; (8003730 <UART_SetConfig+0x118>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	0119      	lsls	r1, r3, #4
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009a      	lsls	r2, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <UART_SetConfig+0x118>)
 80036c6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2064      	movs	r0, #100	; 0x64
 80036ce:	fb00 f303 	mul.w	r3, r0, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <UART_SetConfig+0x118>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	4419      	add	r1, r3
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009a      	lsls	r2, r3, #2
 80036f0:	441a      	add	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <UART_SetConfig+0x118>)
 80036fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2064      	movs	r0, #100	; 0x64
 8003706:	fb00 f303 	mul.w	r3, r0, r3
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	3332      	adds	r3, #50	; 0x32
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <UART_SetConfig+0x118>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	f003 020f 	and.w	r2, r3, #15
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	440a      	add	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40013800 	.word	0x40013800
 8003730:	51eb851f 	.word	0x51eb851f

08003734 <__errno>:
 8003734:	4b01      	ldr	r3, [pc, #4]	; (800373c <__errno+0x8>)
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000068 	.word	0x20000068

08003740 <__libc_init_array>:
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	2600      	movs	r6, #0
 8003744:	4d0c      	ldr	r5, [pc, #48]	; (8003778 <__libc_init_array+0x38>)
 8003746:	4c0d      	ldr	r4, [pc, #52]	; (800377c <__libc_init_array+0x3c>)
 8003748:	1b64      	subs	r4, r4, r5
 800374a:	10a4      	asrs	r4, r4, #2
 800374c:	42a6      	cmp	r6, r4
 800374e:	d109      	bne.n	8003764 <__libc_init_array+0x24>
 8003750:	f000 fc9c 	bl	800408c <_init>
 8003754:	2600      	movs	r6, #0
 8003756:	4d0a      	ldr	r5, [pc, #40]	; (8003780 <__libc_init_array+0x40>)
 8003758:	4c0a      	ldr	r4, [pc, #40]	; (8003784 <__libc_init_array+0x44>)
 800375a:	1b64      	subs	r4, r4, r5
 800375c:	10a4      	asrs	r4, r4, #2
 800375e:	42a6      	cmp	r6, r4
 8003760:	d105      	bne.n	800376e <__libc_init_array+0x2e>
 8003762:	bd70      	pop	{r4, r5, r6, pc}
 8003764:	f855 3b04 	ldr.w	r3, [r5], #4
 8003768:	4798      	blx	r3
 800376a:	3601      	adds	r6, #1
 800376c:	e7ee      	b.n	800374c <__libc_init_array+0xc>
 800376e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003772:	4798      	blx	r3
 8003774:	3601      	adds	r6, #1
 8003776:	e7f2      	b.n	800375e <__libc_init_array+0x1e>
 8003778:	0800410c 	.word	0x0800410c
 800377c:	0800410c 	.word	0x0800410c
 8003780:	0800410c 	.word	0x0800410c
 8003784:	08004110 	.word	0x08004110

08003788 <memset>:
 8003788:	4603      	mov	r3, r0
 800378a:	4402      	add	r2, r0
 800378c:	4293      	cmp	r3, r2
 800378e:	d100      	bne.n	8003792 <memset+0xa>
 8003790:	4770      	bx	lr
 8003792:	f803 1b01 	strb.w	r1, [r3], #1
 8003796:	e7f9      	b.n	800378c <memset+0x4>

08003798 <siprintf>:
 8003798:	b40e      	push	{r1, r2, r3}
 800379a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800379e:	b500      	push	{lr}
 80037a0:	b09c      	sub	sp, #112	; 0x70
 80037a2:	ab1d      	add	r3, sp, #116	; 0x74
 80037a4:	9002      	str	r0, [sp, #8]
 80037a6:	9006      	str	r0, [sp, #24]
 80037a8:	9107      	str	r1, [sp, #28]
 80037aa:	9104      	str	r1, [sp, #16]
 80037ac:	4808      	ldr	r0, [pc, #32]	; (80037d0 <siprintf+0x38>)
 80037ae:	4909      	ldr	r1, [pc, #36]	; (80037d4 <siprintf+0x3c>)
 80037b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b4:	9105      	str	r1, [sp, #20]
 80037b6:	6800      	ldr	r0, [r0, #0]
 80037b8:	a902      	add	r1, sp, #8
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	f000 f868 	bl	8003890 <_svfiprintf_r>
 80037c0:	2200      	movs	r2, #0
 80037c2:	9b02      	ldr	r3, [sp, #8]
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	b01c      	add	sp, #112	; 0x70
 80037c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037cc:	b003      	add	sp, #12
 80037ce:	4770      	bx	lr
 80037d0:	20000068 	.word	0x20000068
 80037d4:	ffff0208 	.word	0xffff0208

080037d8 <__ssputs_r>:
 80037d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037dc:	688e      	ldr	r6, [r1, #8]
 80037de:	4682      	mov	sl, r0
 80037e0:	429e      	cmp	r6, r3
 80037e2:	460c      	mov	r4, r1
 80037e4:	4690      	mov	r8, r2
 80037e6:	461f      	mov	r7, r3
 80037e8:	d838      	bhi.n	800385c <__ssputs_r+0x84>
 80037ea:	898a      	ldrh	r2, [r1, #12]
 80037ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037f0:	d032      	beq.n	8003858 <__ssputs_r+0x80>
 80037f2:	6825      	ldr	r5, [r4, #0]
 80037f4:	6909      	ldr	r1, [r1, #16]
 80037f6:	3301      	adds	r3, #1
 80037f8:	eba5 0901 	sub.w	r9, r5, r1
 80037fc:	6965      	ldr	r5, [r4, #20]
 80037fe:	444b      	add	r3, r9
 8003800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003808:	106d      	asrs	r5, r5, #1
 800380a:	429d      	cmp	r5, r3
 800380c:	bf38      	it	cc
 800380e:	461d      	movcc	r5, r3
 8003810:	0553      	lsls	r3, r2, #21
 8003812:	d531      	bpl.n	8003878 <__ssputs_r+0xa0>
 8003814:	4629      	mov	r1, r5
 8003816:	f000 fb6f 	bl	8003ef8 <_malloc_r>
 800381a:	4606      	mov	r6, r0
 800381c:	b950      	cbnz	r0, 8003834 <__ssputs_r+0x5c>
 800381e:	230c      	movs	r3, #12
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	f8ca 3000 	str.w	r3, [sl]
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800382e:	81a3      	strh	r3, [r4, #12]
 8003830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003834:	464a      	mov	r2, r9
 8003836:	6921      	ldr	r1, [r4, #16]
 8003838:	f000 face 	bl	8003dd8 <memcpy>
 800383c:	89a3      	ldrh	r3, [r4, #12]
 800383e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003846:	81a3      	strh	r3, [r4, #12]
 8003848:	6126      	str	r6, [r4, #16]
 800384a:	444e      	add	r6, r9
 800384c:	6026      	str	r6, [r4, #0]
 800384e:	463e      	mov	r6, r7
 8003850:	6165      	str	r5, [r4, #20]
 8003852:	eba5 0509 	sub.w	r5, r5, r9
 8003856:	60a5      	str	r5, [r4, #8]
 8003858:	42be      	cmp	r6, r7
 800385a:	d900      	bls.n	800385e <__ssputs_r+0x86>
 800385c:	463e      	mov	r6, r7
 800385e:	4632      	mov	r2, r6
 8003860:	4641      	mov	r1, r8
 8003862:	6820      	ldr	r0, [r4, #0]
 8003864:	f000 fac6 	bl	8003df4 <memmove>
 8003868:	68a3      	ldr	r3, [r4, #8]
 800386a:	2000      	movs	r0, #0
 800386c:	1b9b      	subs	r3, r3, r6
 800386e:	60a3      	str	r3, [r4, #8]
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	4433      	add	r3, r6
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	e7db      	b.n	8003830 <__ssputs_r+0x58>
 8003878:	462a      	mov	r2, r5
 800387a:	f000 fbb1 	bl	8003fe0 <_realloc_r>
 800387e:	4606      	mov	r6, r0
 8003880:	2800      	cmp	r0, #0
 8003882:	d1e1      	bne.n	8003848 <__ssputs_r+0x70>
 8003884:	4650      	mov	r0, sl
 8003886:	6921      	ldr	r1, [r4, #16]
 8003888:	f000 face 	bl	8003e28 <_free_r>
 800388c:	e7c7      	b.n	800381e <__ssputs_r+0x46>
	...

08003890 <_svfiprintf_r>:
 8003890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003894:	4698      	mov	r8, r3
 8003896:	898b      	ldrh	r3, [r1, #12]
 8003898:	4607      	mov	r7, r0
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	460d      	mov	r5, r1
 800389e:	4614      	mov	r4, r2
 80038a0:	b09d      	sub	sp, #116	; 0x74
 80038a2:	d50e      	bpl.n	80038c2 <_svfiprintf_r+0x32>
 80038a4:	690b      	ldr	r3, [r1, #16]
 80038a6:	b963      	cbnz	r3, 80038c2 <_svfiprintf_r+0x32>
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	f000 fb25 	bl	8003ef8 <_malloc_r>
 80038ae:	6028      	str	r0, [r5, #0]
 80038b0:	6128      	str	r0, [r5, #16]
 80038b2:	b920      	cbnz	r0, 80038be <_svfiprintf_r+0x2e>
 80038b4:	230c      	movs	r3, #12
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	e0d1      	b.n	8003a62 <_svfiprintf_r+0x1d2>
 80038be:	2340      	movs	r3, #64	; 0x40
 80038c0:	616b      	str	r3, [r5, #20]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9309      	str	r3, [sp, #36]	; 0x24
 80038c6:	2320      	movs	r3, #32
 80038c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038cc:	2330      	movs	r3, #48	; 0x30
 80038ce:	f04f 0901 	mov.w	r9, #1
 80038d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80038d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a7c <_svfiprintf_r+0x1ec>
 80038da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038de:	4623      	mov	r3, r4
 80038e0:	469a      	mov	sl, r3
 80038e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038e6:	b10a      	cbz	r2, 80038ec <_svfiprintf_r+0x5c>
 80038e8:	2a25      	cmp	r2, #37	; 0x25
 80038ea:	d1f9      	bne.n	80038e0 <_svfiprintf_r+0x50>
 80038ec:	ebba 0b04 	subs.w	fp, sl, r4
 80038f0:	d00b      	beq.n	800390a <_svfiprintf_r+0x7a>
 80038f2:	465b      	mov	r3, fp
 80038f4:	4622      	mov	r2, r4
 80038f6:	4629      	mov	r1, r5
 80038f8:	4638      	mov	r0, r7
 80038fa:	f7ff ff6d 	bl	80037d8 <__ssputs_r>
 80038fe:	3001      	adds	r0, #1
 8003900:	f000 80aa 	beq.w	8003a58 <_svfiprintf_r+0x1c8>
 8003904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003906:	445a      	add	r2, fp
 8003908:	9209      	str	r2, [sp, #36]	; 0x24
 800390a:	f89a 3000 	ldrb.w	r3, [sl]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80a2 	beq.w	8003a58 <_svfiprintf_r+0x1c8>
 8003914:	2300      	movs	r3, #0
 8003916:	f04f 32ff 	mov.w	r2, #4294967295
 800391a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800391e:	f10a 0a01 	add.w	sl, sl, #1
 8003922:	9304      	str	r3, [sp, #16]
 8003924:	9307      	str	r3, [sp, #28]
 8003926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800392a:	931a      	str	r3, [sp, #104]	; 0x68
 800392c:	4654      	mov	r4, sl
 800392e:	2205      	movs	r2, #5
 8003930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003934:	4851      	ldr	r0, [pc, #324]	; (8003a7c <_svfiprintf_r+0x1ec>)
 8003936:	f000 fa41 	bl	8003dbc <memchr>
 800393a:	9a04      	ldr	r2, [sp, #16]
 800393c:	b9d8      	cbnz	r0, 8003976 <_svfiprintf_r+0xe6>
 800393e:	06d0      	lsls	r0, r2, #27
 8003940:	bf44      	itt	mi
 8003942:	2320      	movmi	r3, #32
 8003944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003948:	0711      	lsls	r1, r2, #28
 800394a:	bf44      	itt	mi
 800394c:	232b      	movmi	r3, #43	; 0x2b
 800394e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003952:	f89a 3000 	ldrb.w	r3, [sl]
 8003956:	2b2a      	cmp	r3, #42	; 0x2a
 8003958:	d015      	beq.n	8003986 <_svfiprintf_r+0xf6>
 800395a:	4654      	mov	r4, sl
 800395c:	2000      	movs	r0, #0
 800395e:	f04f 0c0a 	mov.w	ip, #10
 8003962:	9a07      	ldr	r2, [sp, #28]
 8003964:	4621      	mov	r1, r4
 8003966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800396a:	3b30      	subs	r3, #48	; 0x30
 800396c:	2b09      	cmp	r3, #9
 800396e:	d94e      	bls.n	8003a0e <_svfiprintf_r+0x17e>
 8003970:	b1b0      	cbz	r0, 80039a0 <_svfiprintf_r+0x110>
 8003972:	9207      	str	r2, [sp, #28]
 8003974:	e014      	b.n	80039a0 <_svfiprintf_r+0x110>
 8003976:	eba0 0308 	sub.w	r3, r0, r8
 800397a:	fa09 f303 	lsl.w	r3, r9, r3
 800397e:	4313      	orrs	r3, r2
 8003980:	46a2      	mov	sl, r4
 8003982:	9304      	str	r3, [sp, #16]
 8003984:	e7d2      	b.n	800392c <_svfiprintf_r+0x9c>
 8003986:	9b03      	ldr	r3, [sp, #12]
 8003988:	1d19      	adds	r1, r3, #4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	9103      	str	r1, [sp, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	bfbb      	ittet	lt
 8003992:	425b      	neglt	r3, r3
 8003994:	f042 0202 	orrlt.w	r2, r2, #2
 8003998:	9307      	strge	r3, [sp, #28]
 800399a:	9307      	strlt	r3, [sp, #28]
 800399c:	bfb8      	it	lt
 800399e:	9204      	strlt	r2, [sp, #16]
 80039a0:	7823      	ldrb	r3, [r4, #0]
 80039a2:	2b2e      	cmp	r3, #46	; 0x2e
 80039a4:	d10c      	bne.n	80039c0 <_svfiprintf_r+0x130>
 80039a6:	7863      	ldrb	r3, [r4, #1]
 80039a8:	2b2a      	cmp	r3, #42	; 0x2a
 80039aa:	d135      	bne.n	8003a18 <_svfiprintf_r+0x188>
 80039ac:	9b03      	ldr	r3, [sp, #12]
 80039ae:	3402      	adds	r4, #2
 80039b0:	1d1a      	adds	r2, r3, #4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	9203      	str	r2, [sp, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bfb8      	it	lt
 80039ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80039be:	9305      	str	r3, [sp, #20]
 80039c0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003a80 <_svfiprintf_r+0x1f0>
 80039c4:	2203      	movs	r2, #3
 80039c6:	4650      	mov	r0, sl
 80039c8:	7821      	ldrb	r1, [r4, #0]
 80039ca:	f000 f9f7 	bl	8003dbc <memchr>
 80039ce:	b140      	cbz	r0, 80039e2 <_svfiprintf_r+0x152>
 80039d0:	2340      	movs	r3, #64	; 0x40
 80039d2:	eba0 000a 	sub.w	r0, r0, sl
 80039d6:	fa03 f000 	lsl.w	r0, r3, r0
 80039da:	9b04      	ldr	r3, [sp, #16]
 80039dc:	3401      	adds	r4, #1
 80039de:	4303      	orrs	r3, r0
 80039e0:	9304      	str	r3, [sp, #16]
 80039e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039e6:	2206      	movs	r2, #6
 80039e8:	4826      	ldr	r0, [pc, #152]	; (8003a84 <_svfiprintf_r+0x1f4>)
 80039ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039ee:	f000 f9e5 	bl	8003dbc <memchr>
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d038      	beq.n	8003a68 <_svfiprintf_r+0x1d8>
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <_svfiprintf_r+0x1f8>)
 80039f8:	bb1b      	cbnz	r3, 8003a42 <_svfiprintf_r+0x1b2>
 80039fa:	9b03      	ldr	r3, [sp, #12]
 80039fc:	3307      	adds	r3, #7
 80039fe:	f023 0307 	bic.w	r3, r3, #7
 8003a02:	3308      	adds	r3, #8
 8003a04:	9303      	str	r3, [sp, #12]
 8003a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a08:	4433      	add	r3, r6
 8003a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a0c:	e767      	b.n	80038de <_svfiprintf_r+0x4e>
 8003a0e:	460c      	mov	r4, r1
 8003a10:	2001      	movs	r0, #1
 8003a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a16:	e7a5      	b.n	8003964 <_svfiprintf_r+0xd4>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f04f 0c0a 	mov.w	ip, #10
 8003a1e:	4619      	mov	r1, r3
 8003a20:	3401      	adds	r4, #1
 8003a22:	9305      	str	r3, [sp, #20]
 8003a24:	4620      	mov	r0, r4
 8003a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a2a:	3a30      	subs	r2, #48	; 0x30
 8003a2c:	2a09      	cmp	r2, #9
 8003a2e:	d903      	bls.n	8003a38 <_svfiprintf_r+0x1a8>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0c5      	beq.n	80039c0 <_svfiprintf_r+0x130>
 8003a34:	9105      	str	r1, [sp, #20]
 8003a36:	e7c3      	b.n	80039c0 <_svfiprintf_r+0x130>
 8003a38:	4604      	mov	r4, r0
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a40:	e7f0      	b.n	8003a24 <_svfiprintf_r+0x194>
 8003a42:	ab03      	add	r3, sp, #12
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	462a      	mov	r2, r5
 8003a48:	4638      	mov	r0, r7
 8003a4a:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <_svfiprintf_r+0x1fc>)
 8003a4c:	a904      	add	r1, sp, #16
 8003a4e:	f3af 8000 	nop.w
 8003a52:	1c42      	adds	r2, r0, #1
 8003a54:	4606      	mov	r6, r0
 8003a56:	d1d6      	bne.n	8003a06 <_svfiprintf_r+0x176>
 8003a58:	89ab      	ldrh	r3, [r5, #12]
 8003a5a:	065b      	lsls	r3, r3, #25
 8003a5c:	f53f af2c 	bmi.w	80038b8 <_svfiprintf_r+0x28>
 8003a60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a62:	b01d      	add	sp, #116	; 0x74
 8003a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a68:	ab03      	add	r3, sp, #12
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	462a      	mov	r2, r5
 8003a6e:	4638      	mov	r0, r7
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <_svfiprintf_r+0x1fc>)
 8003a72:	a904      	add	r1, sp, #16
 8003a74:	f000 f87c 	bl	8003b70 <_printf_i>
 8003a78:	e7eb      	b.n	8003a52 <_svfiprintf_r+0x1c2>
 8003a7a:	bf00      	nop
 8003a7c:	080040d8 	.word	0x080040d8
 8003a80:	080040de 	.word	0x080040de
 8003a84:	080040e2 	.word	0x080040e2
 8003a88:	00000000 	.word	0x00000000
 8003a8c:	080037d9 	.word	0x080037d9

08003a90 <_printf_common>:
 8003a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a94:	4616      	mov	r6, r2
 8003a96:	4699      	mov	r9, r3
 8003a98:	688a      	ldr	r2, [r1, #8]
 8003a9a:	690b      	ldr	r3, [r1, #16]
 8003a9c:	4607      	mov	r7, r0
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	bfb8      	it	lt
 8003aa2:	4613      	movlt	r3, r2
 8003aa4:	6033      	str	r3, [r6, #0]
 8003aa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aaa:	460c      	mov	r4, r1
 8003aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ab0:	b10a      	cbz	r2, 8003ab6 <_printf_common+0x26>
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	6033      	str	r3, [r6, #0]
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	0699      	lsls	r1, r3, #26
 8003aba:	bf42      	ittt	mi
 8003abc:	6833      	ldrmi	r3, [r6, #0]
 8003abe:	3302      	addmi	r3, #2
 8003ac0:	6033      	strmi	r3, [r6, #0]
 8003ac2:	6825      	ldr	r5, [r4, #0]
 8003ac4:	f015 0506 	ands.w	r5, r5, #6
 8003ac8:	d106      	bne.n	8003ad8 <_printf_common+0x48>
 8003aca:	f104 0a19 	add.w	sl, r4, #25
 8003ace:	68e3      	ldr	r3, [r4, #12]
 8003ad0:	6832      	ldr	r2, [r6, #0]
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	42ab      	cmp	r3, r5
 8003ad6:	dc28      	bgt.n	8003b2a <_printf_common+0x9a>
 8003ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003adc:	1e13      	subs	r3, r2, #0
 8003ade:	6822      	ldr	r2, [r4, #0]
 8003ae0:	bf18      	it	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	0692      	lsls	r2, r2, #26
 8003ae6:	d42d      	bmi.n	8003b44 <_printf_common+0xb4>
 8003ae8:	4649      	mov	r1, r9
 8003aea:	4638      	mov	r0, r7
 8003aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003af0:	47c0      	blx	r8
 8003af2:	3001      	adds	r0, #1
 8003af4:	d020      	beq.n	8003b38 <_printf_common+0xa8>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	68e5      	ldr	r5, [r4, #12]
 8003afa:	f003 0306 	and.w	r3, r3, #6
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	bf18      	it	ne
 8003b02:	2500      	movne	r5, #0
 8003b04:	6832      	ldr	r2, [r6, #0]
 8003b06:	f04f 0600 	mov.w	r6, #0
 8003b0a:	68a3      	ldr	r3, [r4, #8]
 8003b0c:	bf08      	it	eq
 8003b0e:	1aad      	subeq	r5, r5, r2
 8003b10:	6922      	ldr	r2, [r4, #16]
 8003b12:	bf08      	it	eq
 8003b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bfc4      	itt	gt
 8003b1c:	1a9b      	subgt	r3, r3, r2
 8003b1e:	18ed      	addgt	r5, r5, r3
 8003b20:	341a      	adds	r4, #26
 8003b22:	42b5      	cmp	r5, r6
 8003b24:	d11a      	bne.n	8003b5c <_printf_common+0xcc>
 8003b26:	2000      	movs	r0, #0
 8003b28:	e008      	b.n	8003b3c <_printf_common+0xac>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	4652      	mov	r2, sl
 8003b2e:	4649      	mov	r1, r9
 8003b30:	4638      	mov	r0, r7
 8003b32:	47c0      	blx	r8
 8003b34:	3001      	adds	r0, #1
 8003b36:	d103      	bne.n	8003b40 <_printf_common+0xb0>
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b40:	3501      	adds	r5, #1
 8003b42:	e7c4      	b.n	8003ace <_printf_common+0x3e>
 8003b44:	2030      	movs	r0, #48	; 0x30
 8003b46:	18e1      	adds	r1, r4, r3
 8003b48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b52:	4422      	add	r2, r4
 8003b54:	3302      	adds	r3, #2
 8003b56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b5a:	e7c5      	b.n	8003ae8 <_printf_common+0x58>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	4622      	mov	r2, r4
 8003b60:	4649      	mov	r1, r9
 8003b62:	4638      	mov	r0, r7
 8003b64:	47c0      	blx	r8
 8003b66:	3001      	adds	r0, #1
 8003b68:	d0e6      	beq.n	8003b38 <_printf_common+0xa8>
 8003b6a:	3601      	adds	r6, #1
 8003b6c:	e7d9      	b.n	8003b22 <_printf_common+0x92>
	...

08003b70 <_printf_i>:
 8003b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	7e0f      	ldrb	r7, [r1, #24]
 8003b76:	4691      	mov	r9, r2
 8003b78:	2f78      	cmp	r7, #120	; 0x78
 8003b7a:	4680      	mov	r8, r0
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	469a      	mov	sl, r3
 8003b80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b86:	d807      	bhi.n	8003b98 <_printf_i+0x28>
 8003b88:	2f62      	cmp	r7, #98	; 0x62
 8003b8a:	d80a      	bhi.n	8003ba2 <_printf_i+0x32>
 8003b8c:	2f00      	cmp	r7, #0
 8003b8e:	f000 80d9 	beq.w	8003d44 <_printf_i+0x1d4>
 8003b92:	2f58      	cmp	r7, #88	; 0x58
 8003b94:	f000 80a4 	beq.w	8003ce0 <_printf_i+0x170>
 8003b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ba0:	e03a      	b.n	8003c18 <_printf_i+0xa8>
 8003ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ba6:	2b15      	cmp	r3, #21
 8003ba8:	d8f6      	bhi.n	8003b98 <_printf_i+0x28>
 8003baa:	a101      	add	r1, pc, #4	; (adr r1, 8003bb0 <_printf_i+0x40>)
 8003bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bb0:	08003c09 	.word	0x08003c09
 8003bb4:	08003c1d 	.word	0x08003c1d
 8003bb8:	08003b99 	.word	0x08003b99
 8003bbc:	08003b99 	.word	0x08003b99
 8003bc0:	08003b99 	.word	0x08003b99
 8003bc4:	08003b99 	.word	0x08003b99
 8003bc8:	08003c1d 	.word	0x08003c1d
 8003bcc:	08003b99 	.word	0x08003b99
 8003bd0:	08003b99 	.word	0x08003b99
 8003bd4:	08003b99 	.word	0x08003b99
 8003bd8:	08003b99 	.word	0x08003b99
 8003bdc:	08003d2b 	.word	0x08003d2b
 8003be0:	08003c4d 	.word	0x08003c4d
 8003be4:	08003d0d 	.word	0x08003d0d
 8003be8:	08003b99 	.word	0x08003b99
 8003bec:	08003b99 	.word	0x08003b99
 8003bf0:	08003d4d 	.word	0x08003d4d
 8003bf4:	08003b99 	.word	0x08003b99
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003b99 	.word	0x08003b99
 8003c00:	08003b99 	.word	0x08003b99
 8003c04:	08003d15 	.word	0x08003d15
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	1d1a      	adds	r2, r3, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	602a      	str	r2, [r5, #0]
 8003c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0a4      	b.n	8003d66 <_printf_i+0x1f6>
 8003c1c:	6820      	ldr	r0, [r4, #0]
 8003c1e:	6829      	ldr	r1, [r5, #0]
 8003c20:	0606      	lsls	r6, r0, #24
 8003c22:	f101 0304 	add.w	r3, r1, #4
 8003c26:	d50a      	bpl.n	8003c3e <_printf_i+0xce>
 8003c28:	680e      	ldr	r6, [r1, #0]
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	2e00      	cmp	r6, #0
 8003c2e:	da03      	bge.n	8003c38 <_printf_i+0xc8>
 8003c30:	232d      	movs	r3, #45	; 0x2d
 8003c32:	4276      	negs	r6, r6
 8003c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c38:	230a      	movs	r3, #10
 8003c3a:	485e      	ldr	r0, [pc, #376]	; (8003db4 <_printf_i+0x244>)
 8003c3c:	e019      	b.n	8003c72 <_printf_i+0x102>
 8003c3e:	680e      	ldr	r6, [r1, #0]
 8003c40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c44:	602b      	str	r3, [r5, #0]
 8003c46:	bf18      	it	ne
 8003c48:	b236      	sxthne	r6, r6
 8003c4a:	e7ef      	b.n	8003c2c <_printf_i+0xbc>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	1d19      	adds	r1, r3, #4
 8003c52:	6029      	str	r1, [r5, #0]
 8003c54:	0601      	lsls	r1, r0, #24
 8003c56:	d501      	bpl.n	8003c5c <_printf_i+0xec>
 8003c58:	681e      	ldr	r6, [r3, #0]
 8003c5a:	e002      	b.n	8003c62 <_printf_i+0xf2>
 8003c5c:	0646      	lsls	r6, r0, #25
 8003c5e:	d5fb      	bpl.n	8003c58 <_printf_i+0xe8>
 8003c60:	881e      	ldrh	r6, [r3, #0]
 8003c62:	2f6f      	cmp	r7, #111	; 0x6f
 8003c64:	bf0c      	ite	eq
 8003c66:	2308      	moveq	r3, #8
 8003c68:	230a      	movne	r3, #10
 8003c6a:	4852      	ldr	r0, [pc, #328]	; (8003db4 <_printf_i+0x244>)
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c72:	6865      	ldr	r5, [r4, #4]
 8003c74:	2d00      	cmp	r5, #0
 8003c76:	bfa8      	it	ge
 8003c78:	6821      	ldrge	r1, [r4, #0]
 8003c7a:	60a5      	str	r5, [r4, #8]
 8003c7c:	bfa4      	itt	ge
 8003c7e:	f021 0104 	bicge.w	r1, r1, #4
 8003c82:	6021      	strge	r1, [r4, #0]
 8003c84:	b90e      	cbnz	r6, 8003c8a <_printf_i+0x11a>
 8003c86:	2d00      	cmp	r5, #0
 8003c88:	d04d      	beq.n	8003d26 <_printf_i+0x1b6>
 8003c8a:	4615      	mov	r5, r2
 8003c8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c90:	fb03 6711 	mls	r7, r3, r1, r6
 8003c94:	5dc7      	ldrb	r7, [r0, r7]
 8003c96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c9a:	4637      	mov	r7, r6
 8003c9c:	42bb      	cmp	r3, r7
 8003c9e:	460e      	mov	r6, r1
 8003ca0:	d9f4      	bls.n	8003c8c <_printf_i+0x11c>
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d10b      	bne.n	8003cbe <_printf_i+0x14e>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	07de      	lsls	r6, r3, #31
 8003caa:	d508      	bpl.n	8003cbe <_printf_i+0x14e>
 8003cac:	6923      	ldr	r3, [r4, #16]
 8003cae:	6861      	ldr	r1, [r4, #4]
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	bfde      	ittt	le
 8003cb4:	2330      	movle	r3, #48	; 0x30
 8003cb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cbe:	1b52      	subs	r2, r2, r5
 8003cc0:	6122      	str	r2, [r4, #16]
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	4640      	mov	r0, r8
 8003cc8:	f8cd a000 	str.w	sl, [sp]
 8003ccc:	aa03      	add	r2, sp, #12
 8003cce:	f7ff fedf 	bl	8003a90 <_printf_common>
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	d14c      	bne.n	8003d70 <_printf_i+0x200>
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cda:	b004      	add	sp, #16
 8003cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce0:	4834      	ldr	r0, [pc, #208]	; (8003db4 <_printf_i+0x244>)
 8003ce2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ce6:	6829      	ldr	r1, [r5, #0]
 8003ce8:	6823      	ldr	r3, [r4, #0]
 8003cea:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cee:	6029      	str	r1, [r5, #0]
 8003cf0:	061d      	lsls	r5, r3, #24
 8003cf2:	d514      	bpl.n	8003d1e <_printf_i+0x1ae>
 8003cf4:	07df      	lsls	r7, r3, #31
 8003cf6:	bf44      	itt	mi
 8003cf8:	f043 0320 	orrmi.w	r3, r3, #32
 8003cfc:	6023      	strmi	r3, [r4, #0]
 8003cfe:	b91e      	cbnz	r6, 8003d08 <_printf_i+0x198>
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	f023 0320 	bic.w	r3, r3, #32
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	2310      	movs	r3, #16
 8003d0a:	e7af      	b.n	8003c6c <_printf_i+0xfc>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	f043 0320 	orr.w	r3, r3, #32
 8003d12:	6023      	str	r3, [r4, #0]
 8003d14:	2378      	movs	r3, #120	; 0x78
 8003d16:	4828      	ldr	r0, [pc, #160]	; (8003db8 <_printf_i+0x248>)
 8003d18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d1c:	e7e3      	b.n	8003ce6 <_printf_i+0x176>
 8003d1e:	0659      	lsls	r1, r3, #25
 8003d20:	bf48      	it	mi
 8003d22:	b2b6      	uxthmi	r6, r6
 8003d24:	e7e6      	b.n	8003cf4 <_printf_i+0x184>
 8003d26:	4615      	mov	r5, r2
 8003d28:	e7bb      	b.n	8003ca2 <_printf_i+0x132>
 8003d2a:	682b      	ldr	r3, [r5, #0]
 8003d2c:	6826      	ldr	r6, [r4, #0]
 8003d2e:	1d18      	adds	r0, r3, #4
 8003d30:	6961      	ldr	r1, [r4, #20]
 8003d32:	6028      	str	r0, [r5, #0]
 8003d34:	0635      	lsls	r5, r6, #24
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	d501      	bpl.n	8003d3e <_printf_i+0x1ce>
 8003d3a:	6019      	str	r1, [r3, #0]
 8003d3c:	e002      	b.n	8003d44 <_printf_i+0x1d4>
 8003d3e:	0670      	lsls	r0, r6, #25
 8003d40:	d5fb      	bpl.n	8003d3a <_printf_i+0x1ca>
 8003d42:	8019      	strh	r1, [r3, #0]
 8003d44:	2300      	movs	r3, #0
 8003d46:	4615      	mov	r5, r2
 8003d48:	6123      	str	r3, [r4, #16]
 8003d4a:	e7ba      	b.n	8003cc2 <_printf_i+0x152>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	2100      	movs	r1, #0
 8003d50:	1d1a      	adds	r2, r3, #4
 8003d52:	602a      	str	r2, [r5, #0]
 8003d54:	681d      	ldr	r5, [r3, #0]
 8003d56:	6862      	ldr	r2, [r4, #4]
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f000 f82f 	bl	8003dbc <memchr>
 8003d5e:	b108      	cbz	r0, 8003d64 <_printf_i+0x1f4>
 8003d60:	1b40      	subs	r0, r0, r5
 8003d62:	6060      	str	r0, [r4, #4]
 8003d64:	6863      	ldr	r3, [r4, #4]
 8003d66:	6123      	str	r3, [r4, #16]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d6e:	e7a8      	b.n	8003cc2 <_printf_i+0x152>
 8003d70:	462a      	mov	r2, r5
 8003d72:	4649      	mov	r1, r9
 8003d74:	4640      	mov	r0, r8
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	47d0      	blx	sl
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	d0ab      	beq.n	8003cd6 <_printf_i+0x166>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	079b      	lsls	r3, r3, #30
 8003d82:	d413      	bmi.n	8003dac <_printf_i+0x23c>
 8003d84:	68e0      	ldr	r0, [r4, #12]
 8003d86:	9b03      	ldr	r3, [sp, #12]
 8003d88:	4298      	cmp	r0, r3
 8003d8a:	bfb8      	it	lt
 8003d8c:	4618      	movlt	r0, r3
 8003d8e:	e7a4      	b.n	8003cda <_printf_i+0x16a>
 8003d90:	2301      	movs	r3, #1
 8003d92:	4632      	mov	r2, r6
 8003d94:	4649      	mov	r1, r9
 8003d96:	4640      	mov	r0, r8
 8003d98:	47d0      	blx	sl
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	d09b      	beq.n	8003cd6 <_printf_i+0x166>
 8003d9e:	3501      	adds	r5, #1
 8003da0:	68e3      	ldr	r3, [r4, #12]
 8003da2:	9903      	ldr	r1, [sp, #12]
 8003da4:	1a5b      	subs	r3, r3, r1
 8003da6:	42ab      	cmp	r3, r5
 8003da8:	dcf2      	bgt.n	8003d90 <_printf_i+0x220>
 8003daa:	e7eb      	b.n	8003d84 <_printf_i+0x214>
 8003dac:	2500      	movs	r5, #0
 8003dae:	f104 0619 	add.w	r6, r4, #25
 8003db2:	e7f5      	b.n	8003da0 <_printf_i+0x230>
 8003db4:	080040e9 	.word	0x080040e9
 8003db8:	080040fa 	.word	0x080040fa

08003dbc <memchr>:
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	b2c9      	uxtb	r1, r1
 8003dc2:	4402      	add	r2, r0
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	d101      	bne.n	8003dce <memchr+0x12>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	e003      	b.n	8003dd6 <memchr+0x1a>
 8003dce:	7804      	ldrb	r4, [r0, #0]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	428c      	cmp	r4, r1
 8003dd4:	d1f6      	bne.n	8003dc4 <memchr+0x8>
 8003dd6:	bd10      	pop	{r4, pc}

08003dd8 <memcpy>:
 8003dd8:	440a      	add	r2, r1
 8003dda:	4291      	cmp	r1, r2
 8003ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003de0:	d100      	bne.n	8003de4 <memcpy+0xc>
 8003de2:	4770      	bx	lr
 8003de4:	b510      	push	{r4, lr}
 8003de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dea:	4291      	cmp	r1, r2
 8003dec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003df0:	d1f9      	bne.n	8003de6 <memcpy+0xe>
 8003df2:	bd10      	pop	{r4, pc}

08003df4 <memmove>:
 8003df4:	4288      	cmp	r0, r1
 8003df6:	b510      	push	{r4, lr}
 8003df8:	eb01 0402 	add.w	r4, r1, r2
 8003dfc:	d902      	bls.n	8003e04 <memmove+0x10>
 8003dfe:	4284      	cmp	r4, r0
 8003e00:	4623      	mov	r3, r4
 8003e02:	d807      	bhi.n	8003e14 <memmove+0x20>
 8003e04:	1e43      	subs	r3, r0, #1
 8003e06:	42a1      	cmp	r1, r4
 8003e08:	d008      	beq.n	8003e1c <memmove+0x28>
 8003e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e12:	e7f8      	b.n	8003e06 <memmove+0x12>
 8003e14:	4601      	mov	r1, r0
 8003e16:	4402      	add	r2, r0
 8003e18:	428a      	cmp	r2, r1
 8003e1a:	d100      	bne.n	8003e1e <memmove+0x2a>
 8003e1c:	bd10      	pop	{r4, pc}
 8003e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e26:	e7f7      	b.n	8003e18 <memmove+0x24>

08003e28 <_free_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4605      	mov	r5, r0
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	d040      	beq.n	8003eb2 <_free_r+0x8a>
 8003e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e34:	1f0c      	subs	r4, r1, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bfb8      	it	lt
 8003e3a:	18e4      	addlt	r4, r4, r3
 8003e3c:	f000 f910 	bl	8004060 <__malloc_lock>
 8003e40:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <_free_r+0x8c>)
 8003e42:	6813      	ldr	r3, [r2, #0]
 8003e44:	b933      	cbnz	r3, 8003e54 <_free_r+0x2c>
 8003e46:	6063      	str	r3, [r4, #4]
 8003e48:	6014      	str	r4, [r2, #0]
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e50:	f000 b90c 	b.w	800406c <__malloc_unlock>
 8003e54:	42a3      	cmp	r3, r4
 8003e56:	d908      	bls.n	8003e6a <_free_r+0x42>
 8003e58:	6820      	ldr	r0, [r4, #0]
 8003e5a:	1821      	adds	r1, r4, r0
 8003e5c:	428b      	cmp	r3, r1
 8003e5e:	bf01      	itttt	eq
 8003e60:	6819      	ldreq	r1, [r3, #0]
 8003e62:	685b      	ldreq	r3, [r3, #4]
 8003e64:	1809      	addeq	r1, r1, r0
 8003e66:	6021      	streq	r1, [r4, #0]
 8003e68:	e7ed      	b.n	8003e46 <_free_r+0x1e>
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	b10b      	cbz	r3, 8003e74 <_free_r+0x4c>
 8003e70:	42a3      	cmp	r3, r4
 8003e72:	d9fa      	bls.n	8003e6a <_free_r+0x42>
 8003e74:	6811      	ldr	r1, [r2, #0]
 8003e76:	1850      	adds	r0, r2, r1
 8003e78:	42a0      	cmp	r0, r4
 8003e7a:	d10b      	bne.n	8003e94 <_free_r+0x6c>
 8003e7c:	6820      	ldr	r0, [r4, #0]
 8003e7e:	4401      	add	r1, r0
 8003e80:	1850      	adds	r0, r2, r1
 8003e82:	4283      	cmp	r3, r0
 8003e84:	6011      	str	r1, [r2, #0]
 8003e86:	d1e0      	bne.n	8003e4a <_free_r+0x22>
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4401      	add	r1, r0
 8003e8e:	6011      	str	r1, [r2, #0]
 8003e90:	6053      	str	r3, [r2, #4]
 8003e92:	e7da      	b.n	8003e4a <_free_r+0x22>
 8003e94:	d902      	bls.n	8003e9c <_free_r+0x74>
 8003e96:	230c      	movs	r3, #12
 8003e98:	602b      	str	r3, [r5, #0]
 8003e9a:	e7d6      	b.n	8003e4a <_free_r+0x22>
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	1821      	adds	r1, r4, r0
 8003ea0:	428b      	cmp	r3, r1
 8003ea2:	bf01      	itttt	eq
 8003ea4:	6819      	ldreq	r1, [r3, #0]
 8003ea6:	685b      	ldreq	r3, [r3, #4]
 8003ea8:	1809      	addeq	r1, r1, r0
 8003eaa:	6021      	streq	r1, [r4, #0]
 8003eac:	6063      	str	r3, [r4, #4]
 8003eae:	6054      	str	r4, [r2, #4]
 8003eb0:	e7cb      	b.n	8003e4a <_free_r+0x22>
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	200004e0 	.word	0x200004e0

08003eb8 <sbrk_aligned>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	4e0e      	ldr	r6, [pc, #56]	; (8003ef4 <sbrk_aligned+0x3c>)
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	6831      	ldr	r1, [r6, #0]
 8003ec0:	4605      	mov	r5, r0
 8003ec2:	b911      	cbnz	r1, 8003eca <sbrk_aligned+0x12>
 8003ec4:	f000 f8bc 	bl	8004040 <_sbrk_r>
 8003ec8:	6030      	str	r0, [r6, #0]
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 f8b7 	bl	8004040 <_sbrk_r>
 8003ed2:	1c43      	adds	r3, r0, #1
 8003ed4:	d00a      	beq.n	8003eec <sbrk_aligned+0x34>
 8003ed6:	1cc4      	adds	r4, r0, #3
 8003ed8:	f024 0403 	bic.w	r4, r4, #3
 8003edc:	42a0      	cmp	r0, r4
 8003ede:	d007      	beq.n	8003ef0 <sbrk_aligned+0x38>
 8003ee0:	1a21      	subs	r1, r4, r0
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 f8ac 	bl	8004040 <_sbrk_r>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d101      	bne.n	8003ef0 <sbrk_aligned+0x38>
 8003eec:	f04f 34ff 	mov.w	r4, #4294967295
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	200004e4 	.word	0x200004e4

08003ef8 <_malloc_r>:
 8003ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efc:	1ccd      	adds	r5, r1, #3
 8003efe:	f025 0503 	bic.w	r5, r5, #3
 8003f02:	3508      	adds	r5, #8
 8003f04:	2d0c      	cmp	r5, #12
 8003f06:	bf38      	it	cc
 8003f08:	250c      	movcc	r5, #12
 8003f0a:	2d00      	cmp	r5, #0
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	db01      	blt.n	8003f14 <_malloc_r+0x1c>
 8003f10:	42a9      	cmp	r1, r5
 8003f12:	d905      	bls.n	8003f20 <_malloc_r+0x28>
 8003f14:	230c      	movs	r3, #12
 8003f16:	2600      	movs	r6, #0
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f20:	4e2e      	ldr	r6, [pc, #184]	; (8003fdc <_malloc_r+0xe4>)
 8003f22:	f000 f89d 	bl	8004060 <__malloc_lock>
 8003f26:	6833      	ldr	r3, [r6, #0]
 8003f28:	461c      	mov	r4, r3
 8003f2a:	bb34      	cbnz	r4, 8003f7a <_malloc_r+0x82>
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4638      	mov	r0, r7
 8003f30:	f7ff ffc2 	bl	8003eb8 <sbrk_aligned>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	4604      	mov	r4, r0
 8003f38:	d14d      	bne.n	8003fd6 <_malloc_r+0xde>
 8003f3a:	6834      	ldr	r4, [r6, #0]
 8003f3c:	4626      	mov	r6, r4
 8003f3e:	2e00      	cmp	r6, #0
 8003f40:	d140      	bne.n	8003fc4 <_malloc_r+0xcc>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	4631      	mov	r1, r6
 8003f46:	4638      	mov	r0, r7
 8003f48:	eb04 0803 	add.w	r8, r4, r3
 8003f4c:	f000 f878 	bl	8004040 <_sbrk_r>
 8003f50:	4580      	cmp	r8, r0
 8003f52:	d13a      	bne.n	8003fca <_malloc_r+0xd2>
 8003f54:	6821      	ldr	r1, [r4, #0]
 8003f56:	3503      	adds	r5, #3
 8003f58:	1a6d      	subs	r5, r5, r1
 8003f5a:	f025 0503 	bic.w	r5, r5, #3
 8003f5e:	3508      	adds	r5, #8
 8003f60:	2d0c      	cmp	r5, #12
 8003f62:	bf38      	it	cc
 8003f64:	250c      	movcc	r5, #12
 8003f66:	4638      	mov	r0, r7
 8003f68:	4629      	mov	r1, r5
 8003f6a:	f7ff ffa5 	bl	8003eb8 <sbrk_aligned>
 8003f6e:	3001      	adds	r0, #1
 8003f70:	d02b      	beq.n	8003fca <_malloc_r+0xd2>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	442b      	add	r3, r5
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	e00e      	b.n	8003f98 <_malloc_r+0xa0>
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	1b52      	subs	r2, r2, r5
 8003f7e:	d41e      	bmi.n	8003fbe <_malloc_r+0xc6>
 8003f80:	2a0b      	cmp	r2, #11
 8003f82:	d916      	bls.n	8003fb2 <_malloc_r+0xba>
 8003f84:	1961      	adds	r1, r4, r5
 8003f86:	42a3      	cmp	r3, r4
 8003f88:	6025      	str	r5, [r4, #0]
 8003f8a:	bf18      	it	ne
 8003f8c:	6059      	strne	r1, [r3, #4]
 8003f8e:	6863      	ldr	r3, [r4, #4]
 8003f90:	bf08      	it	eq
 8003f92:	6031      	streq	r1, [r6, #0]
 8003f94:	5162      	str	r2, [r4, r5]
 8003f96:	604b      	str	r3, [r1, #4]
 8003f98:	4638      	mov	r0, r7
 8003f9a:	f104 060b 	add.w	r6, r4, #11
 8003f9e:	f000 f865 	bl	800406c <__malloc_unlock>
 8003fa2:	f026 0607 	bic.w	r6, r6, #7
 8003fa6:	1d23      	adds	r3, r4, #4
 8003fa8:	1af2      	subs	r2, r6, r3
 8003faa:	d0b6      	beq.n	8003f1a <_malloc_r+0x22>
 8003fac:	1b9b      	subs	r3, r3, r6
 8003fae:	50a3      	str	r3, [r4, r2]
 8003fb0:	e7b3      	b.n	8003f1a <_malloc_r+0x22>
 8003fb2:	6862      	ldr	r2, [r4, #4]
 8003fb4:	42a3      	cmp	r3, r4
 8003fb6:	bf0c      	ite	eq
 8003fb8:	6032      	streq	r2, [r6, #0]
 8003fba:	605a      	strne	r2, [r3, #4]
 8003fbc:	e7ec      	b.n	8003f98 <_malloc_r+0xa0>
 8003fbe:	4623      	mov	r3, r4
 8003fc0:	6864      	ldr	r4, [r4, #4]
 8003fc2:	e7b2      	b.n	8003f2a <_malloc_r+0x32>
 8003fc4:	4634      	mov	r4, r6
 8003fc6:	6876      	ldr	r6, [r6, #4]
 8003fc8:	e7b9      	b.n	8003f3e <_malloc_r+0x46>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	4638      	mov	r0, r7
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	f000 f84c 	bl	800406c <__malloc_unlock>
 8003fd4:	e7a1      	b.n	8003f1a <_malloc_r+0x22>
 8003fd6:	6025      	str	r5, [r4, #0]
 8003fd8:	e7de      	b.n	8003f98 <_malloc_r+0xa0>
 8003fda:	bf00      	nop
 8003fdc:	200004e0 	.word	0x200004e0

08003fe0 <_realloc_r>:
 8003fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe4:	4680      	mov	r8, r0
 8003fe6:	4614      	mov	r4, r2
 8003fe8:	460e      	mov	r6, r1
 8003fea:	b921      	cbnz	r1, 8003ff6 <_realloc_r+0x16>
 8003fec:	4611      	mov	r1, r2
 8003fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff2:	f7ff bf81 	b.w	8003ef8 <_malloc_r>
 8003ff6:	b92a      	cbnz	r2, 8004004 <_realloc_r+0x24>
 8003ff8:	f7ff ff16 	bl	8003e28 <_free_r>
 8003ffc:	4625      	mov	r5, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004004:	f000 f838 	bl	8004078 <_malloc_usable_size_r>
 8004008:	4284      	cmp	r4, r0
 800400a:	4607      	mov	r7, r0
 800400c:	d802      	bhi.n	8004014 <_realloc_r+0x34>
 800400e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004012:	d812      	bhi.n	800403a <_realloc_r+0x5a>
 8004014:	4621      	mov	r1, r4
 8004016:	4640      	mov	r0, r8
 8004018:	f7ff ff6e 	bl	8003ef8 <_malloc_r>
 800401c:	4605      	mov	r5, r0
 800401e:	2800      	cmp	r0, #0
 8004020:	d0ed      	beq.n	8003ffe <_realloc_r+0x1e>
 8004022:	42bc      	cmp	r4, r7
 8004024:	4622      	mov	r2, r4
 8004026:	4631      	mov	r1, r6
 8004028:	bf28      	it	cs
 800402a:	463a      	movcs	r2, r7
 800402c:	f7ff fed4 	bl	8003dd8 <memcpy>
 8004030:	4631      	mov	r1, r6
 8004032:	4640      	mov	r0, r8
 8004034:	f7ff fef8 	bl	8003e28 <_free_r>
 8004038:	e7e1      	b.n	8003ffe <_realloc_r+0x1e>
 800403a:	4635      	mov	r5, r6
 800403c:	e7df      	b.n	8003ffe <_realloc_r+0x1e>
	...

08004040 <_sbrk_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	2300      	movs	r3, #0
 8004044:	4d05      	ldr	r5, [pc, #20]	; (800405c <_sbrk_r+0x1c>)
 8004046:	4604      	mov	r4, r0
 8004048:	4608      	mov	r0, r1
 800404a:	602b      	str	r3, [r5, #0]
 800404c:	f7fd f924 	bl	8001298 <_sbrk>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_sbrk_r+0x1a>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	b103      	cbz	r3, 800405a <_sbrk_r+0x1a>
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	200004e8 	.word	0x200004e8

08004060 <__malloc_lock>:
 8004060:	4801      	ldr	r0, [pc, #4]	; (8004068 <__malloc_lock+0x8>)
 8004062:	f000 b811 	b.w	8004088 <__retarget_lock_acquire_recursive>
 8004066:	bf00      	nop
 8004068:	200004ec 	.word	0x200004ec

0800406c <__malloc_unlock>:
 800406c:	4801      	ldr	r0, [pc, #4]	; (8004074 <__malloc_unlock+0x8>)
 800406e:	f000 b80c 	b.w	800408a <__retarget_lock_release_recursive>
 8004072:	bf00      	nop
 8004074:	200004ec 	.word	0x200004ec

08004078 <_malloc_usable_size_r>:
 8004078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800407c:	1f18      	subs	r0, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	bfbc      	itt	lt
 8004082:	580b      	ldrlt	r3, [r1, r0]
 8004084:	18c0      	addlt	r0, r0, r3
 8004086:	4770      	bx	lr

08004088 <__retarget_lock_acquire_recursive>:
 8004088:	4770      	bx	lr

0800408a <__retarget_lock_release_recursive>:
 800408a:	4770      	bx	lr

0800408c <_init>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	bf00      	nop
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr

08004098 <_fini>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	bf00      	nop
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr
