
4_Way_Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004140  08004140  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004140  08004140  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004140  08004140  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  200000cc  08004214  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08004214  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbf4  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c7  00000000  00000000  0002bce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0002e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  0002f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a091  00000000  00000000  0002fc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120dc  00000000  00000000  00049cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aefc  00000000  00000000  0005bd9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6c99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000384c  00000000  00000000  000e6cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	080040c0 	.word	0x080040c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	080040c0 	.word	0x080040c0

0800014c <fsm_multi_mode_run>:
#include "fsm_for_multi_mode.h"

int newGrnTime = 0;
int newYelTime = 0;

void fsm_multi_mode_run(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(sysStatus) {
 8000150:	4ba7      	ldr	r3, [pc, #668]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b06      	cmp	r3, #6
 8000156:	f200 8258 	bhi.w	800060a <fsm_multi_mode_run+0x4be>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_multi_mode_run+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	0800017d 	.word	0x0800017d
 8000164:	080001b1 	.word	0x080001b1
 8000168:	08000271 	.word	0x08000271
 800016c:	08000331 	.word	0x08000331
 8000170:	0800040d 	.word	0x0800040d
 8000174:	08000569 	.word	0x08000569
 8000178:	080004cd 	.word	0x080004cd
	case INIT:
		//init timer 1 for countdown updating
		setTimer1(SECOND);
 800017c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000180:	f000 ffa2 	bl	80010c8 <setTimer1>

		//init countdown
		countdown = grnTime;
 8000184:	4b9b      	ldr	r3, [pc, #620]	; (80003f4 <fsm_multi_mode_run+0x2a8>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a9b      	ldr	r2, [pc, #620]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 800018a:	6013      	str	r3, [r2, #0]

		auto_mode = 1;
 800018c:	4b9b      	ldr	r3, [pc, #620]	; (80003fc <fsm_multi_mode_run+0x2b0>)
 800018e:	2201      	movs	r2, #1
 8000190:	601a      	str	r2, [r3, #0]

		sysStatus = RED__GRN;
 8000192:	4b97      	ldr	r3, [pc, #604]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 8000194:	2201      	movs	r2, #1
 8000196:	701a      	strb	r2, [r3, #0]
		trafficLightRed(TRAFFIC_LIGHT_1);
 8000198:	2000      	movs	r0, #0
 800019a:	f001 fa4d 	bl	8001638 <trafficLightRed>
		trafficLightGrn(TRAFFIC_LIGHT_2);
 800019e:	2001      	movs	r0, #1
 80001a0:	f001 f9fe 	bl	80015a0 <trafficLightGrn>
		displayCountdown(countdown);
 80001a4:	4b94      	ldr	r3, [pc, #592]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4618      	mov	r0, r3
 80001aa:	f001 fa6b 	bl	8001684 <displayCountdown>
		break;
 80001ae:	e239      	b.n	8000624 <fsm_multi_mode_run+0x4d8>

	case RED__GRN:
		if(auto_mode == 1) {
 80001b0:	4b92      	ldr	r3, [pc, #584]	; (80003fc <fsm_multi_mode_run+0x2b0>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d12d      	bne.n	8000214 <fsm_multi_mode_run+0xc8>
			if(timer1_flag == 1) {
 80001b8:	4b91      	ldr	r3, [pc, #580]	; (8000400 <fsm_multi_mode_run+0x2b4>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d11e      	bne.n	80001fe <fsm_multi_mode_run+0xb2>
				setTimer1(SECOND);
 80001c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c4:	f000 ff80 	bl	80010c8 <setTimer1>
				countdown -= 1;
 80001c8:	4b8b      	ldr	r3, [pc, #556]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	3b01      	subs	r3, #1
 80001ce:	4a8a      	ldr	r2, [pc, #552]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 80001d0:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 80001d2:	4b89      	ldr	r3, [pc, #548]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d10c      	bne.n	80001f4 <fsm_multi_mode_run+0xa8>
					countdown = yelTime;
 80001da:	4b8a      	ldr	r3, [pc, #552]	; (8000404 <fsm_multi_mode_run+0x2b8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a86      	ldr	r2, [pc, #536]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 80001e0:	6013      	str	r3, [r2, #0]
					sysStatus = RED__YEL;
 80001e2:	4b83      	ldr	r3, [pc, #524]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 80001e4:	2202      	movs	r2, #2
 80001e6:	701a      	strb	r2, [r3, #0]
					trafficLightRed(TRAFFIC_LIGHT_1);
 80001e8:	2000      	movs	r0, #0
 80001ea:	f001 fa25 	bl	8001638 <trafficLightRed>
					trafficLightYel(TRAFFIC_LIGHT_2);
 80001ee:	2001      	movs	r0, #1
 80001f0:	f001 f9fc 	bl	80015ec <trafficLightYel>
				}
				displayCountdown(countdown);
 80001f4:	4b80      	ldr	r3, [pc, #512]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 fa43 	bl	8001684 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 80001fe:	2001      	movs	r0, #1
 8000200:	f000 fc70 	bl	8000ae4 <isButtonPressed>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	f000 8201 	beq.w	800060e <fsm_multi_mode_run+0x4c2>
				auto_mode = 0;
 800020c:	4b7b      	ldr	r3, [pc, #492]	; (80003fc <fsm_multi_mode_run+0x2b0>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
				trafficLightYel(TRAFFIC_LIGHT_2);
			}
		}

		break;
 8000212:	e1fc      	b.n	800060e <fsm_multi_mode_run+0x4c2>
			if(isButtonPressed(BUTTON_1)) {
 8000214:	2001      	movs	r0, #1
 8000216:	f000 fc65 	bl	8000ae4 <isButtonPressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d016      	beq.n	800024e <fsm_multi_mode_run+0x102>
				setTimer1(LED_BLINK);
 8000220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000224:	f000 ff50 	bl	80010c8 <setTimer1>
				newGrnTime = grnTime;
 8000228:	4b72      	ldr	r3, [pc, #456]	; (80003f4 <fsm_multi_mode_run+0x2a8>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a76      	ldr	r2, [pc, #472]	; (8000408 <fsm_multi_mode_run+0x2bc>)
 800022e:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 8000230:	4b6f      	ldr	r3, [pc, #444]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 8000232:	2206      	movs	r2, #6
 8000234:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 8000236:	2000      	movs	r0, #0
 8000238:	f001 f9b2 	bl	80015a0 <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 800023c:	2001      	movs	r0, #1
 800023e:	f001 f9af 	bl	80015a0 <trafficLightGrn>
				displayCountdown(newGrnTime);
 8000242:	4b71      	ldr	r3, [pc, #452]	; (8000408 <fsm_multi_mode_run+0x2bc>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fa1c 	bl	8001684 <displayCountdown>
		break;
 800024c:	e1df      	b.n	800060e <fsm_multi_mode_run+0x4c2>
			else if(isButtonPressed(BUTTON_2)) {
 800024e:	2002      	movs	r0, #2
 8000250:	f000 fc48 	bl	8000ae4 <isButtonPressed>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	f000 81d9 	beq.w	800060e <fsm_multi_mode_run+0x4c2>
				sysStatus = RED__YEL;
 800025c:	4b64      	ldr	r3, [pc, #400]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 800025e:	2202      	movs	r2, #2
 8000260:	701a      	strb	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
 8000262:	2000      	movs	r0, #0
 8000264:	f001 f9e8 	bl	8001638 <trafficLightRed>
				trafficLightYel(TRAFFIC_LIGHT_2);
 8000268:	2001      	movs	r0, #1
 800026a:	f001 f9bf 	bl	80015ec <trafficLightYel>
		break;
 800026e:	e1ce      	b.n	800060e <fsm_multi_mode_run+0x4c2>

	case RED__YEL:
		if(auto_mode == 1) {
 8000270:	4b62      	ldr	r3, [pc, #392]	; (80003fc <fsm_multi_mode_run+0x2b0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d12d      	bne.n	80002d4 <fsm_multi_mode_run+0x188>
			if(timer1_flag == 1) {
 8000278:	4b61      	ldr	r3, [pc, #388]	; (8000400 <fsm_multi_mode_run+0x2b4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d11e      	bne.n	80002be <fsm_multi_mode_run+0x172>
				setTimer1(SECOND);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f000 ff20 	bl	80010c8 <setTimer1>
				countdown--;
 8000288:	4b5b      	ldr	r3, [pc, #364]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a5a      	ldr	r2, [pc, #360]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 8000290:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 8000292:	4b59      	ldr	r3, [pc, #356]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d10c      	bne.n	80002b4 <fsm_multi_mode_run+0x168>
					countdown = grnTime;
 800029a:	4b56      	ldr	r3, [pc, #344]	; (80003f4 <fsm_multi_mode_run+0x2a8>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a56      	ldr	r2, [pc, #344]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 80002a0:	6013      	str	r3, [r2, #0]
					sysStatus = GRN__RED;
 80002a2:	4b53      	ldr	r3, [pc, #332]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 80002a4:	2203      	movs	r2, #3
 80002a6:	701a      	strb	r2, [r3, #0]
					trafficLightGrn(TRAFFIC_LIGHT_1);
 80002a8:	2000      	movs	r0, #0
 80002aa:	f001 f979 	bl	80015a0 <trafficLightGrn>
					trafficLightRed(TRAFFIC_LIGHT_2);
 80002ae:	2001      	movs	r0, #1
 80002b0:	f001 f9c2 	bl	8001638 <trafficLightRed>
				}
				displayCountdown(countdown);
 80002b4:	4b50      	ldr	r3, [pc, #320]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 f9e3 	bl	8001684 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 fc10 	bl	8000ae4 <isButtonPressed>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	f000 81a3 	beq.w	8000612 <fsm_multi_mode_run+0x4c6>
				auto_mode = 0;
 80002cc:	4b4b      	ldr	r3, [pc, #300]	; (80003fc <fsm_multi_mode_run+0x2b0>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
				sysStatus = GRN__RED;
				trafficLightGrn(TRAFFIC_LIGHT_1);
				trafficLightRed(TRAFFIC_LIGHT_2);
			}
		}
		break;
 80002d2:	e19e      	b.n	8000612 <fsm_multi_mode_run+0x4c6>
			if(isButtonPressed(BUTTON_1)) {
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 fc05 	bl	8000ae4 <isButtonPressed>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d016      	beq.n	800030e <fsm_multi_mode_run+0x1c2>
				setTimer1(LED_BLINK);
 80002e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e4:	f000 fef0 	bl	80010c8 <setTimer1>
				newGrnTime = grnTime;
 80002e8:	4b42      	ldr	r3, [pc, #264]	; (80003f4 <fsm_multi_mode_run+0x2a8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a46      	ldr	r2, [pc, #280]	; (8000408 <fsm_multi_mode_run+0x2bc>)
 80002ee:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 80002f0:	4b3f      	ldr	r3, [pc, #252]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 80002f2:	2206      	movs	r2, #6
 80002f4:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 80002f6:	2000      	movs	r0, #0
 80002f8:	f001 f952 	bl	80015a0 <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 80002fc:	2001      	movs	r0, #1
 80002fe:	f001 f94f 	bl	80015a0 <trafficLightGrn>
				displayCountdown(newGrnTime);
 8000302:	4b41      	ldr	r3, [pc, #260]	; (8000408 <fsm_multi_mode_run+0x2bc>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f001 f9bc 	bl	8001684 <displayCountdown>
		break;
 800030c:	e181      	b.n	8000612 <fsm_multi_mode_run+0x4c6>
			else if(isButtonPressed(BUTTON_2)) {
 800030e:	2002      	movs	r0, #2
 8000310:	f000 fbe8 	bl	8000ae4 <isButtonPressed>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	f000 817b 	beq.w	8000612 <fsm_multi_mode_run+0x4c6>
				sysStatus = GRN__RED;
 800031c:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 800031e:	2203      	movs	r2, #3
 8000320:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 8000322:	2000      	movs	r0, #0
 8000324:	f001 f93c 	bl	80015a0 <trafficLightGrn>
				trafficLightRed(TRAFFIC_LIGHT_2);
 8000328:	2001      	movs	r0, #1
 800032a:	f001 f985 	bl	8001638 <trafficLightRed>
		break;
 800032e:	e170      	b.n	8000612 <fsm_multi_mode_run+0x4c6>

	case GRN__RED:
		if(auto_mode == 1) {
 8000330:	4b32      	ldr	r3, [pc, #200]	; (80003fc <fsm_multi_mode_run+0x2b0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d12d      	bne.n	8000394 <fsm_multi_mode_run+0x248>
			if(timer1_flag == 1) {
 8000338:	4b31      	ldr	r3, [pc, #196]	; (8000400 <fsm_multi_mode_run+0x2b4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d11e      	bne.n	800037e <fsm_multi_mode_run+0x232>
				setTimer1(SECOND);
 8000340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000344:	f000 fec0 	bl	80010c8 <setTimer1>
				countdown--;
 8000348:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	3b01      	subs	r3, #1
 800034e:	4a2a      	ldr	r2, [pc, #168]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 8000350:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 8000352:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d10c      	bne.n	8000374 <fsm_multi_mode_run+0x228>
					countdown = yelTime;
 800035a:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <fsm_multi_mode_run+0x2b8>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a26      	ldr	r2, [pc, #152]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 8000360:	6013      	str	r3, [r2, #0]
					sysStatus = YEL__RED;
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 8000364:	2204      	movs	r2, #4
 8000366:	701a      	strb	r2, [r3, #0]
					trafficLightYel(TRAFFIC_LIGHT_1);
 8000368:	2000      	movs	r0, #0
 800036a:	f001 f93f 	bl	80015ec <trafficLightYel>
					trafficLightRed(TRAFFIC_LIGHT_2);
 800036e:	2001      	movs	r0, #1
 8000370:	f001 f962 	bl	8001638 <trafficLightRed>
				}
				displayCountdown(countdown);
 8000374:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <fsm_multi_mode_run+0x2ac>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f001 f983 	bl	8001684 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 800037e:	2001      	movs	r0, #1
 8000380:	f000 fbb0 	bl	8000ae4 <isButtonPressed>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	f000 8145 	beq.w	8000616 <fsm_multi_mode_run+0x4ca>
				auto_mode = 0;
 800038c:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <fsm_multi_mode_run+0x2b0>)
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
				sysStatus = YEL__RED;
				trafficLightYel(TRAFFIC_LIGHT_1);
				trafficLightRed(TRAFFIC_LIGHT_2);
			}
		}
		break;
 8000392:	e140      	b.n	8000616 <fsm_multi_mode_run+0x4ca>
			if(isButtonPressed(BUTTON_1)) {
 8000394:	2001      	movs	r0, #1
 8000396:	f000 fba5 	bl	8000ae4 <isButtonPressed>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d016      	beq.n	80003ce <fsm_multi_mode_run+0x282>
				setTimer1(LED_BLINK);
 80003a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a4:	f000 fe90 	bl	80010c8 <setTimer1>
				newGrnTime = grnTime;
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <fsm_multi_mode_run+0x2a8>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a16      	ldr	r2, [pc, #88]	; (8000408 <fsm_multi_mode_run+0x2bc>)
 80003ae:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 80003b2:	2206      	movs	r2, #6
 80003b4:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 80003b6:	2000      	movs	r0, #0
 80003b8:	f001 f8f2 	bl	80015a0 <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 80003bc:	2001      	movs	r0, #1
 80003be:	f001 f8ef 	bl	80015a0 <trafficLightGrn>
				displayCountdown(newGrnTime);
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <fsm_multi_mode_run+0x2bc>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 f95c 	bl	8001684 <displayCountdown>
		break;
 80003cc:	e123      	b.n	8000616 <fsm_multi_mode_run+0x4ca>
			else if(isButtonPressed(BUTTON_2)) {
 80003ce:	2002      	movs	r0, #2
 80003d0:	f000 fb88 	bl	8000ae4 <isButtonPressed>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	f000 811d 	beq.w	8000616 <fsm_multi_mode_run+0x4ca>
				sysStatus = YEL__RED;
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <fsm_multi_mode_run+0x2a4>)
 80003de:	2204      	movs	r2, #4
 80003e0:	701a      	strb	r2, [r3, #0]
				trafficLightYel(TRAFFIC_LIGHT_1);
 80003e2:	2000      	movs	r0, #0
 80003e4:	f001 f902 	bl	80015ec <trafficLightYel>
				trafficLightRed(TRAFFIC_LIGHT_2);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f001 f925 	bl	8001638 <trafficLightRed>
		break;
 80003ee:	e112      	b.n	8000616 <fsm_multi_mode_run+0x4ca>
 80003f0:	200000f4 	.word	0x200000f4
 80003f4:	20000008 	.word	0x20000008
 80003f8:	200000f8 	.word	0x200000f8
 80003fc:	2000000c 	.word	0x2000000c
 8000400:	20000438 	.word	0x20000438
 8000404:	20000004 	.word	0x20000004
 8000408:	200000e8 	.word	0x200000e8

	case YEL__RED:
		if(auto_mode == 1) {
 800040c:	4b86      	ldr	r3, [pc, #536]	; (8000628 <fsm_multi_mode_run+0x4dc>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d12d      	bne.n	8000470 <fsm_multi_mode_run+0x324>
			if(timer1_flag == 1) {
 8000414:	4b85      	ldr	r3, [pc, #532]	; (800062c <fsm_multi_mode_run+0x4e0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d11e      	bne.n	800045a <fsm_multi_mode_run+0x30e>
				setTimer1(SECOND);
 800041c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000420:	f000 fe52 	bl	80010c8 <setTimer1>
				countdown--;
 8000424:	4b82      	ldr	r3, [pc, #520]	; (8000630 <fsm_multi_mode_run+0x4e4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a81      	ldr	r2, [pc, #516]	; (8000630 <fsm_multi_mode_run+0x4e4>)
 800042c:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 800042e:	4b80      	ldr	r3, [pc, #512]	; (8000630 <fsm_multi_mode_run+0x4e4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d10c      	bne.n	8000450 <fsm_multi_mode_run+0x304>
					countdown = grnTime;
 8000436:	4b7f      	ldr	r3, [pc, #508]	; (8000634 <fsm_multi_mode_run+0x4e8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a7d      	ldr	r2, [pc, #500]	; (8000630 <fsm_multi_mode_run+0x4e4>)
 800043c:	6013      	str	r3, [r2, #0]
					sysStatus = RED__GRN;
 800043e:	4b7e      	ldr	r3, [pc, #504]	; (8000638 <fsm_multi_mode_run+0x4ec>)
 8000440:	2201      	movs	r2, #1
 8000442:	701a      	strb	r2, [r3, #0]
					trafficLightRed(TRAFFIC_LIGHT_1);
 8000444:	2000      	movs	r0, #0
 8000446:	f001 f8f7 	bl	8001638 <trafficLightRed>
					trafficLightGrn(TRAFFIC_LIGHT_2);
 800044a:	2001      	movs	r0, #1
 800044c:	f001 f8a8 	bl	80015a0 <trafficLightGrn>
				}
				displayCountdown(countdown);
 8000450:	4b77      	ldr	r3, [pc, #476]	; (8000630 <fsm_multi_mode_run+0x4e4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f001 f915 	bl	8001684 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 800045a:	2001      	movs	r0, #1
 800045c:	f000 fb42 	bl	8000ae4 <isButtonPressed>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	f000 80d9 	beq.w	800061a <fsm_multi_mode_run+0x4ce>
				auto_mode = 0;
 8000468:	4b6f      	ldr	r3, [pc, #444]	; (8000628 <fsm_multi_mode_run+0x4dc>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
				sysStatus = RED__GRN;
				trafficLightRed(TRAFFIC_LIGHT_1);
				trafficLightGrn(TRAFFIC_LIGHT_2);
			}
		}
		break;
 800046e:	e0d4      	b.n	800061a <fsm_multi_mode_run+0x4ce>
			if(isButtonPressed(BUTTON_1)) {
 8000470:	2001      	movs	r0, #1
 8000472:	f000 fb37 	bl	8000ae4 <isButtonPressed>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d016      	beq.n	80004aa <fsm_multi_mode_run+0x35e>
				setTimer1(LED_BLINK);
 800047c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000480:	f000 fe22 	bl	80010c8 <setTimer1>
				newGrnTime = grnTime;
 8000484:	4b6b      	ldr	r3, [pc, #428]	; (8000634 <fsm_multi_mode_run+0x4e8>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a6c      	ldr	r2, [pc, #432]	; (800063c <fsm_multi_mode_run+0x4f0>)
 800048a:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 800048c:	4b6a      	ldr	r3, [pc, #424]	; (8000638 <fsm_multi_mode_run+0x4ec>)
 800048e:	2206      	movs	r2, #6
 8000490:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 8000492:	2000      	movs	r0, #0
 8000494:	f001 f884 	bl	80015a0 <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 8000498:	2001      	movs	r0, #1
 800049a:	f001 f881 	bl	80015a0 <trafficLightGrn>
				displayCountdown(newGrnTime);
 800049e:	4b67      	ldr	r3, [pc, #412]	; (800063c <fsm_multi_mode_run+0x4f0>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 f8ee 	bl	8001684 <displayCountdown>
		break;
 80004a8:	e0b7      	b.n	800061a <fsm_multi_mode_run+0x4ce>
			else if(isButtonPressed(BUTTON_2)) {
 80004aa:	2002      	movs	r0, #2
 80004ac:	f000 fb1a 	bl	8000ae4 <isButtonPressed>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	f000 80b1 	beq.w	800061a <fsm_multi_mode_run+0x4ce>
				sysStatus = RED__GRN;
 80004b8:	4b5f      	ldr	r3, [pc, #380]	; (8000638 <fsm_multi_mode_run+0x4ec>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
 80004be:	2000      	movs	r0, #0
 80004c0:	f001 f8ba 	bl	8001638 <trafficLightRed>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 80004c4:	2001      	movs	r0, #1
 80004c6:	f001 f86b 	bl	80015a0 <trafficLightGrn>
		break;
 80004ca:	e0a6      	b.n	800061a <fsm_multi_mode_run+0x4ce>

	case SET_GRN:
		if(isButtonPressed(BUTTON_1)) {
 80004cc:	2001      	movs	r0, #1
 80004ce:	f000 fb09 	bl	8000ae4 <isButtonPressed>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d016      	beq.n	8000506 <fsm_multi_mode_run+0x3ba>
			setTimer1(LED_BLINK);
 80004d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004dc:	f000 fdf4 	bl	80010c8 <setTimer1>
			newYelTime = yelTime;
 80004e0:	4b57      	ldr	r3, [pc, #348]	; (8000640 <fsm_multi_mode_run+0x4f4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a57      	ldr	r2, [pc, #348]	; (8000644 <fsm_multi_mode_run+0x4f8>)
 80004e6:	6013      	str	r3, [r2, #0]
			sysStatus = SET_YEL;
 80004e8:	4b53      	ldr	r3, [pc, #332]	; (8000638 <fsm_multi_mode_run+0x4ec>)
 80004ea:	2205      	movs	r2, #5
 80004ec:	701a      	strb	r2, [r3, #0]
			trafficLightYel(TRAFFIC_LIGHT_1);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f001 f87c 	bl	80015ec <trafficLightYel>
			trafficLightYel(TRAFFIC_LIGHT_2);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f001 f879 	bl	80015ec <trafficLightYel>
			displayCountdown(newYelTime);
 80004fa:	4b52      	ldr	r3, [pc, #328]	; (8000644 <fsm_multi_mode_run+0x4f8>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 f8c0 	bl	8001684 <displayCountdown>
 8000504:	e021      	b.n	800054a <fsm_multi_mode_run+0x3fe>
		}
		else if(isButtonPressed(BUTTON_2)) {
 8000506:	2002      	movs	r0, #2
 8000508:	f000 faec 	bl	8000ae4 <isButtonPressed>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00a      	beq.n	8000528 <fsm_multi_mode_run+0x3dc>
			newGrnTime++;
 8000512:	4b4a      	ldr	r3, [pc, #296]	; (800063c <fsm_multi_mode_run+0x4f0>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	4a48      	ldr	r2, [pc, #288]	; (800063c <fsm_multi_mode_run+0x4f0>)
 800051a:	6013      	str	r3, [r2, #0]
			displayCountdown(newGrnTime);
 800051c:	4b47      	ldr	r3, [pc, #284]	; (800063c <fsm_multi_mode_run+0x4f0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f001 f8af 	bl	8001684 <displayCountdown>
 8000526:	e010      	b.n	800054a <fsm_multi_mode_run+0x3fe>
		}
		else if(isButtonPressed(BUTTON_3)) {
 8000528:	2003      	movs	r0, #3
 800052a:	f000 fadb 	bl	8000ae4 <isButtonPressed>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d00a      	beq.n	800054a <fsm_multi_mode_run+0x3fe>
			grnTime = newGrnTime;
 8000534:	4b41      	ldr	r3, [pc, #260]	; (800063c <fsm_multi_mode_run+0x4f0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a3e      	ldr	r2, [pc, #248]	; (8000634 <fsm_multi_mode_run+0x4e8>)
 800053a:	6013      	str	r3, [r2, #0]
			redTime = grnTime + yelTime;
 800053c:	4b3d      	ldr	r3, [pc, #244]	; (8000634 <fsm_multi_mode_run+0x4e8>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b3f      	ldr	r3, [pc, #252]	; (8000640 <fsm_multi_mode_run+0x4f4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4413      	add	r3, r2
 8000546:	4a40      	ldr	r2, [pc, #256]	; (8000648 <fsm_multi_mode_run+0x4fc>)
 8000548:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 800054a:	4b38      	ldr	r3, [pc, #224]	; (800062c <fsm_multi_mode_run+0x4e0>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d165      	bne.n	800061e <fsm_multi_mode_run+0x4d2>
			setTimer1(LED_BLINK);
 8000552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000556:	f000 fdb7 	bl	80010c8 <setTimer1>
			trafficLightBlinkGrn(TRAFFIC_LIGHT_1);
 800055a:	2000      	movs	r0, #0
 800055c:	f000 ffd4 	bl	8001508 <trafficLightBlinkGrn>
			trafficLightBlinkGrn(TRAFFIC_LIGHT_2);
 8000560:	2001      	movs	r0, #1
 8000562:	f000 ffd1 	bl	8001508 <trafficLightBlinkGrn>
		}
		break;
 8000566:	e05a      	b.n	800061e <fsm_multi_mode_run+0x4d2>

	case SET_YEL:
		if(isButtonPressed(BUTTON_1)) {
 8000568:	2001      	movs	r0, #1
 800056a:	f000 fabb 	bl	8000ae4 <isButtonPressed>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d019      	beq.n	80005a8 <fsm_multi_mode_run+0x45c>
			setTimer1(SECOND);
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f000 fda6 	bl	80010c8 <setTimer1>
			countdown = grnTime;
 800057c:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <fsm_multi_mode_run+0x4e8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a2b      	ldr	r2, [pc, #172]	; (8000630 <fsm_multi_mode_run+0x4e4>)
 8000582:	6013      	str	r3, [r2, #0]
			auto_mode = 1;
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <fsm_multi_mode_run+0x4dc>)
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
			sysStatus = RED__GRN;
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <fsm_multi_mode_run+0x4ec>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
			trafficLightRed(TRAFFIC_LIGHT_1);
 8000590:	2000      	movs	r0, #0
 8000592:	f001 f851 	bl	8001638 <trafficLightRed>
			trafficLightGrn(TRAFFIC_LIGHT_2);
 8000596:	2001      	movs	r0, #1
 8000598:	f001 f802 	bl	80015a0 <trafficLightGrn>
			displayCountdown(countdown);
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <fsm_multi_mode_run+0x4e4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 f86f 	bl	8001684 <displayCountdown>
 80005a6:	e021      	b.n	80005ec <fsm_multi_mode_run+0x4a0>
		}
		else if(isButtonPressed(BUTTON_2)) {
 80005a8:	2002      	movs	r0, #2
 80005aa:	f000 fa9b 	bl	8000ae4 <isButtonPressed>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00a      	beq.n	80005ca <fsm_multi_mode_run+0x47e>
			newYelTime++;
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <fsm_multi_mode_run+0x4f8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	4a22      	ldr	r2, [pc, #136]	; (8000644 <fsm_multi_mode_run+0x4f8>)
 80005bc:	6013      	str	r3, [r2, #0]
			displayCountdown(newYelTime);
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <fsm_multi_mode_run+0x4f8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f85e 	bl	8001684 <displayCountdown>
 80005c8:	e010      	b.n	80005ec <fsm_multi_mode_run+0x4a0>
		}
		else if(isButtonPressed(BUTTON_3)) {
 80005ca:	2003      	movs	r0, #3
 80005cc:	f000 fa8a 	bl	8000ae4 <isButtonPressed>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d00a      	beq.n	80005ec <fsm_multi_mode_run+0x4a0>
			yelTime = newYelTime;
 80005d6:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <fsm_multi_mode_run+0x4f8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a19      	ldr	r2, [pc, #100]	; (8000640 <fsm_multi_mode_run+0x4f4>)
 80005dc:	6013      	str	r3, [r2, #0]
			redTime = grnTime + yelTime;
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <fsm_multi_mode_run+0x4e8>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <fsm_multi_mode_run+0x4f4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a17      	ldr	r2, [pc, #92]	; (8000648 <fsm_multi_mode_run+0x4fc>)
 80005ea:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <fsm_multi_mode_run+0x4e0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d116      	bne.n	8000622 <fsm_multi_mode_run+0x4d6>
			setTimer1(LED_BLINK);
 80005f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f8:	f000 fd66 	bl	80010c8 <setTimer1>
			trafficLightBlinkYel(TRAFFIC_LIGHT_1);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 ffa9 	bl	8001554 <trafficLightBlinkYel>
			trafficLightBlinkYel(TRAFFIC_LIGHT_2);
 8000602:	2001      	movs	r0, #1
 8000604:	f000 ffa6 	bl	8001554 <trafficLightBlinkYel>
		}
		break;
 8000608:	e00b      	b.n	8000622 <fsm_multi_mode_run+0x4d6>

	default: break;
 800060a:	bf00      	nop
 800060c:	e00a      	b.n	8000624 <fsm_multi_mode_run+0x4d8>
		break;
 800060e:	bf00      	nop
 8000610:	e008      	b.n	8000624 <fsm_multi_mode_run+0x4d8>
		break;
 8000612:	bf00      	nop
 8000614:	e006      	b.n	8000624 <fsm_multi_mode_run+0x4d8>
		break;
 8000616:	bf00      	nop
 8000618:	e004      	b.n	8000624 <fsm_multi_mode_run+0x4d8>
		break;
 800061a:	bf00      	nop
 800061c:	e002      	b.n	8000624 <fsm_multi_mode_run+0x4d8>
		break;
 800061e:	bf00      	nop
 8000620:	e000      	b.n	8000624 <fsm_multi_mode_run+0x4d8>
		break;
 8000622:	bf00      	nop
	}
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000000c 	.word	0x2000000c
 800062c:	20000438 	.word	0x20000438
 8000630:	200000f8 	.word	0x200000f8
 8000634:	20000008 	.word	0x20000008
 8000638:	200000f4 	.word	0x200000f4
 800063c:	200000e8 	.word	0x200000e8
 8000640:	20000004 	.word	0x20000004
 8000644:	200000ec 	.word	0x200000ec
 8000648:	20000000 	.word	0x20000000

0800064c <fsm_for_pedestrian>:

#include "fsm_for_pedestrian.h"

int timeOut;

void fsm_for_pedestrian(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 8000650:	4b73      	ldr	r3, [pc, #460]	; (8000820 <fsm_for_pedestrian+0x1d4>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b02      	cmp	r3, #2
 8000656:	f000 808f 	beq.w	8000778 <fsm_for_pedestrian+0x12c>
 800065a:	2b02      	cmp	r3, #2
 800065c:	f300 80de 	bgt.w	800081c <fsm_for_pedestrian+0x1d0>
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <fsm_for_pedestrian+0x1e>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d03a      	beq.n	80006de <fsm_for_pedestrian+0x92>
				pedestrianLightBlinkRed();
			}
		}
		break;
	}
}
 8000668:	e0d8      	b.n	800081c <fsm_for_pedestrian+0x1d0>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fa3a 	bl	8000ae4 <isButtonPressed>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	f000 80cd 	beq.w	8000812 <fsm_for_pedestrian+0x1c6>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 8000678:	4b6a      	ldr	r3, [pc, #424]	; (8000824 <fsm_for_pedestrian+0x1d8>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b6a      	ldr	r3, [pc, #424]	; (8000828 <fsm_for_pedestrian+0x1dc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	441a      	add	r2, r3
 8000682:	4b6a      	ldr	r3, [pc, #424]	; (800082c <fsm_for_pedestrian+0x1e0>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800068c:	fb02 f303 	mul.w	r3, r2, r3
 8000690:	4a67      	ldr	r2, [pc, #412]	; (8000830 <fsm_for_pedestrian+0x1e4>)
 8000692:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 8000694:	4b66      	ldr	r3, [pc, #408]	; (8000830 <fsm_for_pedestrian+0x1e4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fd31 	bl	8001100 <setTimer2>
			setTimer3(TIMER_INIT);
 800069e:	200a      	movs	r0, #10
 80006a0:	f000 fd4a 	bl	8001138 <setTimer3>
			if(sysStatus == RED__GRN || sysStatus == RED__YEL) {
 80006a4:	4b63      	ldr	r3, [pc, #396]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d003      	beq.n	80006b4 <fsm_for_pedestrian+0x68>
 80006ac:	4b61      	ldr	r3, [pc, #388]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d105      	bne.n	80006c0 <fsm_for_pedestrian+0x74>
				pedestrianStatus = GRN;
 80006b4:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <fsm_for_pedestrian+0x1d4>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
				pedestrianLightGrn();
 80006ba:	f000 fae5 	bl	8000c88 <pedestrianLightGrn>
		break;
 80006be:	e0a8      	b.n	8000812 <fsm_for_pedestrian+0x1c6>
			else if(sysStatus == GRN__RED || sysStatus == YEL__RED) {
 80006c0:	4b5c      	ldr	r3, [pc, #368]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	d004      	beq.n	80006d2 <fsm_for_pedestrian+0x86>
 80006c8:	4b5a      	ldr	r3, [pc, #360]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	f040 80a0 	bne.w	8000812 <fsm_for_pedestrian+0x1c6>
				pedestrianStatus = RED;
 80006d2:	4b53      	ldr	r3, [pc, #332]	; (8000820 <fsm_for_pedestrian+0x1d4>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	701a      	strb	r2, [r3, #0]
				pedestrianLightRed();
 80006d8:	f000 faee 	bl	8000cb8 <pedestrianLightRed>
		break;
 80006dc:	e099      	b.n	8000812 <fsm_for_pedestrian+0x1c6>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 fa00 	bl	8000ae4 <isButtonPressed>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d012      	beq.n	8000710 <fsm_for_pedestrian+0xc4>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 80006ea:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <fsm_for_pedestrian+0x1d8>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <fsm_for_pedestrian+0x1dc>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	441a      	add	r2, r3
 80006f4:	4b4d      	ldr	r3, [pc, #308]	; (800082c <fsm_for_pedestrian+0x1e0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006fe:	fb02 f303 	mul.w	r3, r2, r3
 8000702:	4a4b      	ldr	r2, [pc, #300]	; (8000830 <fsm_for_pedestrian+0x1e4>)
 8000704:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 8000706:	4b4a      	ldr	r3, [pc, #296]	; (8000830 <fsm_for_pedestrian+0x1e4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fcf8 	bl	8001100 <setTimer2>
		if(sysStatus == SET_GRN || sysStatus == SET_YEL) {
 8000710:	4b48      	ldr	r3, [pc, #288]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b06      	cmp	r3, #6
 8000716:	d003      	beq.n	8000720 <fsm_for_pedestrian+0xd4>
 8000718:	4b46      	ldr	r3, [pc, #280]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b05      	cmp	r3, #5
 800071e:	d107      	bne.n	8000730 <fsm_for_pedestrian+0xe4>
			setTimer2(0);
 8000720:	2000      	movs	r0, #0
 8000722:	f000 fced 	bl	8001100 <setTimer2>
			pedestrianStatus = WAIT;
 8000726:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <fsm_for_pedestrian+0x1d4>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 800072c:	f000 fadc 	bl	8000ce8 <pedestrianLightOff>
		if(timer2_flag == 1) {
 8000730:	4b41      	ldr	r3, [pc, #260]	; (8000838 <fsm_for_pedestrian+0x1ec>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d107      	bne.n	8000748 <fsm_for_pedestrian+0xfc>
			setTimer2(0);
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fce1 	bl	8001100 <setTimer2>
			pedestrianStatus = WAIT;
 800073e:	4b38      	ldr	r3, [pc, #224]	; (8000820 <fsm_for_pedestrian+0x1d4>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 8000744:	f000 fad0 	bl	8000ce8 <pedestrianLightOff>
		if(sysStatus == GRN__RED) {
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d104      	bne.n	800075a <fsm_for_pedestrian+0x10e>
			pedestrianStatus = RED;
 8000750:	4b33      	ldr	r3, [pc, #204]	; (8000820 <fsm_for_pedestrian+0x1d4>)
 8000752:	2202      	movs	r2, #2
 8000754:	701a      	strb	r2, [r3, #0]
			pedestrianLightRed();
 8000756:	f000 faaf 	bl	8000cb8 <pedestrianLightRed>
		if(sysStatus == RED__YEL) {
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d159      	bne.n	8000816 <fsm_for_pedestrian+0x1ca>
			if(timer3_flag == 1) {
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <fsm_for_pedestrian+0x1f0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d155      	bne.n	8000816 <fsm_for_pedestrian+0x1ca>
				setTimer3(LED_BLINK);
 800076a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076e:	f000 fce3 	bl	8001138 <setTimer3>
				pedestrianLightBlinkGrn();
 8000772:	f000 fa59 	bl	8000c28 <pedestrianLightBlinkGrn>
		break;
 8000776:	e04e      	b.n	8000816 <fsm_for_pedestrian+0x1ca>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 8000778:	2000      	movs	r0, #0
 800077a:	f000 f9b3 	bl	8000ae4 <isButtonPressed>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d012      	beq.n	80007aa <fsm_for_pedestrian+0x15e>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <fsm_for_pedestrian+0x1d8>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b27      	ldr	r3, [pc, #156]	; (8000828 <fsm_for_pedestrian+0x1dc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	441a      	add	r2, r3
 800078e:	4b27      	ldr	r3, [pc, #156]	; (800082c <fsm_for_pedestrian+0x1e0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000798:	fb02 f303 	mul.w	r3, r2, r3
 800079c:	4a24      	ldr	r2, [pc, #144]	; (8000830 <fsm_for_pedestrian+0x1e4>)
 800079e:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <fsm_for_pedestrian+0x1e4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fcab 	bl	8001100 <setTimer2>
		if(sysStatus == SET_GRN || sysStatus == SET_YEL) {
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d003      	beq.n	80007ba <fsm_for_pedestrian+0x16e>
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b05      	cmp	r3, #5
 80007b8:	d107      	bne.n	80007ca <fsm_for_pedestrian+0x17e>
			setTimer2(0);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fca0 	bl	8001100 <setTimer2>
			pedestrianStatus = WAIT;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <fsm_for_pedestrian+0x1d4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 80007c6:	f000 fa8f 	bl	8000ce8 <pedestrianLightOff>
		if(timer2_flag == 1) {
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <fsm_for_pedestrian+0x1ec>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d107      	bne.n	80007e2 <fsm_for_pedestrian+0x196>
			setTimer2(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fc94 	bl	8001100 <setTimer2>
			pedestrianStatus = WAIT;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <fsm_for_pedestrian+0x1d4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 80007de:	f000 fa83 	bl	8000ce8 <pedestrianLightOff>
		if(sysStatus == RED__GRN) {
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d104      	bne.n	80007f4 <fsm_for_pedestrian+0x1a8>
			pedestrianStatus = GRN;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <fsm_for_pedestrian+0x1d4>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
			pedestrianLightGrn();
 80007f0:	f000 fa4a 	bl	8000c88 <pedestrianLightGrn>
		if(sysStatus == YEL__RED) {
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <fsm_for_pedestrian+0x1e8>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d10e      	bne.n	800081a <fsm_for_pedestrian+0x1ce>
			if(timer3_flag == 1) {
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <fsm_for_pedestrian+0x1f0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d10a      	bne.n	800081a <fsm_for_pedestrian+0x1ce>
				setTimer3(LED_BLINK);
 8000804:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000808:	f000 fc96 	bl	8001138 <setTimer3>
				pedestrianLightBlinkRed();
 800080c:	f000 fa24 	bl	8000c58 <pedestrianLightBlinkRed>
		break;
 8000810:	e003      	b.n	800081a <fsm_for_pedestrian+0x1ce>
		break;
 8000812:	bf00      	nop
 8000814:	e002      	b.n	800081c <fsm_for_pedestrian+0x1d0>
		break;
 8000816:	bf00      	nop
 8000818:	e000      	b.n	800081c <fsm_for_pedestrian+0x1d0>
		break;
 800081a:	bf00      	nop
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000f5 	.word	0x200000f5
 8000824:	20000000 	.word	0x20000000
 8000828:	20000004 	.word	0x20000004
 800082c:	20000008 	.word	0x20000008
 8000830:	200000f0 	.word	0x200000f0
 8000834:	200000f4 	.word	0x200000f4
 8000838:	20000440 	.word	0x20000440
 800083c:	20000448 	.word	0x20000448

08000840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000854:	4b45      	ldr	r3, [pc, #276]	; (800096c <MX_GPIO_Init+0x12c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a44      	ldr	r2, [pc, #272]	; (800096c <MX_GPIO_Init+0x12c>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b42      	ldr	r3, [pc, #264]	; (800096c <MX_GPIO_Init+0x12c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0310 	and.w	r3, r3, #16
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086c:	4b3f      	ldr	r3, [pc, #252]	; (800096c <MX_GPIO_Init+0x12c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MX_GPIO_Init+0x12c>)
 8000872:	f043 0320 	orr.w	r3, r3, #32
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x12c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0320 	and.w	r3, r3, #32
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b39      	ldr	r3, [pc, #228]	; (800096c <MX_GPIO_Init+0x12c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a38      	ldr	r2, [pc, #224]	; (800096c <MX_GPIO_Init+0x12c>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b36      	ldr	r3, [pc, #216]	; (800096c <MX_GPIO_Init+0x12c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b33      	ldr	r3, [pc, #204]	; (800096c <MX_GPIO_Init+0x12c>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a32      	ldr	r2, [pc, #200]	; (800096c <MX_GPIO_Init+0x12c>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_GPIO_Init+0x12c>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0308 	and.w	r3, r3, #8
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D12_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 80008ba:	482d      	ldr	r0, [pc, #180]	; (8000970 <MX_GPIO_Init+0x130>)
 80008bc:	f001 fa97 	bl	8001dee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80008c6:	482b      	ldr	r0, [pc, #172]	; (8000974 <MX_GPIO_Init+0x134>)
 80008c8:	f001 fa91 	bl	8001dee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <MX_GPIO_Init+0x138>)
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	4826      	ldr	r0, [pc, #152]	; (800097c <MX_GPIO_Init+0x13c>)
 80008e2:	f001 f8e9 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 80008e6:	2313      	movs	r3, #19
 80008e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4619      	mov	r1, r3
 80008f8:	481d      	ldr	r0, [pc, #116]	; (8000970 <MX_GPIO_Init+0x130>)
 80008fa:	f001 f8dd 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|D12_Pin|D7_Pin|D2_Pin;
 80008fe:	f44f 63ac 	mov.w	r3, #1376	; 0x560
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4619      	mov	r1, r3
 8000916:	4816      	ldr	r0, [pc, #88]	; (8000970 <MX_GPIO_Init+0x130>)
 8000918:	f001 f8ce 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A3_Pin;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_GPIO_Init+0x134>)
 8000930:	f001 f8c2 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000934:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_GPIO_Init+0x134>)
 800094e:	f001 f8b3 	bl	8001ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2028      	movs	r0, #40	; 0x28
 8000958:	f001 f877 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f001 f890 	bl	8001a82 <HAL_NVIC_EnableIRQ>

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00
 8000978:	10110000 	.word	0x10110000
 800097c:	40011000 	.word	0x40011000

08000980 <buttonRead>:
static uint8_t flagForButtonHold[NO_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonHold[NO_OF_BUTTONS] = {0, 0, 0, 0};

void buttonRead(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	e08e      	b.n	8000aaa <buttonRead+0x12a>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800098c:	4a4b      	ldr	r2, [pc, #300]	; (8000abc <buttonRead+0x13c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	7819      	ldrb	r1, [r3, #0]
 8000994:	4a4a      	ldr	r2, [pc, #296]	; (8000ac0 <buttonRead+0x140>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	460a      	mov	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 800099e:	4a49      	ldr	r2, [pc, #292]	; (8000ac4 <buttonRead+0x144>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	7819      	ldrb	r1, [r3, #0]
 80009a6:	4a45      	ldr	r2, [pc, #276]	; (8000abc <buttonRead+0x13c>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	460a      	mov	r2, r1
 80009ae:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80009b0:	4a45      	ldr	r2, [pc, #276]	; (8000ac8 <buttonRead+0x148>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b8:	4944      	ldr	r1, [pc, #272]	; (8000acc <buttonRead+0x14c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009c0:	4619      	mov	r1, r3
 80009c2:	4610      	mov	r0, r2
 80009c4:	f001 f9fc 	bl	8001dc0 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4619      	mov	r1, r3
 80009cc:	4a3d      	ldr	r2, [pc, #244]	; (8000ac4 <buttonRead+0x144>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	460a      	mov	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
		if((debounceButtonBuffer2[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer0[i])) {
 80009d6:	4a3a      	ldr	r2, [pc, #232]	; (8000ac0 <buttonRead+0x140>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4413      	add	r3, r2
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	4937      	ldr	r1, [pc, #220]	; (8000abc <buttonRead+0x13c>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	440b      	add	r3, r1
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d15c      	bne.n	8000aa4 <buttonRead+0x124>
 80009ea:	4a34      	ldr	r2, [pc, #208]	; (8000abc <buttonRead+0x13c>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4413      	add	r3, r2
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	4934      	ldr	r1, [pc, #208]	; (8000ac4 <buttonRead+0x144>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	440b      	add	r3, r1
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d152      	bne.n	8000aa4 <buttonRead+0x124>
			if(buttonBuffer[i] != debounceButtonBuffer0[i]) {
 80009fe:	4a34      	ldr	r2, [pc, #208]	; (8000ad0 <buttonRead+0x150>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4413      	add	r3, r2
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	492f      	ldr	r1, [pc, #188]	; (8000ac4 <buttonRead+0x144>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	440b      	add	r3, r1
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d02d      	beq.n	8000a6e <buttonRead+0xee>
				buttonBuffer[i] = debounceButtonBuffer0[i];
 8000a12:	4a2c      	ldr	r2, [pc, #176]	; (8000ac4 <buttonRead+0x144>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	7819      	ldrb	r1, [r3, #0]
 8000a1a:	4a2d      	ldr	r2, [pc, #180]	; (8000ad0 <buttonRead+0x150>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4413      	add	r3, r2
 8000a20:	460a      	mov	r2, r1
 8000a22:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000a24:	4a2a      	ldr	r2, [pc, #168]	; (8000ad0 <buttonRead+0x150>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d118      	bne.n	8000a62 <buttonRead+0xe2>
					counterForButtonHold[i] = DURATION_FOR_BUTTON_HOLD;
 8000a30:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <buttonRead+0x154>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(SYSTEM_DELAY > 0) counterForButtonHold[i] /= SYSTEM_DELAY;
 8000a3c:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <buttonRead+0x154>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a44:	4a24      	ldr	r2, [pc, #144]	; (8000ad8 <buttonRead+0x158>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	08db      	lsrs	r3, r3, #3
 8000a4c:	b299      	uxth	r1, r3
 8000a4e:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <buttonRead+0x154>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					flagForButtonPressed[i] = 1;
 8000a56:	4a21      	ldr	r2, [pc, #132]	; (8000adc <buttonRead+0x15c>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e020      	b.n	8000aa4 <buttonRead+0x124>
				}
				else {
					flagForButtonHold[i] = 0;
 8000a62:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <buttonRead+0x160>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
 8000a6c:	e01a      	b.n	8000aa4 <buttonRead+0x124>
				}
			}
			else {
				if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <buttonRead+0x150>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d114      	bne.n	8000aa4 <buttonRead+0x124>
					counterForButtonHold[i]--;
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <buttonRead+0x154>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b299      	uxth	r1, r3
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <buttonRead+0x154>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonHold[i] == 0) {
 8000a8e:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <buttonRead+0x154>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d104      	bne.n	8000aa4 <buttonRead+0x124>
						flagForButtonHold[i] = 1;
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <buttonRead+0x160>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	f77f af6d 	ble.w	800098c <buttonRead+0xc>
					}
				}
			}
		}
	}
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000030 	.word	0x20000030
 8000ac0:	20000034 	.word	0x20000034
 8000ac4:	2000002c 	.word	0x2000002c
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	20000020 	.word	0x20000020
 8000ad0:	20000028 	.word	0x20000028
 8000ad4:	20000104 	.word	0x20000104
 8000ad8:	cccccccd 	.word	0xcccccccd
 8000adc:	200000fc 	.word	0x200000fc
 8000ae0:	20000100 	.word	0x20000100

08000ae4 <isButtonPressed>:

int isButtonPressed(int index) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if(index < 0 || index > NO_OF_BUTTONS) return 0;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db02      	blt.n	8000af8 <isButtonPressed+0x14>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	dd01      	ble.n	8000afc <isButtonPressed+0x18>
 8000af8:	2300      	movs	r3, #0
 8000afa:	e00d      	b.n	8000b18 <isButtonPressed+0x34>
	if(flagForButtonPressed[index] == 1) {
 8000afc:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <isButtonPressed+0x40>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d106      	bne.n	8000b16 <isButtonPressed+0x32>
		flagForButtonPressed[index] = 0;
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <isButtonPressed+0x40>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
		return 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <isButtonPressed+0x34>
	}
	return 0;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200000fc 	.word	0x200000fc

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fe54 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f82a 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f7ff fe84 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b38:	f000 fdc0 	bl	80016bc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000b3c:	f000 fc02 	bl	8001344 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <main+0x4c>)
 8000b42:	f001 fe11 	bl	8002768 <HAL_TIM_Base_Start_IT>

  SCH_Add_Task(&buttonRead, 0, 10);
 8000b46:	220a      	movs	r2, #10
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <main+0x50>)
 8000b4c:	f000 f8e4 	bl	8000d18 <SCH_Add_Task>
  SCH_Add_Task(&timerRun, 10, 10);
 8000b50:	220a      	movs	r2, #10
 8000b52:	210a      	movs	r1, #10
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <main+0x54>)
 8000b56:	f000 f8df 	bl	8000d18 <SCH_Add_Task>
  SCH_Add_Task(&fsm_multi_mode_run, 20, 10);
 8000b5a:	220a      	movs	r2, #10
 8000b5c:	2114      	movs	r1, #20
 8000b5e:	4808      	ldr	r0, [pc, #32]	; (8000b80 <main+0x58>)
 8000b60:	f000 f8da 	bl	8000d18 <SCH_Add_Task>
  SCH_Add_Task(&fsm_for_pedestrian, 30, 10);
 8000b64:	220a      	movs	r2, #10
 8000b66:	211e      	movs	r1, #30
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <main+0x5c>)
 8000b6a:	f000 f8d5 	bl	8000d18 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCH_Dispatch_Tasks();
 8000b6e:	f000 fa5f 	bl	8001030 <SCH_Dispatch_Tasks>
 8000b72:	e7fc      	b.n	8000b6e <main+0x46>
 8000b74:	20000450 	.word	0x20000450
 8000b78:	08000981 	.word	0x08000981
 8000b7c:	08001171 	.word	0x08001171
 8000b80:	0800014d 	.word	0x0800014d
 8000b84:	0800064d 	.word	0x0800064d

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b090      	sub	sp, #64	; 0x40
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	2228      	movs	r2, #40	; 0x28
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fe10 	bl	80037bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bbe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 f963 	bl	8001e94 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bd4:	f000 f823 	bl	8000c1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fbd0 	bl	8002398 <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bfe:	f000 f80e 	bl	8000c1e <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3740      	adds	r7, #64	; 0x40
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int count = 100;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000c12:	f000 fa43 	bl	800109c <SCH_Update>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c22:	b672      	cpsid	i
}
 8000c24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <Error_Handler+0x8>

08000c28 <pedestrianLightBlinkGrn>:
uint16_t pedestrianLightPin[NUM_OF_PORTS] = {
		D6_Pin,
		D7_Pin
};

void pedestrianLightBlinkGrn(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT]);
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <pedestrianLightBlinkGrn+0x28>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <pedestrianLightBlinkGrn+0x2c>)
 8000c32:	8852      	ldrh	r2, [r2, #2]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 f8f1 	bl	8001e1e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <pedestrianLightBlinkGrn+0x28>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <pedestrianLightBlinkGrn+0x2c>)
 8000c42:	8811      	ldrh	r1, [r2, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 f8d1 	bl	8001dee <HAL_GPIO_WritePin>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000038 	.word	0x20000038
 8000c54:	20000040 	.word	0x20000040

08000c58 <pedestrianLightBlinkRed>:

void pedestrianLightBlinkRed(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT]);
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <pedestrianLightBlinkRed+0x28>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <pedestrianLightBlinkRed+0x2c>)
 8000c62:	8812      	ldrh	r2, [r2, #0]
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 f8d9 	bl	8001e1e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <pedestrianLightBlinkRed+0x28>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <pedestrianLightBlinkRed+0x2c>)
 8000c72:	8851      	ldrh	r1, [r2, #2]
 8000c74:	2200      	movs	r2, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f8b9 	bl	8001dee <HAL_GPIO_WritePin>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000038 	.word	0x20000038
 8000c84:	20000040 	.word	0x20000040

08000c88 <pedestrianLightGrn>:

void pedestrianLightGrn(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], ON);
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <pedestrianLightGrn+0x28>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <pedestrianLightGrn+0x2c>)
 8000c92:	8851      	ldrh	r1, [r2, #2]
 8000c94:	2201      	movs	r2, #1
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 f8a9 	bl	8001dee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <pedestrianLightGrn+0x28>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <pedestrianLightGrn+0x2c>)
 8000ca2:	8811      	ldrh	r1, [r2, #0]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 f8a1 	bl	8001dee <HAL_GPIO_WritePin>
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000038 	.word	0x20000038
 8000cb4:	20000040 	.word	0x20000040

08000cb8 <pedestrianLightRed>:

void pedestrianLightRed(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], ON);
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <pedestrianLightRed+0x28>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <pedestrianLightRed+0x2c>)
 8000cc2:	8811      	ldrh	r1, [r2, #0]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 f891 	bl	8001dee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <pedestrianLightRed+0x28>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <pedestrianLightRed+0x2c>)
 8000cd2:	8851      	ldrh	r1, [r2, #2]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 f889 	bl	8001dee <HAL_GPIO_WritePin>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000038 	.word	0x20000038
 8000ce4:	20000040 	.word	0x20000040

08000ce8 <pedestrianLightOff>:

void pedestrianLightOff(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <pedestrianLightOff+0x28>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <pedestrianLightOff+0x2c>)
 8000cf2:	8851      	ldrh	r1, [r2, #2]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 f879 	bl	8001dee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <pedestrianLightOff+0x28>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <pedestrianLightOff+0x2c>)
 8000d02:	8811      	ldrh	r1, [r2, #0]
 8000d04:	2200      	movs	r2, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 f871 	bl	8001dee <HAL_GPIO_WritePin>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000038 	.word	0x20000038
 8000d14:	20000040 	.word	0x20000040

08000d18 <SCH_Add_Task>:
		SCH_tasks_G[Index].Period = 0;
		SCH_tasks_G[Index].RunMe = 0;
	}
}

uint32_t SCH_Add_Task(void (* pFunction)(void), uint32_t DELAY, uint32_t PERIOD) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	if(Size == SCH_MAX_TASKS - 1) return SCH_MAX_TASKS;
 8000d24:	4b7b      	ldr	r3, [pc, #492]	; (8000f14 <SCH_Add_Task+0x1fc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b27      	cmp	r3, #39	; 0x27
 8000d2a:	d101      	bne.n	8000d30 <SCH_Add_Task+0x18>
 8000d2c:	2328      	movs	r3, #40	; 0x28
 8000d2e:	e0ec      	b.n	8000f0a <SCH_Add_Task+0x1f2>

	uint8_t flag = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	77fb      	strb	r3, [r7, #31]
	uint32_t Index = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
	if(SYSTEM_DELAY > 0) {
		DELAY /= SYSTEM_DELAY;
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4a77      	ldr	r2, [pc, #476]	; (8000f18 <SCH_Add_Task+0x200>)
 8000d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d40:	08db      	lsrs	r3, r3, #3
 8000d42:	60bb      	str	r3, [r7, #8]
	}
	for(; Index < Size && flag == 0; Index++) {
 8000d44:	e031      	b.n	8000daa <SCH_Add_Task+0x92>
		if(DELAY > SCH_tasks_G[Index].Delay) {
 8000d46:	4975      	ldr	r1, [pc, #468]	; (8000f1c <SCH_Add_Task+0x204>)
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	3304      	adds	r3, #4
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d90c      	bls.n	8000d78 <SCH_Add_Task+0x60>
			DELAY -= SCH_tasks_G[Index].Delay;
 8000d5e:	496f      	ldr	r1, [pc, #444]	; (8000f1c <SCH_Add_Task+0x204>)
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	e015      	b.n	8000da4 <SCH_Add_Task+0x8c>
		}
		else {
			flag = 1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	77fb      	strb	r3, [r7, #31]
			SCH_tasks_G[Index].Delay -= DELAY;
 8000d7c:	4967      	ldr	r1, [pc, #412]	; (8000f1c <SCH_Add_Task+0x204>)
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad1      	subs	r1, r2, r3
 8000d92:	4862      	ldr	r0, [pc, #392]	; (8000f1c <SCH_Add_Task+0x204>)
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4403      	add	r3, r0
 8000da0:	3304      	adds	r3, #4
 8000da2:	6019      	str	r1, [r3, #0]
	for(; Index < Size && flag == 0; Index++) {
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	3301      	adds	r3, #1
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	4b5a      	ldr	r3, [pc, #360]	; (8000f14 <SCH_Add_Task+0x1fc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d202      	bcs.n	8000dba <SCH_Add_Task+0xa2>
 8000db4:	7ffb      	ldrb	r3, [r7, #31]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0c5      	beq.n	8000d46 <SCH_Add_Task+0x2e>
		}
	}
	if(flag == 1) {
 8000dba:	7ffb      	ldrb	r3, [r7, #31]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d16d      	bne.n	8000e9c <SCH_Add_Task+0x184>
		Index -= 1;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
		for(uint32_t Temp = Size; Temp > Index; Temp--) {
 8000dc6:	4b53      	ldr	r3, [pc, #332]	; (8000f14 <SCH_Add_Task+0x1fc>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	e062      	b.n	8000e94 <SCH_Add_Task+0x17c>
			SCH_tasks_G[Temp].pTask = SCH_tasks_G[Temp - 1].pTask;
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	4952      	ldr	r1, [pc, #328]	; (8000f1c <SCH_Add_Task+0x204>)
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	484e      	ldr	r0, [pc, #312]	; (8000f1c <SCH_Add_Task+0x204>)
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4403      	add	r3, r0
 8000dee:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[Temp].Delay = SCH_tasks_G[Temp - 1].Delay;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	4949      	ldr	r1, [pc, #292]	; (8000f1c <SCH_Add_Task+0x204>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	440b      	add	r3, r1
 8000e00:	3304      	adds	r3, #4
 8000e02:	6819      	ldr	r1, [r3, #0]
 8000e04:	4845      	ldr	r0, [pc, #276]	; (8000f1c <SCH_Add_Task+0x204>)
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4403      	add	r3, r0
 8000e12:	3304      	adds	r3, #4
 8000e14:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[Temp].Period = SCH_tasks_G[Temp - 1].Period;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	1e5a      	subs	r2, r3, #1
 8000e1a:	4940      	ldr	r1, [pc, #256]	; (8000f1c <SCH_Add_Task+0x204>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	3308      	adds	r3, #8
 8000e28:	6819      	ldr	r1, [r3, #0]
 8000e2a:	483c      	ldr	r0, [pc, #240]	; (8000f1c <SCH_Add_Task+0x204>)
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4403      	add	r3, r0
 8000e38:	3308      	adds	r3, #8
 8000e3a:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[Temp].RunMe = SCH_tasks_G[Temp - 1].RunMe;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	4936      	ldr	r1, [pc, #216]	; (8000f1c <SCH_Add_Task+0x204>)
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	330c      	adds	r3, #12
 8000e4e:	7818      	ldrb	r0, [r3, #0]
 8000e50:	4932      	ldr	r1, [pc, #200]	; (8000f1c <SCH_Add_Task+0x204>)
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	330c      	adds	r3, #12
 8000e60:	4602      	mov	r2, r0
 8000e62:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[Temp].TaskID = SCH_tasks_G[Temp - 1].RunMe + 1;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	1e5a      	subs	r2, r3, #1
 8000e68:	492c      	ldr	r1, [pc, #176]	; (8000f1c <SCH_Add_Task+0x204>)
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	330c      	adds	r3, #12
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	4927      	ldr	r1, [pc, #156]	; (8000f1c <SCH_Add_Task+0x204>)
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	3310      	adds	r3, #16
 8000e8c:	6018      	str	r0, [r3, #0]
		for(uint32_t Temp = Size; Temp > Index; Temp--) {
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d898      	bhi.n	8000dce <SCH_Add_Task+0xb6>
		}
	}
	SCH_tasks_G[Index].pTask = pFunction;
 8000e9c:	491f      	ldr	r1, [pc, #124]	; (8000f1c <SCH_Add_Task+0x204>)
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 8000eae:	491b      	ldr	r1, [pc, #108]	; (8000f1c <SCH_Add_Task+0x204>)
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 8000ec2:	4916      	ldr	r1, [pc, #88]	; (8000f1c <SCH_Add_Task+0x204>)
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 8000ed6:	4911      	ldr	r1, [pc, #68]	; (8000f1c <SCH_Add_Task+0x204>)
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[Index].TaskID = Index;
 8000eea:	490c      	ldr	r1, [pc, #48]	; (8000f1c <SCH_Add_Task+0x204>)
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3310      	adds	r3, #16
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	601a      	str	r2, [r3, #0]

	Size += 1;
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SCH_Add_Task+0x1fc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <SCH_Add_Task+0x1fc>)
 8000f06:	6013      	str	r3, [r2, #0]

	return Index;
 8000f08:	69bb      	ldr	r3, [r7, #24]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	20000430 	.word	0x20000430
 8000f18:	cccccccd 	.word	0xcccccccd
 8000f1c:	2000010c 	.word	0x2000010c

08000f20 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t TASK_INDEX) {
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[TASK_INDEX].pTask == 0) return;
 8000f28:	493f      	ldr	r1, [pc, #252]	; (8001028 <SCH_Delete_Task+0x108>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d070      	beq.n	800101e <SCH_Delete_Task+0xfe>

	for(uint32_t Temp = TASK_INDEX; Temp < Size - 1; Temp++) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e061      	b.n	8001006 <SCH_Delete_Task+0xe6>
		SCH_tasks_G[Temp].pTask = SCH_tasks_G[Temp + 1].pTask;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	4938      	ldr	r1, [pc, #224]	; (8001028 <SCH_Delete_Task+0x108>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	6819      	ldr	r1, [r3, #0]
 8000f54:	4834      	ldr	r0, [pc, #208]	; (8001028 <SCH_Delete_Task+0x108>)
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4403      	add	r3, r0
 8000f62:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Temp].Delay = SCH_tasks_G[Temp + 1].Delay;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	492f      	ldr	r1, [pc, #188]	; (8001028 <SCH_Delete_Task+0x108>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	3304      	adds	r3, #4
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	482b      	ldr	r0, [pc, #172]	; (8001028 <SCH_Delete_Task+0x108>)
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4403      	add	r3, r0
 8000f86:	3304      	adds	r3, #4
 8000f88:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Temp].Period = SCH_tasks_G[Temp + 1].Period;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	4926      	ldr	r1, [pc, #152]	; (8001028 <SCH_Delete_Task+0x108>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	3308      	adds	r3, #8
 8000f9c:	6819      	ldr	r1, [r3, #0]
 8000f9e:	4822      	ldr	r0, [pc, #136]	; (8001028 <SCH_Delete_Task+0x108>)
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4403      	add	r3, r0
 8000fac:	3308      	adds	r3, #8
 8000fae:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Temp].RunMe = SCH_tasks_G[Temp + 1].RunMe;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	491c      	ldr	r1, [pc, #112]	; (8001028 <SCH_Delete_Task+0x108>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	7818      	ldrb	r0, [r3, #0]
 8000fc4:	4918      	ldr	r1, [pc, #96]	; (8001028 <SCH_Delete_Task+0x108>)
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	330c      	adds	r3, #12
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[Temp].TaskID = SCH_tasks_G[Temp + 1].TaskID - 1;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	4912      	ldr	r1, [pc, #72]	; (8001028 <SCH_Delete_Task+0x108>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3310      	adds	r3, #16
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	1e59      	subs	r1, r3, #1
 8000fee:	480e      	ldr	r0, [pc, #56]	; (8001028 <SCH_Delete_Task+0x108>)
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4403      	add	r3, r0
 8000ffc:	3310      	adds	r3, #16
 8000ffe:	6019      	str	r1, [r3, #0]
	for(uint32_t Temp = TASK_INDEX; Temp < Size - 1; Temp++) {
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3301      	adds	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <SCH_Delete_Task+0x10c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3b01      	subs	r3, #1
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	d397      	bcc.n	8000f42 <SCH_Delete_Task+0x22>
	}

	Size -= 1;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <SCH_Delete_Task+0x10c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <SCH_Delete_Task+0x10c>)
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	e000      	b.n	8001020 <SCH_Delete_Task+0x100>
	if(SCH_tasks_G[TASK_INDEX].pTask == 0) return;
 800101e:	bf00      	nop
}
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	2000010c 	.word	0x2000010c
 800102c:	20000430 	.word	0x20000430

08001030 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001030:	b598      	push	{r3, r4, r7, lr}
 8001032:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe == 1) {
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <SCH_Dispatch_Tasks+0x64>)
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d129      	bne.n	8001090 <SCH_Dispatch_Tasks+0x60>
		(*SCH_tasks_G[0].pTask)();
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <SCH_Dispatch_Tasks+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4798      	blx	r3

		if(SCH_tasks_G[0].Period > 0) {
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <SCH_Dispatch_Tasks+0x64>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d01f      	beq.n	800108a <SCH_Dispatch_Tasks+0x5a>
			SCH_Add_Task(SCH_tasks_G[Current].pTask, SCH_tasks_G[Current].Period, SCH_tasks_G[Current].Period);
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <SCH_Dispatch_Tasks+0x68>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4911      	ldr	r1, [pc, #68]	; (8001094 <SCH_Dispatch_Tasks+0x64>)
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <SCH_Dispatch_Tasks+0x68>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <SCH_Dispatch_Tasks+0x64>)
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	3308      	adds	r3, #8
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <SCH_Dispatch_Tasks+0x68>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4c07      	ldr	r4, [pc, #28]	; (8001094 <SCH_Dispatch_Tasks+0x64>)
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4423      	add	r3, r4
 8001080:	3308      	adds	r3, #8
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	f7ff fe47 	bl	8000d18 <SCH_Add_Task>
		}

		SCH_Delete_Task(0);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff ff48 	bl	8000f20 <SCH_Delete_Task>
	}
}
 8001090:	bf00      	nop
 8001092:	bd98      	pop	{r3, r4, r7, pc}
 8001094:	2000010c 	.word	0x2000010c
 8001098:	2000042c 	.word	0x2000042c

0800109c <SCH_Update>:

void SCH_Update(void) {
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].Delay == 0) {
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <SCH_Update+0x28>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <SCH_Update+0x14>
		SCH_tasks_G[0].RunMe = 1;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <SCH_Update+0x28>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	731a      	strb	r2, [r3, #12]
	}
	else {
		SCH_tasks_G[0].Delay--;
	}
}
 80010ae:	e004      	b.n	80010ba <SCH_Update+0x1e>
		SCH_tasks_G[0].Delay--;
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SCH_Update+0x28>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <SCH_Update+0x28>)
 80010b8:	6053      	str	r3, [r2, #4]
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000010c 	.word	0x2000010c

080010c8 <setTimer1>:
int timer2_flag = 0;

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer1_counter = duration / SYSTEM_DELAY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <setTimer1+0x2c>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1092      	asrs	r2, r2, #2
 80010da:	17db      	asrs	r3, r3, #31
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <setTimer1+0x30>)
 80010e0:	6013      	str	r3, [r2, #0]
	} else timer1_counter = duration;
	timer1_flag = 0;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <setTimer1+0x34>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	66666667 	.word	0x66666667
 80010f8:	20000434 	.word	0x20000434
 80010fc:	20000438 	.word	0x20000438

08001100 <setTimer2>:

void setTimer2(int duration) {
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer2_counter = duration / SYSTEM_DELAY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <setTimer2+0x2c>)
 800110c:	fb82 1203 	smull	r1, r2, r2, r3
 8001110:	1092      	asrs	r2, r2, #2
 8001112:	17db      	asrs	r3, r3, #31
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	4a06      	ldr	r2, [pc, #24]	; (8001130 <setTimer2+0x30>)
 8001118:	6013      	str	r3, [r2, #0]
	} else timer2_counter = duration;
	timer2_flag = 0;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <setTimer2+0x34>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	66666667 	.word	0x66666667
 8001130:	2000043c 	.word	0x2000043c
 8001134:	20000440 	.word	0x20000440

08001138 <setTimer3>:


void setTimer3(int duration) {
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer3_counter = duration / SYSTEM_DELAY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <setTimer3+0x2c>)
 8001144:	fb82 1203 	smull	r1, r2, r2, r3
 8001148:	1092      	asrs	r2, r2, #2
 800114a:	17db      	asrs	r3, r3, #31
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	4a06      	ldr	r2, [pc, #24]	; (8001168 <setTimer3+0x30>)
 8001150:	6013      	str	r3, [r2, #0]
	} else timer3_counter = duration;
	timer3_flag = 0;
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <setTimer3+0x34>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	66666667 	.word	0x66666667
 8001168:	20000444 	.word	0x20000444
 800116c:	20000448 	.word	0x20000448

08001170 <timerRun>:

void timerRun(void) {
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <timerRun+0x6c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	dd0b      	ble.n	8001194 <timerRun+0x24>
		timer1_counter--;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <timerRun+0x6c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	4a16      	ldr	r2, [pc, #88]	; (80011dc <timerRun+0x6c>)
 8001184:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <timerRun+0x6c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	dc02      	bgt.n	8001194 <timerRun+0x24>
			timer1_flag = 1;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <timerRun+0x70>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <timerRun+0x74>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	dd0b      	ble.n	80011b4 <timerRun+0x44>
		timer2_counter--;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <timerRun+0x74>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <timerRun+0x74>)
 80011a4:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <timerRun+0x74>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dc02      	bgt.n	80011b4 <timerRun+0x44>
			timer2_flag = 1;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <timerRun+0x78>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <timerRun+0x7c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dd0b      	ble.n	80011d4 <timerRun+0x64>
		timer3_counter--;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <timerRun+0x7c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <timerRun+0x7c>)
 80011c4:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <timerRun+0x7c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dc02      	bgt.n	80011d4 <timerRun+0x64>
			timer3_flag = 1;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <timerRun+0x80>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000434 	.word	0x20000434
 80011e0:	20000438 	.word	0x20000438
 80011e4:	2000043c 	.word	0x2000043c
 80011e8:	20000440 	.word	0x20000440
 80011ec:	20000444 	.word	0x20000444
 80011f0:	20000448 	.word	0x20000448

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_MspInit+0x5c>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_MspInit+0x5c>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_MspInit+0x5c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_MspInit+0x5c>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <HAL_MspInit+0x5c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_MspInit+0x60>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_MspInit+0x60>)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129e:	f000 fae1 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM3_IRQHandler+0x10>)
 80012ae:	f001 fb05 	bl	80028bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000450 	.word	0x20000450

080012bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012c4:	f000 fdc4 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f002 fa34 	bl	8003768 <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20005000 	.word	0x20005000
 800132c:	00000400 	.word	0x00000400
 8001330:	2000044c 	.word	0x2000044c
 8001334:	200004f0 	.word	0x200004f0

08001338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <MX_TIM3_Init+0xe4>)
 8001376:	4a2d      	ldr	r2, [pc, #180]	; (800142c <MX_TIM3_Init+0xe8>)
 8001378:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <MX_TIM3_Init+0xe4>)
 800137c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <MX_TIM3_Init+0xe4>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <MX_TIM3_Init+0xe4>)
 800138a:	2263      	movs	r2, #99	; 0x63
 800138c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <MX_TIM3_Init+0xe4>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <MX_TIM3_Init+0xe4>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800139a:	4823      	ldr	r0, [pc, #140]	; (8001428 <MX_TIM3_Init+0xe4>)
 800139c:	f001 f994 	bl	80026c8 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013a6:	f7ff fc3a 	bl	8000c1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b4:	4619      	mov	r1, r3
 80013b6:	481c      	ldr	r0, [pc, #112]	; (8001428 <MX_TIM3_Init+0xe4>)
 80013b8:	f001 fc46 	bl	8002c48 <HAL_TIM_ConfigClockSource>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013c2:	f7ff fc2c 	bl	8000c1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013c6:	4818      	ldr	r0, [pc, #96]	; (8001428 <MX_TIM3_Init+0xe4>)
 80013c8:	f001 fa20 	bl	800280c <HAL_TIM_PWM_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013d2:	f7ff fc24 	bl	8000c1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4619      	mov	r1, r3
 80013e4:	4810      	ldr	r0, [pc, #64]	; (8001428 <MX_TIM3_Init+0xe4>)
 80013e6:	f001 ff97 	bl	8003318 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013f0:	f7ff fc15 	bl	8000c1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f4:	2360      	movs	r3, #96	; 0x60
 80013f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	4619      	mov	r1, r3
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <MX_TIM3_Init+0xe4>)
 800140c:	f001 fb5e 	bl	8002acc <HAL_TIM_PWM_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001416:	f7ff fc02 	bl	8000c1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <MX_TIM3_Init+0xe4>)
 800141c:	f000 f82e 	bl	800147c <HAL_TIM_MspPostInit>

}
 8001420:	bf00      	nop
 8001422:	3738      	adds	r7, #56	; 0x38
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000450 	.word	0x20000450
 800142c:	40000400 	.word	0x40000400

08001430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <HAL_TIM_Base_MspInit+0x44>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d113      	bne.n	800146a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_TIM_Base_MspInit+0x48>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <HAL_TIM_Base_MspInit+0x48>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_TIM_Base_MspInit+0x48>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	201d      	movs	r0, #29
 8001460:	f000 faf3 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001464:	201d      	movs	r0, #29
 8001466:	f000 fb0c 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40000400 	.word	0x40000400
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_TIM_MspPostInit+0x7c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d129      	bne.n	80014f0 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_TIM_MspPostInit+0x80>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a16      	ldr	r2, [pc, #88]	; (80014fc <HAL_TIM_MspPostInit+0x80>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_TIM_MspPostInit+0x80>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014b4:	2340      	movs	r3, #64	; 0x40
 80014b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	480e      	ldr	r0, [pc, #56]	; (8001500 <HAL_TIM_MspPostInit+0x84>)
 80014c8:	f000 faf6 	bl	8001ab8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_TIM_MspPostInit+0x88>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_TIM_MspPostInit+0x88>)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40000400 	.word	0x40000400
 80014fc:	40021000 	.word	0x40021000
 8001500:	40011000 	.word	0x40011000
 8001504:	40010000 	.word	0x40010000

08001508 <trafficLightBlinkGrn>:
uint16_t trafficLightPin[NUM_OF_TRAFFIC_LIGHTS][NUM_OF_PORTS] = {
		{D2_Pin, D3_Pin},
		{D4_Pin, D5_Pin}
};

void trafficLightBlinkGrn(int index) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT]);
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <trafficLightBlinkGrn+0x44>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	490d      	ldr	r1, [pc, #52]	; (8001550 <trafficLightBlinkGrn+0x48>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	885b      	ldrh	r3, [r3, #2]
 8001524:	4619      	mov	r1, r3
 8001526:	4610      	mov	r0, r2
 8001528:	f000 fc79 	bl	8001e1e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], OFF);
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <trafficLightBlinkGrn+0x44>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <trafficLightBlinkGrn+0x48>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	f000 fc55 	bl	8001dee <HAL_GPIO_WritePin>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000048 	.word	0x20000048
 8001550:	20000058 	.word	0x20000058

08001554 <trafficLightBlinkYel>:

void trafficLightBlinkYel(int index) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT]);
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <trafficLightBlinkYel+0x44>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	490d      	ldr	r1, [pc, #52]	; (800159c <trafficLightBlinkYel+0x48>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	885b      	ldrh	r3, [r3, #2]
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f000 fc53 	bl	8001e1e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT]);
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <trafficLightBlinkYel+0x44>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001580:	4906      	ldr	r1, [pc, #24]	; (800159c <trafficLightBlinkYel+0x48>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f000 fc47 	bl	8001e1e <HAL_GPIO_TogglePin>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000048 	.word	0x20000048
 800159c:	20000058 	.word	0x20000058

080015a0 <trafficLightGrn>:
void trafficLightBlinkRed(int index) {
	HAL_GPIO_TogglePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT]);
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], OFF);
}

void trafficLightGrn(int index) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], ON);
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <trafficLightGrn+0x44>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4413      	add	r3, r2
 80015b0:	6858      	ldr	r0, [r3, #4]
 80015b2:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <trafficLightGrn+0x48>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	885b      	ldrh	r3, [r3, #2]
 80015bc:	2201      	movs	r2, #1
 80015be:	4619      	mov	r1, r3
 80015c0:	f000 fc15 	bl	8001dee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], OFF);
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <trafficLightGrn+0x44>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <trafficLightGrn+0x48>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	f000 fc09 	bl	8001dee <HAL_GPIO_WritePin>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000048 	.word	0x20000048
 80015e8:	20000058 	.word	0x20000058

080015ec <trafficLightYel>:

void trafficLightYel(int index) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], ON);
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <trafficLightYel+0x44>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	6858      	ldr	r0, [r3, #4]
 80015fe:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <trafficLightYel+0x48>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	885b      	ldrh	r3, [r3, #2]
 8001608:	2201      	movs	r2, #1
 800160a:	4619      	mov	r1, r3
 800160c:	f000 fbef 	bl	8001dee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], ON);
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <trafficLightYel+0x44>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001618:	4a06      	ldr	r2, [pc, #24]	; (8001634 <trafficLightYel+0x48>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001620:	2201      	movs	r2, #1
 8001622:	4619      	mov	r1, r3
 8001624:	f000 fbe3 	bl	8001dee <HAL_GPIO_WritePin>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000048 	.word	0x20000048
 8001634:	20000058 	.word	0x20000058

08001638 <trafficLightRed>:

void trafficLightRed(int index) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], ON);
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <trafficLightRed+0x44>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <trafficLightRed+0x48>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	f000 fbcb 	bl	8001dee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], OFF);
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <trafficLightRed+0x44>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	6858      	ldr	r0, [r3, #4]
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <trafficLightRed+0x48>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	885b      	ldrh	r3, [r3, #2]
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	f000 fbbd 	bl	8001dee <HAL_GPIO_WritePin>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000048 	.word	0x20000048
 8001680:	20000058 	.word	0x20000058

08001684 <displayCountdown>:
 */


#include "uart_communication.h"

void displayCountdown(int value) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b090      	sub	sp, #64	; 0x40
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	char str[50];
	HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "!7SEG=%d#\r\n", value), 1000);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <displayCountdown+0x30>)
 8001694:	4618      	mov	r0, r3
 8001696:	f002 f899 	bl	80037cc <siprintf>
 800169a:	4603      	mov	r3, r0
 800169c:	b29a      	uxth	r2, r3
 800169e:	f107 010c 	add.w	r1, r7, #12
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	4804      	ldr	r0, [pc, #16]	; (80016b8 <displayCountdown+0x34>)
 80016a8:	f001 fef3 	bl	8003492 <HAL_UART_Transmit>
}
 80016ac:	bf00      	nop
 80016ae:	3740      	adds	r7, #64	; 0x40
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	080040d8 	.word	0x080040d8
 80016b8:	20000498 	.word	0x20000498

080016bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART2_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f001 fe80 	bl	80033f8 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f7ff fa8e 	bl	8000c1e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000498 	.word	0x20000498
 800170c:	40004400 	.word	0x40004400

08001710 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <HAL_UART_MspInit+0x70>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d123      	bne.n	8001778 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_UART_MspInit+0x74>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4a13      	ldr	r2, [pc, #76]	; (8001784 <HAL_UART_MspInit+0x74>)
 8001736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173a:	61d3      	str	r3, [r2, #28]
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_UART_MspInit+0x74>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_UART_MspInit+0x74>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_UART_MspInit+0x74>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_UART_MspInit+0x74>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001760:	230c      	movs	r3, #12
 8001762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2302      	movs	r3, #2
 800176a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4619      	mov	r1, r3
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <HAL_UART_MspInit+0x78>)
 8001774:	f000 f9a0 	bl	8001ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40004400 	.word	0x40004400
 8001784:	40021000 	.word	0x40021000
 8001788:	40010800 	.word	0x40010800

0800178c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	; (80017d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017b2:	f7ff fdc1 	bl	8001338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f001 ffdd 	bl	8003774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff f9b5 	bl	8000b28 <main>
  bx lr
 80017be:	4770      	bx	lr
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80017c8:	08004148 	.word	0x08004148
  ldr r2, =_sbss
 80017cc:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80017d0:	200004f0 	.word	0x200004f0

080017d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_2_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_Init+0x28>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_Init+0x28>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 f923 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fcfe 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f93b 	bl	8001a9e <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f903 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000044 	.word	0x20000044
 800185c:	20000064 	.word	0x20000064
 8001860:	20000060 	.word	0x20000060

08001864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_IncTick+0x1c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_IncTick+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a03      	ldr	r2, [pc, #12]	; (8001884 <HAL_IncTick+0x20>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	20000064 	.word	0x20000064
 8001884:	200004dc 	.word	0x200004dc

08001888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b02      	ldr	r3, [pc, #8]	; (8001898 <HAL_GetTick+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	200004dc 	.word	0x200004dc

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4906      	ldr	r1, [pc, #24]	; (8001934 <__NVIC_EnableIRQ+0x34>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	; 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff90 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff2d 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5c:	f7ff ff42 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff ff90 	bl	800198c <NVIC_EncodePriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff5f 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff35 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffa2 	bl	80019f0 <SysTick_Config>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b08b      	sub	sp, #44	; 0x2c
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aca:	e169      	b.n	8001da0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001acc:	2201      	movs	r2, #1
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f040 8158 	bne.w	8001d9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a9a      	ldr	r2, [pc, #616]	; (8001d58 <HAL_GPIO_Init+0x2a0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d05e      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001af4:	4a98      	ldr	r2, [pc, #608]	; (8001d58 <HAL_GPIO_Init+0x2a0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d875      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001afa:	4a98      	ldr	r2, [pc, #608]	; (8001d5c <HAL_GPIO_Init+0x2a4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d058      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b00:	4a96      	ldr	r2, [pc, #600]	; (8001d5c <HAL_GPIO_Init+0x2a4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d86f      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b06:	4a96      	ldr	r2, [pc, #600]	; (8001d60 <HAL_GPIO_Init+0x2a8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d052      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b0c:	4a94      	ldr	r2, [pc, #592]	; (8001d60 <HAL_GPIO_Init+0x2a8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d869      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b12:	4a94      	ldr	r2, [pc, #592]	; (8001d64 <HAL_GPIO_Init+0x2ac>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d04c      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b18:	4a92      	ldr	r2, [pc, #584]	; (8001d64 <HAL_GPIO_Init+0x2ac>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d863      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b1e:	4a92      	ldr	r2, [pc, #584]	; (8001d68 <HAL_GPIO_Init+0x2b0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d046      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b24:	4a90      	ldr	r2, [pc, #576]	; (8001d68 <HAL_GPIO_Init+0x2b0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d85d      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b2a:	2b12      	cmp	r3, #18
 8001b2c:	d82a      	bhi.n	8001b84 <HAL_GPIO_Init+0xcc>
 8001b2e:	2b12      	cmp	r3, #18
 8001b30:	d859      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b32:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <HAL_GPIO_Init+0x80>)
 8001b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b38:	08001bb3 	.word	0x08001bb3
 8001b3c:	08001b8d 	.word	0x08001b8d
 8001b40:	08001b9f 	.word	0x08001b9f
 8001b44:	08001be1 	.word	0x08001be1
 8001b48:	08001be7 	.word	0x08001be7
 8001b4c:	08001be7 	.word	0x08001be7
 8001b50:	08001be7 	.word	0x08001be7
 8001b54:	08001be7 	.word	0x08001be7
 8001b58:	08001be7 	.word	0x08001be7
 8001b5c:	08001be7 	.word	0x08001be7
 8001b60:	08001be7 	.word	0x08001be7
 8001b64:	08001be7 	.word	0x08001be7
 8001b68:	08001be7 	.word	0x08001be7
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001be7 	.word	0x08001be7
 8001b74:	08001be7 	.word	0x08001be7
 8001b78:	08001be7 	.word	0x08001be7
 8001b7c:	08001b95 	.word	0x08001b95
 8001b80:	08001ba9 	.word	0x08001ba9
 8001b84:	4a79      	ldr	r2, [pc, #484]	; (8001d6c <HAL_GPIO_Init+0x2b4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b8a:	e02c      	b.n	8001be6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	623b      	str	r3, [r7, #32]
          break;
 8001b92:	e029      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	623b      	str	r3, [r7, #32]
          break;
 8001b9c:	e024      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e01f      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	330c      	adds	r3, #12
 8001bae:	623b      	str	r3, [r7, #32]
          break;
 8001bb0:	e01a      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	623b      	str	r3, [r7, #32]
          break;
 8001bbe:	e013      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc8:	2308      	movs	r3, #8
 8001bca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	611a      	str	r2, [r3, #16]
          break;
 8001bd2:	e009      	b.n	8001be8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	615a      	str	r2, [r3, #20]
          break;
 8001bde:	e003      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e000      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          break;
 8001be6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2bff      	cmp	r3, #255	; 0xff
 8001bec:	d801      	bhi.n	8001bf2 <HAL_GPIO_Init+0x13a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	e001      	b.n	8001bf6 <HAL_GPIO_Init+0x13e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2bff      	cmp	r3, #255	; 0xff
 8001bfc:	d802      	bhi.n	8001c04 <HAL_GPIO_Init+0x14c>
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	e002      	b.n	8001c0a <HAL_GPIO_Init+0x152>
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	3b08      	subs	r3, #8
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	210f      	movs	r1, #15
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	6a39      	ldr	r1, [r7, #32]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	431a      	orrs	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80b1 	beq.w	8001d9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c38:	4b4d      	ldr	r3, [pc, #308]	; (8001d70 <HAL_GPIO_Init+0x2b8>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a4c      	ldr	r2, [pc, #304]	; (8001d70 <HAL_GPIO_Init+0x2b8>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <HAL_GPIO_Init+0x2b8>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c50:	4a48      	ldr	r2, [pc, #288]	; (8001d74 <HAL_GPIO_Init+0x2bc>)
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a40      	ldr	r2, [pc, #256]	; (8001d78 <HAL_GPIO_Init+0x2c0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d013      	beq.n	8001ca4 <HAL_GPIO_Init+0x1ec>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a3f      	ldr	r2, [pc, #252]	; (8001d7c <HAL_GPIO_Init+0x2c4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00d      	beq.n	8001ca0 <HAL_GPIO_Init+0x1e8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a3e      	ldr	r2, [pc, #248]	; (8001d80 <HAL_GPIO_Init+0x2c8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d007      	beq.n	8001c9c <HAL_GPIO_Init+0x1e4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a3d      	ldr	r2, [pc, #244]	; (8001d84 <HAL_GPIO_Init+0x2cc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d101      	bne.n	8001c98 <HAL_GPIO_Init+0x1e0>
 8001c94:	2303      	movs	r3, #3
 8001c96:	e006      	b.n	8001ca6 <HAL_GPIO_Init+0x1ee>
 8001c98:	2304      	movs	r3, #4
 8001c9a:	e004      	b.n	8001ca6 <HAL_GPIO_Init+0x1ee>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e002      	b.n	8001ca6 <HAL_GPIO_Init+0x1ee>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_GPIO_Init+0x1ee>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca8:	f002 0203 	and.w	r2, r2, #3
 8001cac:	0092      	lsls	r2, r2, #2
 8001cae:	4093      	lsls	r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cb6:	492f      	ldr	r1, [pc, #188]	; (8001d74 <HAL_GPIO_Init+0x2bc>)
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	492c      	ldr	r1, [pc, #176]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cde:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4928      	ldr	r1, [pc, #160]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4922      	ldr	r1, [pc, #136]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	e006      	b.n	8001d14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	491e      	ldr	r1, [pc, #120]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4918      	ldr	r1, [pc, #96]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4914      	ldr	r1, [pc, #80]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d021      	beq.n	8001d8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	490e      	ldr	r1, [pc, #56]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60cb      	str	r3, [r1, #12]
 8001d54:	e021      	b.n	8001d9a <HAL_GPIO_Init+0x2e2>
 8001d56:	bf00      	nop
 8001d58:	10320000 	.word	0x10320000
 8001d5c:	10310000 	.word	0x10310000
 8001d60:	10220000 	.word	0x10220000
 8001d64:	10210000 	.word	0x10210000
 8001d68:	10120000 	.word	0x10120000
 8001d6c:	10110000 	.word	0x10110000
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40010800 	.word	0x40010800
 8001d7c:	40010c00 	.word	0x40010c00
 8001d80:	40011000 	.word	0x40011000
 8001d84:	40011400 	.word	0x40011400
 8001d88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_GPIO_Init+0x304>)
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	4909      	ldr	r1, [pc, #36]	; (8001dbc <HAL_GPIO_Init+0x304>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f47f ae8e 	bne.w	8001acc <HAL_GPIO_Init+0x14>
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	372c      	adds	r7, #44	; 0x2c
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e001      	b.n	8001de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dfe:	787b      	ldrb	r3, [r7, #1]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e04:	887a      	ldrh	r2, [r7, #2]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e0a:	e003      	b.n	8001e14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	041a      	lsls	r2, r3, #16
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	611a      	str	r2, [r3, #16]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e30:	887a      	ldrh	r2, [r7, #2]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	041a      	lsls	r2, r3, #16
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	400b      	ands	r3, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	611a      	str	r2, [r3, #16]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f806 	bl	8001e80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e272      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8087 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb4:	4b92      	ldr	r3, [pc, #584]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d00c      	beq.n	8001eda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec0:	4b8f      	ldr	r3, [pc, #572]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d112      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5e>
 8001ecc:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eda:	4b89      	ldr	r3, [pc, #548]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d06c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x12c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d168      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e24c      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x76>
 8001efc:	4b80      	ldr	r3, [pc, #512]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a7f      	ldr	r2, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	e02e      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x98>
 8001f12:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7a      	ldr	r2, [pc, #488]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b78      	ldr	r3, [pc, #480]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a77      	ldr	r2, [pc, #476]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0xbc>
 8001f36:	4b72      	ldr	r3, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a71      	ldr	r2, [pc, #452]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f50:	4b6b      	ldr	r3, [pc, #428]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6a      	ldr	r2, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b68      	ldr	r3, [pc, #416]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a67      	ldr	r2, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fc8a 	bl	8001888 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fc86 	bl	8001888 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e200      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe4>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fc76 	bl	8001888 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fc72 	bl	8001888 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1ec      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x10c>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fce:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fda:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x18c>
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b43      	ldr	r3, [pc, #268]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x176>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1c0      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4939      	ldr	r1, [pc, #228]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e03a      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <HAL_RCC_OscConfig+0x270>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff fc2b 	bl	8001888 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002036:	f7ff fc27 	bl	8001888 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1a1      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4927      	ldr	r1, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <HAL_RCC_OscConfig+0x270>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fc0a 	bl	8001888 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002078:	f7ff fc06 	bl	8001888 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e180      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03a      	beq.n	8002118 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d019      	beq.n	80020de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <HAL_RCC_OscConfig+0x274>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff fbea 	bl	8001888 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff fbe6 	bl	8001888 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e160      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f000 fad8 	bl	800268c <RCC_Delay>
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_RCC_OscConfig+0x274>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7ff fbd0 	bl	8001888 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ea:	e00f      	b.n	800210c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7ff fbcc 	bl	8001888 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d908      	bls.n	800210c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e146      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	42420000 	.word	0x42420000
 8002108:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b92      	ldr	r3, [pc, #584]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e9      	bne.n	80020ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a6 	beq.w	8002272 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b8b      	ldr	r3, [pc, #556]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b88      	ldr	r3, [pc, #544]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a87      	ldr	r2, [pc, #540]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b85      	ldr	r3, [pc, #532]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	2301      	movs	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b82      	ldr	r3, [pc, #520]	; (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d118      	bne.n	8002190 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	4b7f      	ldr	r3, [pc, #508]	; (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7e      	ldr	r2, [pc, #504]	; (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216a:	f7ff fb8d 	bl	8001888 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7ff fb89 	bl	8001888 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b64      	cmp	r3, #100	; 0x64
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e103      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	4b75      	ldr	r3, [pc, #468]	; (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x312>
 8002198:	4b6f      	ldr	r3, [pc, #444]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a6e      	ldr	r2, [pc, #440]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e02d      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x334>
 80021ae:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a69      	ldr	r2, [pc, #420]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b67      	ldr	r3, [pc, #412]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a66      	ldr	r2, [pc, #408]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	e01c      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_OscConfig+0x356>
 80021d0:	4b61      	ldr	r3, [pc, #388]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a60      	ldr	r2, [pc, #384]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	4b5e      	ldr	r3, [pc, #376]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a5d      	ldr	r2, [pc, #372]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	e00b      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021ea:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a5a      	ldr	r2, [pc, #360]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	4b58      	ldr	r3, [pc, #352]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a57      	ldr	r2, [pc, #348]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d015      	beq.n	8002236 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff fb3d 	bl	8001888 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff fb39 	bl	8001888 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0b1      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002228:	4b4b      	ldr	r3, [pc, #300]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ee      	beq.n	8002212 <HAL_RCC_OscConfig+0x37e>
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7ff fb27 	bl	8001888 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7ff fb23 	bl	8001888 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e09b      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002254:	4b40      	ldr	r3, [pc, #256]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ee      	bne.n	800223e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002266:	4b3c      	ldr	r3, [pc, #240]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002270:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8087 	beq.w	800238a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b08      	cmp	r3, #8
 8002286:	d061      	beq.n	800234c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d146      	bne.n	800231e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCC_OscConfig+0x4cc>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff faf7 	bl	8001888 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7ff faf3 	bl	8001888 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e06d      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4921      	ldr	r1, [pc, #132]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d8:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a19      	ldr	r1, [r3, #32]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	430b      	orrs	r3, r1
 80022ea:	491b      	ldr	r1, [pc, #108]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x4cc>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fac7 	bl	8001888 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff fac3 	bl	8001888 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e03d      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x46a>
 800231c:	e035      	b.n	800238a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x4cc>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fab0 	bl	8001888 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff faac 	bl	8001888 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e026      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x498>
 800234a:	e01e      	b.n	800238a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e019      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
 8002360:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_OscConfig+0x500>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	429a      	cmp	r2, r3
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0d0      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d910      	bls.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b67      	ldr	r3, [pc, #412]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4965      	ldr	r1, [pc, #404]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b63      	ldr	r3, [pc, #396]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0b8      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a58      	ldr	r2, [pc, #352]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800240c:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a52      	ldr	r2, [pc, #328]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002416:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b50      	ldr	r3, [pc, #320]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	494d      	ldr	r1, [pc, #308]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d040      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d115      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07f      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b41      	ldr	r3, [pc, #260]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e073      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b3d      	ldr	r3, [pc, #244]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e06b      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4936      	ldr	r1, [pc, #216]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7ff f9fe 	bl	8001888 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7ff f9fa 	bl	8001888 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e053      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b27      	ldr	r3, [pc, #156]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d210      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0207 	bic.w	r2, r3, #7
 80024ce:	4922      	ldr	r1, [pc, #136]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e032      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4916      	ldr	r1, [pc, #88]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	490e      	ldr	r1, [pc, #56]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002526:	f000 f821 	bl	800256c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490a      	ldr	r1, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x1cc>)
 8002540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1d0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f95c 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000
 800255c:	40021000 	.word	0x40021000
 8002560:	080040f4 	.word	0x080040f4
 8002564:	20000044 	.word	0x20000044
 8002568:	20000060 	.word	0x20000060

0800256c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b490      	push	{r4, r7}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <HAL_RCC_GetSysClockFreq+0xac>)
 8002574:	1d3c      	adds	r4, r7, #4
 8002576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800257c:	f240 2301 	movw	r3, #513	; 0x201
 8002580:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002596:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x40>
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x46>
 80025aa:	e02b      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ae:	623b      	str	r3, [r7, #32]
      break;
 80025b0:	e02b      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	0c9b      	lsrs	r3, r3, #18
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3328      	adds	r3, #40	; 0x28
 80025bc:	443b      	add	r3, r7
 80025be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d012      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0c5b      	lsrs	r3, r3, #17
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	3328      	adds	r3, #40	; 0x28
 80025da:	443b      	add	r3, r7
 80025dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025e6:	fb03 f202 	mul.w	r2, r3, r2
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
 80025f2:	e004      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f8:	fb02 f303 	mul.w	r3, r2, r3
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	623b      	str	r3, [r7, #32]
      break;
 8002602:	e002      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002606:	623b      	str	r3, [r7, #32]
      break;
 8002608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260a:	6a3b      	ldr	r3, [r7, #32]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bc90      	pop	{r4, r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	080040e4 	.word	0x080040e4
 800261c:	40021000 	.word	0x40021000
 8002620:	007a1200 	.word	0x007a1200
 8002624:	003d0900 	.word	0x003d0900

08002628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800262c:	4b02      	ldr	r3, [pc, #8]	; (8002638 <HAL_RCC_GetHCLKFreq+0x10>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	20000044 	.word	0x20000044

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002640:	f7ff fff2 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4903      	ldr	r1, [pc, #12]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	08004104 	.word	0x08004104

08002664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002668:	f7ff ffde 	bl	8002628 <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	0adb      	lsrs	r3, r3, #11
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4903      	ldr	r1, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	08004104 	.word	0x08004104

0800268c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <RCC_Delay+0x34>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <RCC_Delay+0x38>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0a5b      	lsrs	r3, r3, #9
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026a8:	bf00      	nop
  }
  while (Delay --);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	60fa      	str	r2, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f9      	bne.n	80026a8 <RCC_Delay+0x1c>
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	20000044 	.word	0x20000044
 80026c4:	10624dd3 	.word	0x10624dd3

080026c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e041      	b.n	800275e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe fe9e 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f000 fb86 	bl	8002e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e03a      	b.n	80027f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HAL_TIM_Base_Start_IT+0x98>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00e      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x58>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027aa:	d009      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x58>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <HAL_TIM_Base_Start_IT+0x9c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x58>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a13      	ldr	r2, [pc, #76]	; (8002808 <HAL_TIM_Base_Start_IT+0xa0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d111      	bne.n	80027e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d010      	beq.n	80027f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e2:	e007      	b.n	80027f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800

0800280c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e041      	b.n	80028a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f839 	bl	80028aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f000 fae4 	bl	8002e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa6f 	bl	8002de2 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa62 	bl	8002dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fa71 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0204 	mvn.w	r2, #4
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fa45 	bl	8002de2 <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa38 	bl	8002dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fa47 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa1b 	bl	8002de2 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fa0e 	bl	8002dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fa1d 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2208      	movs	r2, #8
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f9f1 	bl	8002de2 <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f9e4 	bl	8002dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f9f3 	bl	8002df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe f8e5 	bl	8000c0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fcbd 	bl	80033e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d107      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f9b7 	bl	8002e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0220 	mvn.w	r2, #32
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fc88 	bl	80033d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0ac      	b.n	8002c40 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	f200 809f 	bhi.w	8002c34 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b31 	.word	0x08002b31
 8002b00:	08002c35 	.word	0x08002c35
 8002b04:	08002c35 	.word	0x08002c35
 8002b08:	08002c35 	.word	0x08002c35
 8002b0c:	08002b71 	.word	0x08002b71
 8002b10:	08002c35 	.word	0x08002c35
 8002b14:	08002c35 	.word	0x08002c35
 8002b18:	08002c35 	.word	0x08002c35
 8002b1c:	08002bb3 	.word	0x08002bb3
 8002b20:	08002c35 	.word	0x08002c35
 8002b24:	08002c35 	.word	0x08002c35
 8002b28:	08002c35 	.word	0x08002c35
 8002b2c:	08002bf3 	.word	0x08002bf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f9d0 	bl	8002edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0208 	orr.w	r2, r2, #8
 8002b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0204 	bic.w	r2, r2, #4
 8002b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6999      	ldr	r1, [r3, #24]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	619a      	str	r2, [r3, #24]
      break;
 8002b6e:	e062      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fa16 	bl	8002fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6999      	ldr	r1, [r3, #24]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	021a      	lsls	r2, r3, #8
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	619a      	str	r2, [r3, #24]
      break;
 8002bb0:	e041      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fa5f 	bl	800307c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0208 	orr.w	r2, r2, #8
 8002bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0204 	bic.w	r2, r2, #4
 8002bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69d9      	ldr	r1, [r3, #28]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	61da      	str	r2, [r3, #28]
      break;
 8002bf0:	e021      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 faa9 	bl	8003150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69d9      	ldr	r1, [r3, #28]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	021a      	lsls	r2, r3, #8
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	61da      	str	r2, [r3, #28]
      break;
 8002c32:	e000      	b.n	8002c36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_TIM_ConfigClockSource+0x18>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e0b3      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x180>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c98:	d03e      	beq.n	8002d18 <HAL_TIM_ConfigClockSource+0xd0>
 8002c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9e:	f200 8087 	bhi.w	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	f000 8085 	beq.w	8002db4 <HAL_TIM_ConfigClockSource+0x16c>
 8002caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cae:	d87f      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cb0:	2b70      	cmp	r3, #112	; 0x70
 8002cb2:	d01a      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0xa2>
 8002cb4:	2b70      	cmp	r3, #112	; 0x70
 8002cb6:	d87b      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cb8:	2b60      	cmp	r3, #96	; 0x60
 8002cba:	d050      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x116>
 8002cbc:	2b60      	cmp	r3, #96	; 0x60
 8002cbe:	d877      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cc0:	2b50      	cmp	r3, #80	; 0x50
 8002cc2:	d03c      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0xf6>
 8002cc4:	2b50      	cmp	r3, #80	; 0x50
 8002cc6:	d873      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	d058      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x136>
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d86f      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cd0:	2b30      	cmp	r3, #48	; 0x30
 8002cd2:	d064      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
 8002cd4:	2b30      	cmp	r3, #48	; 0x30
 8002cd6:	d86b      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d060      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d867      	bhi.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d05c      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d05a      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ce8:	e062      	b.n	8002db0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6899      	ldr	r1, [r3, #8]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f000 faee 	bl	80032da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	609a      	str	r2, [r3, #8]
      break;
 8002d16:	e04e      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6899      	ldr	r1, [r3, #8]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f000 fad7 	bl	80032da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d3a:	609a      	str	r2, [r3, #8]
      break;
 8002d3c:	e03b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f000 fa4e 	bl	80031ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2150      	movs	r1, #80	; 0x50
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 faa5 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 8002d5c:	e02b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f000 fa6c 	bl	8003248 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2160      	movs	r1, #96	; 0x60
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fa95 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 8002d7c:	e01b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f000 fa2e 	bl	80031ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2140      	movs	r1, #64	; 0x40
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fa85 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 8002d9c:	e00b      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	4610      	mov	r0, r2
 8002daa:	f000 fa7c 	bl	80032a6 <TIM_ITRx_SetConfig>
        break;
 8002dae:	e002      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002db4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a29      	ldr	r2, [pc, #164]	; (8002ed0 <TIM_Base_SetConfig+0xb8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00b      	beq.n	8002e48 <TIM_Base_SetConfig+0x30>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e36:	d007      	beq.n	8002e48 <TIM_Base_SetConfig+0x30>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <TIM_Base_SetConfig+0xbc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <TIM_Base_SetConfig+0x30>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <TIM_Base_SetConfig+0xc0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d108      	bne.n	8002e5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <TIM_Base_SetConfig+0xb8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_Base_SetConfig+0x62>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0x62>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <TIM_Base_SetConfig+0xbc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0x62>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <TIM_Base_SetConfig+0xc0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <TIM_Base_SetConfig+0xb8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d103      	bne.n	8002ec0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	615a      	str	r2, [r3, #20]
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800

08002edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f023 0201 	bic.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0303 	bic.w	r3, r3, #3
 8002f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f023 0302 	bic.w	r3, r3, #2
 8002f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <TIM_OC1_SetConfig+0xc8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d10c      	bne.n	8002f52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f023 0308 	bic.w	r3, r3, #8
 8002f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <TIM_OC1_SetConfig+0xc8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d111      	bne.n	8002f7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	621a      	str	r2, [r3, #32]
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40012c00 	.word	0x40012c00

08002fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f023 0210 	bic.w	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0320 	bic.w	r3, r3, #32
 8002ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <TIM_OC2_SetConfig+0xd0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10d      	bne.n	8003024 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003022:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <TIM_OC2_SetConfig+0xd0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d113      	bne.n	8003054 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800303a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	621a      	str	r2, [r3, #32]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	40012c00 	.word	0x40012c00

0800307c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <TIM_OC3_SetConfig+0xd0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10d      	bne.n	80030f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <TIM_OC3_SetConfig+0xd0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d113      	bne.n	8003126 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800310c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40012c00 	.word	0x40012c00

08003150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800317e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800319a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	031b      	lsls	r3, r3, #12
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <TIM_OC4_SetConfig+0x98>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d109      	bne.n	80031c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	40012c00 	.word	0x40012c00

080031ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f023 0201 	bic.w	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 030a 	bic.w	r3, r3, #10
 8003228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	621a      	str	r2, [r3, #32]
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f023 0210 	bic.w	r2, r3, #16
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003272:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	031b      	lsls	r3, r3, #12
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003284:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	621a      	str	r2, [r3, #32]
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f043 0307 	orr.w	r3, r3, #7
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032da:	b480      	push	{r7}
 80032dc:	b087      	sub	sp, #28
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	021a      	lsls	r2, r3, #8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4313      	orrs	r3, r2
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	609a      	str	r2, [r3, #8]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800332c:	2302      	movs	r3, #2
 800332e:	e046      	b.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337c:	d009      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a10      	ldr	r2, [pc, #64]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10c      	bne.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800

080033d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e03f      	b.n	800348a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe f976 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f905 	bl	800364c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b08a      	sub	sp, #40	; 0x28
 8003496:	af02      	add	r7, sp, #8
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d17c      	bne.n	80035ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_UART_Transmit+0x2c>
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e075      	b.n	80035ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Transmit+0x3e>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e06e      	b.n	80035ae <HAL_UART_Transmit+0x11c>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2221      	movs	r2, #33	; 0x21
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034e6:	f7fe f9cf 	bl	8001888 <HAL_GetTick>
 80034ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003500:	d108      	bne.n	8003514 <HAL_UART_Transmit+0x82>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	e003      	b.n	800351c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003524:	e02a      	b.n	800357c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f840 	bl	80035b6 <UART_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e036      	b.n	80035ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10b      	bne.n	800355e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003554:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	3302      	adds	r3, #2
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	e007      	b.n	800356e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	3301      	adds	r3, #1
 800356c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1cf      	bne.n	8003526 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	2140      	movs	r1, #64	; 0x40
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f810 	bl	80035b6 <UART_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e006      	b.n	80035ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e000      	b.n	80035ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
  }
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c6:	e02c      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d028      	beq.n	8003622 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035d6:	f7fe f957 	bl	8001888 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d21d      	bcs.n	8003622 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e00f      	b.n	8003642 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	429a      	cmp	r2, r3
 800363e:	d0c3      	beq.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003686:	f023 030c 	bic.w	r3, r3, #12
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	430b      	orrs	r3, r1
 8003692:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <UART_SetConfig+0x114>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d103      	bne.n	80036bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036b4:	f7fe ffd6 	bl	8002664 <HAL_RCC_GetPCLK2Freq>
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	e002      	b.n	80036c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7fe ffbe 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80036c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009a      	lsls	r2, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	4a22      	ldr	r2, [pc, #136]	; (8003764 <UART_SetConfig+0x118>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	0119      	lsls	r1, r3, #4
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009a      	lsls	r2, r3, #2
 80036ec:	441a      	add	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f8:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <UART_SetConfig+0x118>)
 80036fa:	fba3 0302 	umull	r0, r3, r3, r2
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2064      	movs	r0, #100	; 0x64
 8003702:	fb00 f303 	mul.w	r3, r0, r3
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	3332      	adds	r3, #50	; 0x32
 800370c:	4a15      	ldr	r2, [pc, #84]	; (8003764 <UART_SetConfig+0x118>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003718:	4419      	add	r1, r3
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009a      	lsls	r2, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <UART_SetConfig+0x118>)
 8003732:	fba3 0302 	umull	r0, r3, r3, r2
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2064      	movs	r0, #100	; 0x64
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	3332      	adds	r3, #50	; 0x32
 8003744:	4a07      	ldr	r2, [pc, #28]	; (8003764 <UART_SetConfig+0x118>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	440a      	add	r2, r1
 8003756:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40013800 	.word	0x40013800
 8003764:	51eb851f 	.word	0x51eb851f

08003768 <__errno>:
 8003768:	4b01      	ldr	r3, [pc, #4]	; (8003770 <__errno+0x8>)
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000068 	.word	0x20000068

08003774 <__libc_init_array>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	2600      	movs	r6, #0
 8003778:	4d0c      	ldr	r5, [pc, #48]	; (80037ac <__libc_init_array+0x38>)
 800377a:	4c0d      	ldr	r4, [pc, #52]	; (80037b0 <__libc_init_array+0x3c>)
 800377c:	1b64      	subs	r4, r4, r5
 800377e:	10a4      	asrs	r4, r4, #2
 8003780:	42a6      	cmp	r6, r4
 8003782:	d109      	bne.n	8003798 <__libc_init_array+0x24>
 8003784:	f000 fc9c 	bl	80040c0 <_init>
 8003788:	2600      	movs	r6, #0
 800378a:	4d0a      	ldr	r5, [pc, #40]	; (80037b4 <__libc_init_array+0x40>)
 800378c:	4c0a      	ldr	r4, [pc, #40]	; (80037b8 <__libc_init_array+0x44>)
 800378e:	1b64      	subs	r4, r4, r5
 8003790:	10a4      	asrs	r4, r4, #2
 8003792:	42a6      	cmp	r6, r4
 8003794:	d105      	bne.n	80037a2 <__libc_init_array+0x2e>
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	f855 3b04 	ldr.w	r3, [r5], #4
 800379c:	4798      	blx	r3
 800379e:	3601      	adds	r6, #1
 80037a0:	e7ee      	b.n	8003780 <__libc_init_array+0xc>
 80037a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a6:	4798      	blx	r3
 80037a8:	3601      	adds	r6, #1
 80037aa:	e7f2      	b.n	8003792 <__libc_init_array+0x1e>
 80037ac:	08004140 	.word	0x08004140
 80037b0:	08004140 	.word	0x08004140
 80037b4:	08004140 	.word	0x08004140
 80037b8:	08004144 	.word	0x08004144

080037bc <memset>:
 80037bc:	4603      	mov	r3, r0
 80037be:	4402      	add	r2, r0
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d100      	bne.n	80037c6 <memset+0xa>
 80037c4:	4770      	bx	lr
 80037c6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ca:	e7f9      	b.n	80037c0 <memset+0x4>

080037cc <siprintf>:
 80037cc:	b40e      	push	{r1, r2, r3}
 80037ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037d2:	b500      	push	{lr}
 80037d4:	b09c      	sub	sp, #112	; 0x70
 80037d6:	ab1d      	add	r3, sp, #116	; 0x74
 80037d8:	9002      	str	r0, [sp, #8]
 80037da:	9006      	str	r0, [sp, #24]
 80037dc:	9107      	str	r1, [sp, #28]
 80037de:	9104      	str	r1, [sp, #16]
 80037e0:	4808      	ldr	r0, [pc, #32]	; (8003804 <siprintf+0x38>)
 80037e2:	4909      	ldr	r1, [pc, #36]	; (8003808 <siprintf+0x3c>)
 80037e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80037e8:	9105      	str	r1, [sp, #20]
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	a902      	add	r1, sp, #8
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	f000 f868 	bl	80038c4 <_svfiprintf_r>
 80037f4:	2200      	movs	r2, #0
 80037f6:	9b02      	ldr	r3, [sp, #8]
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	b01c      	add	sp, #112	; 0x70
 80037fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003800:	b003      	add	sp, #12
 8003802:	4770      	bx	lr
 8003804:	20000068 	.word	0x20000068
 8003808:	ffff0208 	.word	0xffff0208

0800380c <__ssputs_r>:
 800380c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003810:	688e      	ldr	r6, [r1, #8]
 8003812:	4682      	mov	sl, r0
 8003814:	429e      	cmp	r6, r3
 8003816:	460c      	mov	r4, r1
 8003818:	4690      	mov	r8, r2
 800381a:	461f      	mov	r7, r3
 800381c:	d838      	bhi.n	8003890 <__ssputs_r+0x84>
 800381e:	898a      	ldrh	r2, [r1, #12]
 8003820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003824:	d032      	beq.n	800388c <__ssputs_r+0x80>
 8003826:	6825      	ldr	r5, [r4, #0]
 8003828:	6909      	ldr	r1, [r1, #16]
 800382a:	3301      	adds	r3, #1
 800382c:	eba5 0901 	sub.w	r9, r5, r1
 8003830:	6965      	ldr	r5, [r4, #20]
 8003832:	444b      	add	r3, r9
 8003834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800383c:	106d      	asrs	r5, r5, #1
 800383e:	429d      	cmp	r5, r3
 8003840:	bf38      	it	cc
 8003842:	461d      	movcc	r5, r3
 8003844:	0553      	lsls	r3, r2, #21
 8003846:	d531      	bpl.n	80038ac <__ssputs_r+0xa0>
 8003848:	4629      	mov	r1, r5
 800384a:	f000 fb6f 	bl	8003f2c <_malloc_r>
 800384e:	4606      	mov	r6, r0
 8003850:	b950      	cbnz	r0, 8003868 <__ssputs_r+0x5c>
 8003852:	230c      	movs	r3, #12
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	f8ca 3000 	str.w	r3, [sl]
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003862:	81a3      	strh	r3, [r4, #12]
 8003864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003868:	464a      	mov	r2, r9
 800386a:	6921      	ldr	r1, [r4, #16]
 800386c:	f000 face 	bl	8003e0c <memcpy>
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387a:	81a3      	strh	r3, [r4, #12]
 800387c:	6126      	str	r6, [r4, #16]
 800387e:	444e      	add	r6, r9
 8003880:	6026      	str	r6, [r4, #0]
 8003882:	463e      	mov	r6, r7
 8003884:	6165      	str	r5, [r4, #20]
 8003886:	eba5 0509 	sub.w	r5, r5, r9
 800388a:	60a5      	str	r5, [r4, #8]
 800388c:	42be      	cmp	r6, r7
 800388e:	d900      	bls.n	8003892 <__ssputs_r+0x86>
 8003890:	463e      	mov	r6, r7
 8003892:	4632      	mov	r2, r6
 8003894:	4641      	mov	r1, r8
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	f000 fac6 	bl	8003e28 <memmove>
 800389c:	68a3      	ldr	r3, [r4, #8]
 800389e:	2000      	movs	r0, #0
 80038a0:	1b9b      	subs	r3, r3, r6
 80038a2:	60a3      	str	r3, [r4, #8]
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	4433      	add	r3, r6
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	e7db      	b.n	8003864 <__ssputs_r+0x58>
 80038ac:	462a      	mov	r2, r5
 80038ae:	f000 fbb1 	bl	8004014 <_realloc_r>
 80038b2:	4606      	mov	r6, r0
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d1e1      	bne.n	800387c <__ssputs_r+0x70>
 80038b8:	4650      	mov	r0, sl
 80038ba:	6921      	ldr	r1, [r4, #16]
 80038bc:	f000 face 	bl	8003e5c <_free_r>
 80038c0:	e7c7      	b.n	8003852 <__ssputs_r+0x46>
	...

080038c4 <_svfiprintf_r>:
 80038c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c8:	4698      	mov	r8, r3
 80038ca:	898b      	ldrh	r3, [r1, #12]
 80038cc:	4607      	mov	r7, r0
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	460d      	mov	r5, r1
 80038d2:	4614      	mov	r4, r2
 80038d4:	b09d      	sub	sp, #116	; 0x74
 80038d6:	d50e      	bpl.n	80038f6 <_svfiprintf_r+0x32>
 80038d8:	690b      	ldr	r3, [r1, #16]
 80038da:	b963      	cbnz	r3, 80038f6 <_svfiprintf_r+0x32>
 80038dc:	2140      	movs	r1, #64	; 0x40
 80038de:	f000 fb25 	bl	8003f2c <_malloc_r>
 80038e2:	6028      	str	r0, [r5, #0]
 80038e4:	6128      	str	r0, [r5, #16]
 80038e6:	b920      	cbnz	r0, 80038f2 <_svfiprintf_r+0x2e>
 80038e8:	230c      	movs	r3, #12
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	e0d1      	b.n	8003a96 <_svfiprintf_r+0x1d2>
 80038f2:	2340      	movs	r3, #64	; 0x40
 80038f4:	616b      	str	r3, [r5, #20]
 80038f6:	2300      	movs	r3, #0
 80038f8:	9309      	str	r3, [sp, #36]	; 0x24
 80038fa:	2320      	movs	r3, #32
 80038fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003900:	2330      	movs	r3, #48	; 0x30
 8003902:	f04f 0901 	mov.w	r9, #1
 8003906:	f8cd 800c 	str.w	r8, [sp, #12]
 800390a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ab0 <_svfiprintf_r+0x1ec>
 800390e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003912:	4623      	mov	r3, r4
 8003914:	469a      	mov	sl, r3
 8003916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800391a:	b10a      	cbz	r2, 8003920 <_svfiprintf_r+0x5c>
 800391c:	2a25      	cmp	r2, #37	; 0x25
 800391e:	d1f9      	bne.n	8003914 <_svfiprintf_r+0x50>
 8003920:	ebba 0b04 	subs.w	fp, sl, r4
 8003924:	d00b      	beq.n	800393e <_svfiprintf_r+0x7a>
 8003926:	465b      	mov	r3, fp
 8003928:	4622      	mov	r2, r4
 800392a:	4629      	mov	r1, r5
 800392c:	4638      	mov	r0, r7
 800392e:	f7ff ff6d 	bl	800380c <__ssputs_r>
 8003932:	3001      	adds	r0, #1
 8003934:	f000 80aa 	beq.w	8003a8c <_svfiprintf_r+0x1c8>
 8003938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800393a:	445a      	add	r2, fp
 800393c:	9209      	str	r2, [sp, #36]	; 0x24
 800393e:	f89a 3000 	ldrb.w	r3, [sl]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80a2 	beq.w	8003a8c <_svfiprintf_r+0x1c8>
 8003948:	2300      	movs	r3, #0
 800394a:	f04f 32ff 	mov.w	r2, #4294967295
 800394e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003952:	f10a 0a01 	add.w	sl, sl, #1
 8003956:	9304      	str	r3, [sp, #16]
 8003958:	9307      	str	r3, [sp, #28]
 800395a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800395e:	931a      	str	r3, [sp, #104]	; 0x68
 8003960:	4654      	mov	r4, sl
 8003962:	2205      	movs	r2, #5
 8003964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003968:	4851      	ldr	r0, [pc, #324]	; (8003ab0 <_svfiprintf_r+0x1ec>)
 800396a:	f000 fa41 	bl	8003df0 <memchr>
 800396e:	9a04      	ldr	r2, [sp, #16]
 8003970:	b9d8      	cbnz	r0, 80039aa <_svfiprintf_r+0xe6>
 8003972:	06d0      	lsls	r0, r2, #27
 8003974:	bf44      	itt	mi
 8003976:	2320      	movmi	r3, #32
 8003978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397c:	0711      	lsls	r1, r2, #28
 800397e:	bf44      	itt	mi
 8003980:	232b      	movmi	r3, #43	; 0x2b
 8003982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003986:	f89a 3000 	ldrb.w	r3, [sl]
 800398a:	2b2a      	cmp	r3, #42	; 0x2a
 800398c:	d015      	beq.n	80039ba <_svfiprintf_r+0xf6>
 800398e:	4654      	mov	r4, sl
 8003990:	2000      	movs	r0, #0
 8003992:	f04f 0c0a 	mov.w	ip, #10
 8003996:	9a07      	ldr	r2, [sp, #28]
 8003998:	4621      	mov	r1, r4
 800399a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800399e:	3b30      	subs	r3, #48	; 0x30
 80039a0:	2b09      	cmp	r3, #9
 80039a2:	d94e      	bls.n	8003a42 <_svfiprintf_r+0x17e>
 80039a4:	b1b0      	cbz	r0, 80039d4 <_svfiprintf_r+0x110>
 80039a6:	9207      	str	r2, [sp, #28]
 80039a8:	e014      	b.n	80039d4 <_svfiprintf_r+0x110>
 80039aa:	eba0 0308 	sub.w	r3, r0, r8
 80039ae:	fa09 f303 	lsl.w	r3, r9, r3
 80039b2:	4313      	orrs	r3, r2
 80039b4:	46a2      	mov	sl, r4
 80039b6:	9304      	str	r3, [sp, #16]
 80039b8:	e7d2      	b.n	8003960 <_svfiprintf_r+0x9c>
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	1d19      	adds	r1, r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	9103      	str	r1, [sp, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bfbb      	ittet	lt
 80039c6:	425b      	neglt	r3, r3
 80039c8:	f042 0202 	orrlt.w	r2, r2, #2
 80039cc:	9307      	strge	r3, [sp, #28]
 80039ce:	9307      	strlt	r3, [sp, #28]
 80039d0:	bfb8      	it	lt
 80039d2:	9204      	strlt	r2, [sp, #16]
 80039d4:	7823      	ldrb	r3, [r4, #0]
 80039d6:	2b2e      	cmp	r3, #46	; 0x2e
 80039d8:	d10c      	bne.n	80039f4 <_svfiprintf_r+0x130>
 80039da:	7863      	ldrb	r3, [r4, #1]
 80039dc:	2b2a      	cmp	r3, #42	; 0x2a
 80039de:	d135      	bne.n	8003a4c <_svfiprintf_r+0x188>
 80039e0:	9b03      	ldr	r3, [sp, #12]
 80039e2:	3402      	adds	r4, #2
 80039e4:	1d1a      	adds	r2, r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	9203      	str	r2, [sp, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bfb8      	it	lt
 80039ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80039f2:	9305      	str	r3, [sp, #20]
 80039f4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003ab4 <_svfiprintf_r+0x1f0>
 80039f8:	2203      	movs	r2, #3
 80039fa:	4650      	mov	r0, sl
 80039fc:	7821      	ldrb	r1, [r4, #0]
 80039fe:	f000 f9f7 	bl	8003df0 <memchr>
 8003a02:	b140      	cbz	r0, 8003a16 <_svfiprintf_r+0x152>
 8003a04:	2340      	movs	r3, #64	; 0x40
 8003a06:	eba0 000a 	sub.w	r0, r0, sl
 8003a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a0e:	9b04      	ldr	r3, [sp, #16]
 8003a10:	3401      	adds	r4, #1
 8003a12:	4303      	orrs	r3, r0
 8003a14:	9304      	str	r3, [sp, #16]
 8003a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a1a:	2206      	movs	r2, #6
 8003a1c:	4826      	ldr	r0, [pc, #152]	; (8003ab8 <_svfiprintf_r+0x1f4>)
 8003a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a22:	f000 f9e5 	bl	8003df0 <memchr>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d038      	beq.n	8003a9c <_svfiprintf_r+0x1d8>
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <_svfiprintf_r+0x1f8>)
 8003a2c:	bb1b      	cbnz	r3, 8003a76 <_svfiprintf_r+0x1b2>
 8003a2e:	9b03      	ldr	r3, [sp, #12]
 8003a30:	3307      	adds	r3, #7
 8003a32:	f023 0307 	bic.w	r3, r3, #7
 8003a36:	3308      	adds	r3, #8
 8003a38:	9303      	str	r3, [sp, #12]
 8003a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a3c:	4433      	add	r3, r6
 8003a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a40:	e767      	b.n	8003912 <_svfiprintf_r+0x4e>
 8003a42:	460c      	mov	r4, r1
 8003a44:	2001      	movs	r0, #1
 8003a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a4a:	e7a5      	b.n	8003998 <_svfiprintf_r+0xd4>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f04f 0c0a 	mov.w	ip, #10
 8003a52:	4619      	mov	r1, r3
 8003a54:	3401      	adds	r4, #1
 8003a56:	9305      	str	r3, [sp, #20]
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a5e:	3a30      	subs	r2, #48	; 0x30
 8003a60:	2a09      	cmp	r2, #9
 8003a62:	d903      	bls.n	8003a6c <_svfiprintf_r+0x1a8>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0c5      	beq.n	80039f4 <_svfiprintf_r+0x130>
 8003a68:	9105      	str	r1, [sp, #20]
 8003a6a:	e7c3      	b.n	80039f4 <_svfiprintf_r+0x130>
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	2301      	movs	r3, #1
 8003a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a74:	e7f0      	b.n	8003a58 <_svfiprintf_r+0x194>
 8003a76:	ab03      	add	r3, sp, #12
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	462a      	mov	r2, r5
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <_svfiprintf_r+0x1fc>)
 8003a80:	a904      	add	r1, sp, #16
 8003a82:	f3af 8000 	nop.w
 8003a86:	1c42      	adds	r2, r0, #1
 8003a88:	4606      	mov	r6, r0
 8003a8a:	d1d6      	bne.n	8003a3a <_svfiprintf_r+0x176>
 8003a8c:	89ab      	ldrh	r3, [r5, #12]
 8003a8e:	065b      	lsls	r3, r3, #25
 8003a90:	f53f af2c 	bmi.w	80038ec <_svfiprintf_r+0x28>
 8003a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a96:	b01d      	add	sp, #116	; 0x74
 8003a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9c:	ab03      	add	r3, sp, #12
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <_svfiprintf_r+0x1fc>)
 8003aa6:	a904      	add	r1, sp, #16
 8003aa8:	f000 f87c 	bl	8003ba4 <_printf_i>
 8003aac:	e7eb      	b.n	8003a86 <_svfiprintf_r+0x1c2>
 8003aae:	bf00      	nop
 8003ab0:	0800410c 	.word	0x0800410c
 8003ab4:	08004112 	.word	0x08004112
 8003ab8:	08004116 	.word	0x08004116
 8003abc:	00000000 	.word	0x00000000
 8003ac0:	0800380d 	.word	0x0800380d

08003ac4 <_printf_common>:
 8003ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac8:	4616      	mov	r6, r2
 8003aca:	4699      	mov	r9, r3
 8003acc:	688a      	ldr	r2, [r1, #8]
 8003ace:	690b      	ldr	r3, [r1, #16]
 8003ad0:	4607      	mov	r7, r0
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	bfb8      	it	lt
 8003ad6:	4613      	movlt	r3, r2
 8003ad8:	6033      	str	r3, [r6, #0]
 8003ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ade:	460c      	mov	r4, r1
 8003ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ae4:	b10a      	cbz	r2, 8003aea <_printf_common+0x26>
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	6033      	str	r3, [r6, #0]
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	0699      	lsls	r1, r3, #26
 8003aee:	bf42      	ittt	mi
 8003af0:	6833      	ldrmi	r3, [r6, #0]
 8003af2:	3302      	addmi	r3, #2
 8003af4:	6033      	strmi	r3, [r6, #0]
 8003af6:	6825      	ldr	r5, [r4, #0]
 8003af8:	f015 0506 	ands.w	r5, r5, #6
 8003afc:	d106      	bne.n	8003b0c <_printf_common+0x48>
 8003afe:	f104 0a19 	add.w	sl, r4, #25
 8003b02:	68e3      	ldr	r3, [r4, #12]
 8003b04:	6832      	ldr	r2, [r6, #0]
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	42ab      	cmp	r3, r5
 8003b0a:	dc28      	bgt.n	8003b5e <_printf_common+0x9a>
 8003b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b10:	1e13      	subs	r3, r2, #0
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	bf18      	it	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	0692      	lsls	r2, r2, #26
 8003b1a:	d42d      	bmi.n	8003b78 <_printf_common+0xb4>
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	4638      	mov	r0, r7
 8003b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b24:	47c0      	blx	r8
 8003b26:	3001      	adds	r0, #1
 8003b28:	d020      	beq.n	8003b6c <_printf_common+0xa8>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	68e5      	ldr	r5, [r4, #12]
 8003b2e:	f003 0306 	and.w	r3, r3, #6
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	bf18      	it	ne
 8003b36:	2500      	movne	r5, #0
 8003b38:	6832      	ldr	r2, [r6, #0]
 8003b3a:	f04f 0600 	mov.w	r6, #0
 8003b3e:	68a3      	ldr	r3, [r4, #8]
 8003b40:	bf08      	it	eq
 8003b42:	1aad      	subeq	r5, r5, r2
 8003b44:	6922      	ldr	r2, [r4, #16]
 8003b46:	bf08      	it	eq
 8003b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bfc4      	itt	gt
 8003b50:	1a9b      	subgt	r3, r3, r2
 8003b52:	18ed      	addgt	r5, r5, r3
 8003b54:	341a      	adds	r4, #26
 8003b56:	42b5      	cmp	r5, r6
 8003b58:	d11a      	bne.n	8003b90 <_printf_common+0xcc>
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	e008      	b.n	8003b70 <_printf_common+0xac>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	4652      	mov	r2, sl
 8003b62:	4649      	mov	r1, r9
 8003b64:	4638      	mov	r0, r7
 8003b66:	47c0      	blx	r8
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d103      	bne.n	8003b74 <_printf_common+0xb0>
 8003b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b74:	3501      	adds	r5, #1
 8003b76:	e7c4      	b.n	8003b02 <_printf_common+0x3e>
 8003b78:	2030      	movs	r0, #48	; 0x30
 8003b7a:	18e1      	adds	r1, r4, r3
 8003b7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b86:	4422      	add	r2, r4
 8003b88:	3302      	adds	r3, #2
 8003b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b8e:	e7c5      	b.n	8003b1c <_printf_common+0x58>
 8003b90:	2301      	movs	r3, #1
 8003b92:	4622      	mov	r2, r4
 8003b94:	4649      	mov	r1, r9
 8003b96:	4638      	mov	r0, r7
 8003b98:	47c0      	blx	r8
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	d0e6      	beq.n	8003b6c <_printf_common+0xa8>
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	e7d9      	b.n	8003b56 <_printf_common+0x92>
	...

08003ba4 <_printf_i>:
 8003ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba8:	7e0f      	ldrb	r7, [r1, #24]
 8003baa:	4691      	mov	r9, r2
 8003bac:	2f78      	cmp	r7, #120	; 0x78
 8003bae:	4680      	mov	r8, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	469a      	mov	sl, r3
 8003bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bba:	d807      	bhi.n	8003bcc <_printf_i+0x28>
 8003bbc:	2f62      	cmp	r7, #98	; 0x62
 8003bbe:	d80a      	bhi.n	8003bd6 <_printf_i+0x32>
 8003bc0:	2f00      	cmp	r7, #0
 8003bc2:	f000 80d9 	beq.w	8003d78 <_printf_i+0x1d4>
 8003bc6:	2f58      	cmp	r7, #88	; 0x58
 8003bc8:	f000 80a4 	beq.w	8003d14 <_printf_i+0x170>
 8003bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bd4:	e03a      	b.n	8003c4c <_printf_i+0xa8>
 8003bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bda:	2b15      	cmp	r3, #21
 8003bdc:	d8f6      	bhi.n	8003bcc <_printf_i+0x28>
 8003bde:	a101      	add	r1, pc, #4	; (adr r1, 8003be4 <_printf_i+0x40>)
 8003be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003be4:	08003c3d 	.word	0x08003c3d
 8003be8:	08003c51 	.word	0x08003c51
 8003bec:	08003bcd 	.word	0x08003bcd
 8003bf0:	08003bcd 	.word	0x08003bcd
 8003bf4:	08003bcd 	.word	0x08003bcd
 8003bf8:	08003bcd 	.word	0x08003bcd
 8003bfc:	08003c51 	.word	0x08003c51
 8003c00:	08003bcd 	.word	0x08003bcd
 8003c04:	08003bcd 	.word	0x08003bcd
 8003c08:	08003bcd 	.word	0x08003bcd
 8003c0c:	08003bcd 	.word	0x08003bcd
 8003c10:	08003d5f 	.word	0x08003d5f
 8003c14:	08003c81 	.word	0x08003c81
 8003c18:	08003d41 	.word	0x08003d41
 8003c1c:	08003bcd 	.word	0x08003bcd
 8003c20:	08003bcd 	.word	0x08003bcd
 8003c24:	08003d81 	.word	0x08003d81
 8003c28:	08003bcd 	.word	0x08003bcd
 8003c2c:	08003c81 	.word	0x08003c81
 8003c30:	08003bcd 	.word	0x08003bcd
 8003c34:	08003bcd 	.word	0x08003bcd
 8003c38:	08003d49 	.word	0x08003d49
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	1d1a      	adds	r2, r3, #4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	602a      	str	r2, [r5, #0]
 8003c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0a4      	b.n	8003d9a <_printf_i+0x1f6>
 8003c50:	6820      	ldr	r0, [r4, #0]
 8003c52:	6829      	ldr	r1, [r5, #0]
 8003c54:	0606      	lsls	r6, r0, #24
 8003c56:	f101 0304 	add.w	r3, r1, #4
 8003c5a:	d50a      	bpl.n	8003c72 <_printf_i+0xce>
 8003c5c:	680e      	ldr	r6, [r1, #0]
 8003c5e:	602b      	str	r3, [r5, #0]
 8003c60:	2e00      	cmp	r6, #0
 8003c62:	da03      	bge.n	8003c6c <_printf_i+0xc8>
 8003c64:	232d      	movs	r3, #45	; 0x2d
 8003c66:	4276      	negs	r6, r6
 8003c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c6c:	230a      	movs	r3, #10
 8003c6e:	485e      	ldr	r0, [pc, #376]	; (8003de8 <_printf_i+0x244>)
 8003c70:	e019      	b.n	8003ca6 <_printf_i+0x102>
 8003c72:	680e      	ldr	r6, [r1, #0]
 8003c74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	bf18      	it	ne
 8003c7c:	b236      	sxthne	r6, r6
 8003c7e:	e7ef      	b.n	8003c60 <_printf_i+0xbc>
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	6820      	ldr	r0, [r4, #0]
 8003c84:	1d19      	adds	r1, r3, #4
 8003c86:	6029      	str	r1, [r5, #0]
 8003c88:	0601      	lsls	r1, r0, #24
 8003c8a:	d501      	bpl.n	8003c90 <_printf_i+0xec>
 8003c8c:	681e      	ldr	r6, [r3, #0]
 8003c8e:	e002      	b.n	8003c96 <_printf_i+0xf2>
 8003c90:	0646      	lsls	r6, r0, #25
 8003c92:	d5fb      	bpl.n	8003c8c <_printf_i+0xe8>
 8003c94:	881e      	ldrh	r6, [r3, #0]
 8003c96:	2f6f      	cmp	r7, #111	; 0x6f
 8003c98:	bf0c      	ite	eq
 8003c9a:	2308      	moveq	r3, #8
 8003c9c:	230a      	movne	r3, #10
 8003c9e:	4852      	ldr	r0, [pc, #328]	; (8003de8 <_printf_i+0x244>)
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ca6:	6865      	ldr	r5, [r4, #4]
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	bfa8      	it	ge
 8003cac:	6821      	ldrge	r1, [r4, #0]
 8003cae:	60a5      	str	r5, [r4, #8]
 8003cb0:	bfa4      	itt	ge
 8003cb2:	f021 0104 	bicge.w	r1, r1, #4
 8003cb6:	6021      	strge	r1, [r4, #0]
 8003cb8:	b90e      	cbnz	r6, 8003cbe <_printf_i+0x11a>
 8003cba:	2d00      	cmp	r5, #0
 8003cbc:	d04d      	beq.n	8003d5a <_printf_i+0x1b6>
 8003cbe:	4615      	mov	r5, r2
 8003cc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cc4:	fb03 6711 	mls	r7, r3, r1, r6
 8003cc8:	5dc7      	ldrb	r7, [r0, r7]
 8003cca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cce:	4637      	mov	r7, r6
 8003cd0:	42bb      	cmp	r3, r7
 8003cd2:	460e      	mov	r6, r1
 8003cd4:	d9f4      	bls.n	8003cc0 <_printf_i+0x11c>
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d10b      	bne.n	8003cf2 <_printf_i+0x14e>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	07de      	lsls	r6, r3, #31
 8003cde:	d508      	bpl.n	8003cf2 <_printf_i+0x14e>
 8003ce0:	6923      	ldr	r3, [r4, #16]
 8003ce2:	6861      	ldr	r1, [r4, #4]
 8003ce4:	4299      	cmp	r1, r3
 8003ce6:	bfde      	ittt	le
 8003ce8:	2330      	movle	r3, #48	; 0x30
 8003cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cf2:	1b52      	subs	r2, r2, r5
 8003cf4:	6122      	str	r2, [r4, #16]
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	f8cd a000 	str.w	sl, [sp]
 8003d00:	aa03      	add	r2, sp, #12
 8003d02:	f7ff fedf 	bl	8003ac4 <_printf_common>
 8003d06:	3001      	adds	r0, #1
 8003d08:	d14c      	bne.n	8003da4 <_printf_i+0x200>
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0e:	b004      	add	sp, #16
 8003d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d14:	4834      	ldr	r0, [pc, #208]	; (8003de8 <_printf_i+0x244>)
 8003d16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d1a:	6829      	ldr	r1, [r5, #0]
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d22:	6029      	str	r1, [r5, #0]
 8003d24:	061d      	lsls	r5, r3, #24
 8003d26:	d514      	bpl.n	8003d52 <_printf_i+0x1ae>
 8003d28:	07df      	lsls	r7, r3, #31
 8003d2a:	bf44      	itt	mi
 8003d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8003d30:	6023      	strmi	r3, [r4, #0]
 8003d32:	b91e      	cbnz	r6, 8003d3c <_printf_i+0x198>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	f023 0320 	bic.w	r3, r3, #32
 8003d3a:	6023      	str	r3, [r4, #0]
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	e7af      	b.n	8003ca0 <_printf_i+0xfc>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	f043 0320 	orr.w	r3, r3, #32
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	2378      	movs	r3, #120	; 0x78
 8003d4a:	4828      	ldr	r0, [pc, #160]	; (8003dec <_printf_i+0x248>)
 8003d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d50:	e7e3      	b.n	8003d1a <_printf_i+0x176>
 8003d52:	0659      	lsls	r1, r3, #25
 8003d54:	bf48      	it	mi
 8003d56:	b2b6      	uxthmi	r6, r6
 8003d58:	e7e6      	b.n	8003d28 <_printf_i+0x184>
 8003d5a:	4615      	mov	r5, r2
 8003d5c:	e7bb      	b.n	8003cd6 <_printf_i+0x132>
 8003d5e:	682b      	ldr	r3, [r5, #0]
 8003d60:	6826      	ldr	r6, [r4, #0]
 8003d62:	1d18      	adds	r0, r3, #4
 8003d64:	6961      	ldr	r1, [r4, #20]
 8003d66:	6028      	str	r0, [r5, #0]
 8003d68:	0635      	lsls	r5, r6, #24
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	d501      	bpl.n	8003d72 <_printf_i+0x1ce>
 8003d6e:	6019      	str	r1, [r3, #0]
 8003d70:	e002      	b.n	8003d78 <_printf_i+0x1d4>
 8003d72:	0670      	lsls	r0, r6, #25
 8003d74:	d5fb      	bpl.n	8003d6e <_printf_i+0x1ca>
 8003d76:	8019      	strh	r1, [r3, #0]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4615      	mov	r5, r2
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	e7ba      	b.n	8003cf6 <_printf_i+0x152>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	2100      	movs	r1, #0
 8003d84:	1d1a      	adds	r2, r3, #4
 8003d86:	602a      	str	r2, [r5, #0]
 8003d88:	681d      	ldr	r5, [r3, #0]
 8003d8a:	6862      	ldr	r2, [r4, #4]
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f000 f82f 	bl	8003df0 <memchr>
 8003d92:	b108      	cbz	r0, 8003d98 <_printf_i+0x1f4>
 8003d94:	1b40      	subs	r0, r0, r5
 8003d96:	6060      	str	r0, [r4, #4]
 8003d98:	6863      	ldr	r3, [r4, #4]
 8003d9a:	6123      	str	r3, [r4, #16]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da2:	e7a8      	b.n	8003cf6 <_printf_i+0x152>
 8003da4:	462a      	mov	r2, r5
 8003da6:	4649      	mov	r1, r9
 8003da8:	4640      	mov	r0, r8
 8003daa:	6923      	ldr	r3, [r4, #16]
 8003dac:	47d0      	blx	sl
 8003dae:	3001      	adds	r0, #1
 8003db0:	d0ab      	beq.n	8003d0a <_printf_i+0x166>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	079b      	lsls	r3, r3, #30
 8003db6:	d413      	bmi.n	8003de0 <_printf_i+0x23c>
 8003db8:	68e0      	ldr	r0, [r4, #12]
 8003dba:	9b03      	ldr	r3, [sp, #12]
 8003dbc:	4298      	cmp	r0, r3
 8003dbe:	bfb8      	it	lt
 8003dc0:	4618      	movlt	r0, r3
 8003dc2:	e7a4      	b.n	8003d0e <_printf_i+0x16a>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4632      	mov	r2, r6
 8003dc8:	4649      	mov	r1, r9
 8003dca:	4640      	mov	r0, r8
 8003dcc:	47d0      	blx	sl
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d09b      	beq.n	8003d0a <_printf_i+0x166>
 8003dd2:	3501      	adds	r5, #1
 8003dd4:	68e3      	ldr	r3, [r4, #12]
 8003dd6:	9903      	ldr	r1, [sp, #12]
 8003dd8:	1a5b      	subs	r3, r3, r1
 8003dda:	42ab      	cmp	r3, r5
 8003ddc:	dcf2      	bgt.n	8003dc4 <_printf_i+0x220>
 8003dde:	e7eb      	b.n	8003db8 <_printf_i+0x214>
 8003de0:	2500      	movs	r5, #0
 8003de2:	f104 0619 	add.w	r6, r4, #25
 8003de6:	e7f5      	b.n	8003dd4 <_printf_i+0x230>
 8003de8:	0800411d 	.word	0x0800411d
 8003dec:	0800412e 	.word	0x0800412e

08003df0 <memchr>:
 8003df0:	4603      	mov	r3, r0
 8003df2:	b510      	push	{r4, lr}
 8003df4:	b2c9      	uxtb	r1, r1
 8003df6:	4402      	add	r2, r0
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	d101      	bne.n	8003e02 <memchr+0x12>
 8003dfe:	2000      	movs	r0, #0
 8003e00:	e003      	b.n	8003e0a <memchr+0x1a>
 8003e02:	7804      	ldrb	r4, [r0, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	428c      	cmp	r4, r1
 8003e08:	d1f6      	bne.n	8003df8 <memchr+0x8>
 8003e0a:	bd10      	pop	{r4, pc}

08003e0c <memcpy>:
 8003e0c:	440a      	add	r2, r1
 8003e0e:	4291      	cmp	r1, r2
 8003e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e14:	d100      	bne.n	8003e18 <memcpy+0xc>
 8003e16:	4770      	bx	lr
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e1e:	4291      	cmp	r1, r2
 8003e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e24:	d1f9      	bne.n	8003e1a <memcpy+0xe>
 8003e26:	bd10      	pop	{r4, pc}

08003e28 <memmove>:
 8003e28:	4288      	cmp	r0, r1
 8003e2a:	b510      	push	{r4, lr}
 8003e2c:	eb01 0402 	add.w	r4, r1, r2
 8003e30:	d902      	bls.n	8003e38 <memmove+0x10>
 8003e32:	4284      	cmp	r4, r0
 8003e34:	4623      	mov	r3, r4
 8003e36:	d807      	bhi.n	8003e48 <memmove+0x20>
 8003e38:	1e43      	subs	r3, r0, #1
 8003e3a:	42a1      	cmp	r1, r4
 8003e3c:	d008      	beq.n	8003e50 <memmove+0x28>
 8003e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e46:	e7f8      	b.n	8003e3a <memmove+0x12>
 8003e48:	4601      	mov	r1, r0
 8003e4a:	4402      	add	r2, r0
 8003e4c:	428a      	cmp	r2, r1
 8003e4e:	d100      	bne.n	8003e52 <memmove+0x2a>
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e5a:	e7f7      	b.n	8003e4c <memmove+0x24>

08003e5c <_free_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4605      	mov	r5, r0
 8003e60:	2900      	cmp	r1, #0
 8003e62:	d040      	beq.n	8003ee6 <_free_r+0x8a>
 8003e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e68:	1f0c      	subs	r4, r1, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfb8      	it	lt
 8003e6e:	18e4      	addlt	r4, r4, r3
 8003e70:	f000 f910 	bl	8004094 <__malloc_lock>
 8003e74:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <_free_r+0x8c>)
 8003e76:	6813      	ldr	r3, [r2, #0]
 8003e78:	b933      	cbnz	r3, 8003e88 <_free_r+0x2c>
 8003e7a:	6063      	str	r3, [r4, #4]
 8003e7c:	6014      	str	r4, [r2, #0]
 8003e7e:	4628      	mov	r0, r5
 8003e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e84:	f000 b90c 	b.w	80040a0 <__malloc_unlock>
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	d908      	bls.n	8003e9e <_free_r+0x42>
 8003e8c:	6820      	ldr	r0, [r4, #0]
 8003e8e:	1821      	adds	r1, r4, r0
 8003e90:	428b      	cmp	r3, r1
 8003e92:	bf01      	itttt	eq
 8003e94:	6819      	ldreq	r1, [r3, #0]
 8003e96:	685b      	ldreq	r3, [r3, #4]
 8003e98:	1809      	addeq	r1, r1, r0
 8003e9a:	6021      	streq	r1, [r4, #0]
 8003e9c:	e7ed      	b.n	8003e7a <_free_r+0x1e>
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	b10b      	cbz	r3, 8003ea8 <_free_r+0x4c>
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	d9fa      	bls.n	8003e9e <_free_r+0x42>
 8003ea8:	6811      	ldr	r1, [r2, #0]
 8003eaa:	1850      	adds	r0, r2, r1
 8003eac:	42a0      	cmp	r0, r4
 8003eae:	d10b      	bne.n	8003ec8 <_free_r+0x6c>
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	4401      	add	r1, r0
 8003eb4:	1850      	adds	r0, r2, r1
 8003eb6:	4283      	cmp	r3, r0
 8003eb8:	6011      	str	r1, [r2, #0]
 8003eba:	d1e0      	bne.n	8003e7e <_free_r+0x22>
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4401      	add	r1, r0
 8003ec2:	6011      	str	r1, [r2, #0]
 8003ec4:	6053      	str	r3, [r2, #4]
 8003ec6:	e7da      	b.n	8003e7e <_free_r+0x22>
 8003ec8:	d902      	bls.n	8003ed0 <_free_r+0x74>
 8003eca:	230c      	movs	r3, #12
 8003ecc:	602b      	str	r3, [r5, #0]
 8003ece:	e7d6      	b.n	8003e7e <_free_r+0x22>
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	1821      	adds	r1, r4, r0
 8003ed4:	428b      	cmp	r3, r1
 8003ed6:	bf01      	itttt	eq
 8003ed8:	6819      	ldreq	r1, [r3, #0]
 8003eda:	685b      	ldreq	r3, [r3, #4]
 8003edc:	1809      	addeq	r1, r1, r0
 8003ede:	6021      	streq	r1, [r4, #0]
 8003ee0:	6063      	str	r3, [r4, #4]
 8003ee2:	6054      	str	r4, [r2, #4]
 8003ee4:	e7cb      	b.n	8003e7e <_free_r+0x22>
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	200004e0 	.word	0x200004e0

08003eec <sbrk_aligned>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	4e0e      	ldr	r6, [pc, #56]	; (8003f28 <sbrk_aligned+0x3c>)
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	6831      	ldr	r1, [r6, #0]
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	b911      	cbnz	r1, 8003efe <sbrk_aligned+0x12>
 8003ef8:	f000 f8bc 	bl	8004074 <_sbrk_r>
 8003efc:	6030      	str	r0, [r6, #0]
 8003efe:	4621      	mov	r1, r4
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 f8b7 	bl	8004074 <_sbrk_r>
 8003f06:	1c43      	adds	r3, r0, #1
 8003f08:	d00a      	beq.n	8003f20 <sbrk_aligned+0x34>
 8003f0a:	1cc4      	adds	r4, r0, #3
 8003f0c:	f024 0403 	bic.w	r4, r4, #3
 8003f10:	42a0      	cmp	r0, r4
 8003f12:	d007      	beq.n	8003f24 <sbrk_aligned+0x38>
 8003f14:	1a21      	subs	r1, r4, r0
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 f8ac 	bl	8004074 <_sbrk_r>
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	d101      	bne.n	8003f24 <sbrk_aligned+0x38>
 8003f20:	f04f 34ff 	mov.w	r4, #4294967295
 8003f24:	4620      	mov	r0, r4
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	200004e4 	.word	0x200004e4

08003f2c <_malloc_r>:
 8003f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f30:	1ccd      	adds	r5, r1, #3
 8003f32:	f025 0503 	bic.w	r5, r5, #3
 8003f36:	3508      	adds	r5, #8
 8003f38:	2d0c      	cmp	r5, #12
 8003f3a:	bf38      	it	cc
 8003f3c:	250c      	movcc	r5, #12
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	4607      	mov	r7, r0
 8003f42:	db01      	blt.n	8003f48 <_malloc_r+0x1c>
 8003f44:	42a9      	cmp	r1, r5
 8003f46:	d905      	bls.n	8003f54 <_malloc_r+0x28>
 8003f48:	230c      	movs	r3, #12
 8003f4a:	2600      	movs	r6, #0
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	4630      	mov	r0, r6
 8003f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f54:	4e2e      	ldr	r6, [pc, #184]	; (8004010 <_malloc_r+0xe4>)
 8003f56:	f000 f89d 	bl	8004094 <__malloc_lock>
 8003f5a:	6833      	ldr	r3, [r6, #0]
 8003f5c:	461c      	mov	r4, r3
 8003f5e:	bb34      	cbnz	r4, 8003fae <_malloc_r+0x82>
 8003f60:	4629      	mov	r1, r5
 8003f62:	4638      	mov	r0, r7
 8003f64:	f7ff ffc2 	bl	8003eec <sbrk_aligned>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	d14d      	bne.n	800400a <_malloc_r+0xde>
 8003f6e:	6834      	ldr	r4, [r6, #0]
 8003f70:	4626      	mov	r6, r4
 8003f72:	2e00      	cmp	r6, #0
 8003f74:	d140      	bne.n	8003ff8 <_malloc_r+0xcc>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	4631      	mov	r1, r6
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	eb04 0803 	add.w	r8, r4, r3
 8003f80:	f000 f878 	bl	8004074 <_sbrk_r>
 8003f84:	4580      	cmp	r8, r0
 8003f86:	d13a      	bne.n	8003ffe <_malloc_r+0xd2>
 8003f88:	6821      	ldr	r1, [r4, #0]
 8003f8a:	3503      	adds	r5, #3
 8003f8c:	1a6d      	subs	r5, r5, r1
 8003f8e:	f025 0503 	bic.w	r5, r5, #3
 8003f92:	3508      	adds	r5, #8
 8003f94:	2d0c      	cmp	r5, #12
 8003f96:	bf38      	it	cc
 8003f98:	250c      	movcc	r5, #12
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	f7ff ffa5 	bl	8003eec <sbrk_aligned>
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d02b      	beq.n	8003ffe <_malloc_r+0xd2>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	442b      	add	r3, r5
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	e00e      	b.n	8003fcc <_malloc_r+0xa0>
 8003fae:	6822      	ldr	r2, [r4, #0]
 8003fb0:	1b52      	subs	r2, r2, r5
 8003fb2:	d41e      	bmi.n	8003ff2 <_malloc_r+0xc6>
 8003fb4:	2a0b      	cmp	r2, #11
 8003fb6:	d916      	bls.n	8003fe6 <_malloc_r+0xba>
 8003fb8:	1961      	adds	r1, r4, r5
 8003fba:	42a3      	cmp	r3, r4
 8003fbc:	6025      	str	r5, [r4, #0]
 8003fbe:	bf18      	it	ne
 8003fc0:	6059      	strne	r1, [r3, #4]
 8003fc2:	6863      	ldr	r3, [r4, #4]
 8003fc4:	bf08      	it	eq
 8003fc6:	6031      	streq	r1, [r6, #0]
 8003fc8:	5162      	str	r2, [r4, r5]
 8003fca:	604b      	str	r3, [r1, #4]
 8003fcc:	4638      	mov	r0, r7
 8003fce:	f104 060b 	add.w	r6, r4, #11
 8003fd2:	f000 f865 	bl	80040a0 <__malloc_unlock>
 8003fd6:	f026 0607 	bic.w	r6, r6, #7
 8003fda:	1d23      	adds	r3, r4, #4
 8003fdc:	1af2      	subs	r2, r6, r3
 8003fde:	d0b6      	beq.n	8003f4e <_malloc_r+0x22>
 8003fe0:	1b9b      	subs	r3, r3, r6
 8003fe2:	50a3      	str	r3, [r4, r2]
 8003fe4:	e7b3      	b.n	8003f4e <_malloc_r+0x22>
 8003fe6:	6862      	ldr	r2, [r4, #4]
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	bf0c      	ite	eq
 8003fec:	6032      	streq	r2, [r6, #0]
 8003fee:	605a      	strne	r2, [r3, #4]
 8003ff0:	e7ec      	b.n	8003fcc <_malloc_r+0xa0>
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	6864      	ldr	r4, [r4, #4]
 8003ff6:	e7b2      	b.n	8003f5e <_malloc_r+0x32>
 8003ff8:	4634      	mov	r4, r6
 8003ffa:	6876      	ldr	r6, [r6, #4]
 8003ffc:	e7b9      	b.n	8003f72 <_malloc_r+0x46>
 8003ffe:	230c      	movs	r3, #12
 8004000:	4638      	mov	r0, r7
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	f000 f84c 	bl	80040a0 <__malloc_unlock>
 8004008:	e7a1      	b.n	8003f4e <_malloc_r+0x22>
 800400a:	6025      	str	r5, [r4, #0]
 800400c:	e7de      	b.n	8003fcc <_malloc_r+0xa0>
 800400e:	bf00      	nop
 8004010:	200004e0 	.word	0x200004e0

08004014 <_realloc_r>:
 8004014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004018:	4680      	mov	r8, r0
 800401a:	4614      	mov	r4, r2
 800401c:	460e      	mov	r6, r1
 800401e:	b921      	cbnz	r1, 800402a <_realloc_r+0x16>
 8004020:	4611      	mov	r1, r2
 8004022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004026:	f7ff bf81 	b.w	8003f2c <_malloc_r>
 800402a:	b92a      	cbnz	r2, 8004038 <_realloc_r+0x24>
 800402c:	f7ff ff16 	bl	8003e5c <_free_r>
 8004030:	4625      	mov	r5, r4
 8004032:	4628      	mov	r0, r5
 8004034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004038:	f000 f838 	bl	80040ac <_malloc_usable_size_r>
 800403c:	4284      	cmp	r4, r0
 800403e:	4607      	mov	r7, r0
 8004040:	d802      	bhi.n	8004048 <_realloc_r+0x34>
 8004042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004046:	d812      	bhi.n	800406e <_realloc_r+0x5a>
 8004048:	4621      	mov	r1, r4
 800404a:	4640      	mov	r0, r8
 800404c:	f7ff ff6e 	bl	8003f2c <_malloc_r>
 8004050:	4605      	mov	r5, r0
 8004052:	2800      	cmp	r0, #0
 8004054:	d0ed      	beq.n	8004032 <_realloc_r+0x1e>
 8004056:	42bc      	cmp	r4, r7
 8004058:	4622      	mov	r2, r4
 800405a:	4631      	mov	r1, r6
 800405c:	bf28      	it	cs
 800405e:	463a      	movcs	r2, r7
 8004060:	f7ff fed4 	bl	8003e0c <memcpy>
 8004064:	4631      	mov	r1, r6
 8004066:	4640      	mov	r0, r8
 8004068:	f7ff fef8 	bl	8003e5c <_free_r>
 800406c:	e7e1      	b.n	8004032 <_realloc_r+0x1e>
 800406e:	4635      	mov	r5, r6
 8004070:	e7df      	b.n	8004032 <_realloc_r+0x1e>
	...

08004074 <_sbrk_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	2300      	movs	r3, #0
 8004078:	4d05      	ldr	r5, [pc, #20]	; (8004090 <_sbrk_r+0x1c>)
 800407a:	4604      	mov	r4, r0
 800407c:	4608      	mov	r0, r1
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	f7fd f924 	bl	80012cc <_sbrk>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d102      	bne.n	800408e <_sbrk_r+0x1a>
 8004088:	682b      	ldr	r3, [r5, #0]
 800408a:	b103      	cbz	r3, 800408e <_sbrk_r+0x1a>
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	200004e8 	.word	0x200004e8

08004094 <__malloc_lock>:
 8004094:	4801      	ldr	r0, [pc, #4]	; (800409c <__malloc_lock+0x8>)
 8004096:	f000 b811 	b.w	80040bc <__retarget_lock_acquire_recursive>
 800409a:	bf00      	nop
 800409c:	200004ec 	.word	0x200004ec

080040a0 <__malloc_unlock>:
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <__malloc_unlock+0x8>)
 80040a2:	f000 b80c 	b.w	80040be <__retarget_lock_release_recursive>
 80040a6:	bf00      	nop
 80040a8:	200004ec 	.word	0x200004ec

080040ac <_malloc_usable_size_r>:
 80040ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b0:	1f18      	subs	r0, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfbc      	itt	lt
 80040b6:	580b      	ldrlt	r3, [r1, r0]
 80040b8:	18c0      	addlt	r0, r0, r3
 80040ba:	4770      	bx	lr

080040bc <__retarget_lock_acquire_recursive>:
 80040bc:	4770      	bx	lr

080040be <__retarget_lock_release_recursive>:
 80040be:	4770      	bx	lr

080040c0 <_init>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	bf00      	nop
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr

080040cc <_fini>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr
