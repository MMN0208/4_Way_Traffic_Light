
4_Way_Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004334  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  00020390  2**0
                  CONTENTS
  4 .ARM          00000000  0800476c  0800476c  00020390  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800476c  0800476c  00020390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  08004774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000390  08004b04  00020390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  08004b04  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c30c  00000000  00000000  000203b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002757  00000000  00000000  0002c6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0002ee20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  0002fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7bd  00000000  00000000  00030800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131c2  00000000  00000000  0004afbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5b3  00000000  00000000  0005e17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9732  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f0  00000000  00000000  000e9784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000390 	.word	0x20000390
 8000128:	00000000 	.word	0x00000000
 800012c:	08004428 	.word	0x08004428

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000394 	.word	0x20000394
 8000148:	08004428 	.word	0x08004428

0800014c <grnBuzzer>:
  4,16,4,
  4,8,4,4,4,
  4,20,
};

void grnBuzzer(void) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	int counter = sizeof(music1)/sizeof(music1[0]);
 8000152:	234e      	movs	r3, #78	; 0x4e
 8000154:	607b      	str	r3, [r7, #4]
//		grnBuzzerCounter++;
//	}
//	else {
//		grnBuzzerCounter = 10;
//	}
	if (grnBuzzerCounter < counter){
 8000156:	4b15      	ldr	r3, [pc, #84]	; (80001ac <grnBuzzer+0x60>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	687a      	ldr	r2, [r7, #4]
 800015c:	429a      	cmp	r2, r3
 800015e:	dd1d      	ble.n	800019c <grnBuzzer+0x50>
		__HAL_TIM_SET_AUTORELOAD(&htim3, music1[grnBuzzerCounter]);
 8000160:	4b12      	ldr	r3, [pc, #72]	; (80001ac <grnBuzzer+0x60>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a12      	ldr	r2, [pc, #72]	; (80001b0 <grnBuzzer+0x64>)
 8000166:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800016a:	4b12      	ldr	r3, [pc, #72]	; (80001b4 <grnBuzzer+0x68>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000170:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <grnBuzzer+0x60>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a0e      	ldr	r2, [pc, #56]	; (80001b0 <grnBuzzer+0x64>)
 8000176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017a:	461a      	mov	r2, r3
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <grnBuzzer+0x68>)
 800017e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, music1Duration[grnBuzzerCounter]);
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <grnBuzzer+0x60>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a0c      	ldr	r2, [pc, #48]	; (80001b8 <grnBuzzer+0x6c>)
 8000186:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800018a:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <grnBuzzer+0x68>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	635a      	str	r2, [r3, #52]	; 0x34
		grnBuzzerCounter++;
 8000190:	4b06      	ldr	r3, [pc, #24]	; (80001ac <grnBuzzer+0x60>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	3301      	adds	r3, #1
 8000196:	4a05      	ldr	r2, [pc, #20]	; (80001ac <grnBuzzer+0x60>)
 8000198:	6013      	str	r3, [r2, #0]
	} else {
		grnBuzzerCounter = 0;
	}
}
 800019a:	e002      	b.n	80001a2 <grnBuzzer+0x56>
		grnBuzzerCounter = 0;
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <grnBuzzer+0x60>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	200003ac 	.word	0x200003ac
 80001b0:	20000000 	.word	0x20000000
 80001b4:	20000764 	.word	0x20000764
 80001b8:	0800445c 	.word	0x0800445c

080001bc <redBuzzer>:

void redBuzzer(void) {
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
	int counter = sizeof(music2)/sizeof(music2[0]);
 80001c2:	2363      	movs	r3, #99	; 0x63
 80001c4:	607b      	str	r3, [r7, #4]
	if(redBuzzerCounter < counter) {
 80001c6:	4b15      	ldr	r3, [pc, #84]	; (800021c <redBuzzer+0x60>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	687a      	ldr	r2, [r7, #4]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	dd1d      	ble.n	800020c <redBuzzer+0x50>
		__HAL_TIM_SET_AUTORELOAD(&htim3, music2[redBuzzerCounter]);
 80001d0:	4b12      	ldr	r3, [pc, #72]	; (800021c <redBuzzer+0x60>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a12      	ldr	r2, [pc, #72]	; (8000220 <redBuzzer+0x64>)
 80001d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001da:	4b12      	ldr	r3, [pc, #72]	; (8000224 <redBuzzer+0x68>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	62da      	str	r2, [r3, #44]	; 0x2c
 80001e0:	4b0e      	ldr	r3, [pc, #56]	; (800021c <redBuzzer+0x60>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <redBuzzer+0x64>)
 80001e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <redBuzzer+0x68>)
 80001ee:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, music2Duration[redBuzzerCounter]);
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <redBuzzer+0x60>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <redBuzzer+0x6c>)
 80001f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <redBuzzer+0x68>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	635a      	str	r2, [r3, #52]	; 0x34
		redBuzzerCounter ++;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <redBuzzer+0x60>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	3301      	adds	r3, #1
 8000206:	4a05      	ldr	r2, [pc, #20]	; (800021c <redBuzzer+0x60>)
 8000208:	6013      	str	r3, [r2, #0]
	}
	else {
		redBuzzerCounter  = 0;
	}
}
 800020a:	e002      	b.n	8000212 <redBuzzer+0x56>
		redBuzzerCounter  = 0;
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <redBuzzer+0x60>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	200003b0 	.word	0x200003b0
 8000220:	20000138 	.word	0x20000138
 8000224:	20000764 	.word	0x20000764
 8000228:	08004594 	.word	0x08004594

0800022c <stopBuzzer>:

void stopBuzzer(void) {
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim3, 0);
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <stopBuzzer+0x24>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2200      	movs	r2, #0
 8000236:	62da      	str	r2, [r3, #44]	; 0x2c
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <stopBuzzer+0x24>)
 800023a:	2200      	movs	r2, #0
 800023c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <stopBuzzer+0x24>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2200      	movs	r2, #0
 8000244:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000246:	bf00      	nop
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000764 	.word	0x20000764

08000254 <fsm_multi_mode_run>:
#include "fsm_for_multi_mode.h"

int newGrnTime = 0;
int newYelTime = 0;

void fsm_multi_mode_run(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	switch(sysStatus) {
 8000258:	4ba6      	ldr	r3, [pc, #664]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b06      	cmp	r3, #6
 800025e:	f200 8252 	bhi.w	8000706 <fsm_multi_mode_run+0x4b2>
 8000262:	a201      	add	r2, pc, #4	; (adr r2, 8000268 <fsm_multi_mode_run+0x14>)
 8000264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000268:	08000285 	.word	0x08000285
 800026c:	080002b9 	.word	0x080002b9
 8000270:	08000377 	.word	0x08000377
 8000274:	08000435 	.word	0x08000435
 8000278:	08000511 	.word	0x08000511
 800027c:	08000667 	.word	0x08000667
 8000280:	080005cf 	.word	0x080005cf
	case INIT:
		//init timer 1 for countdown updating
		setTimer1(SECOND);
 8000284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000288:	f000 ffc2 	bl	8001210 <setTimer1>

		//init countdown
		countdown = grnTime;
 800028c:	4b9a      	ldr	r3, [pc, #616]	; (80004f8 <fsm_multi_mode_run+0x2a4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a9a      	ldr	r2, [pc, #616]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 8000292:	6013      	str	r3, [r2, #0]

		auto_mode = 1;
 8000294:	4b9a      	ldr	r3, [pc, #616]	; (8000500 <fsm_multi_mode_run+0x2ac>)
 8000296:	2201      	movs	r2, #1
 8000298:	601a      	str	r2, [r3, #0]

		sysStatus = RED__GRN;
 800029a:	4b96      	ldr	r3, [pc, #600]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 800029c:	2201      	movs	r2, #1
 800029e:	701a      	strb	r2, [r3, #0]
		trafficLightRed(TRAFFIC_LIGHT_1);
 80002a0:	2000      	movs	r0, #0
 80002a2:	f001 fab7 	bl	8001814 <trafficLightRed>
		trafficLightGrn(TRAFFIC_LIGHT_2);
 80002a6:	2001      	movs	r0, #1
 80002a8:	f001 fa68 	bl	800177c <trafficLightGrn>
		displayCountdown(countdown);
 80002ac:	4b93      	ldr	r3, [pc, #588]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fad5 	bl	8001860 <displayCountdown>
		break;
 80002b6:	e233      	b.n	8000720 <fsm_multi_mode_run+0x4cc>

	case RED__GRN:
		if(auto_mode == 1) {
 80002b8:	4b91      	ldr	r3, [pc, #580]	; (8000500 <fsm_multi_mode_run+0x2ac>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d12d      	bne.n	800031c <fsm_multi_mode_run+0xc8>
			if(timer1_flag == 1) {
 80002c0:	4b90      	ldr	r3, [pc, #576]	; (8000504 <fsm_multi_mode_run+0x2b0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d11e      	bne.n	8000306 <fsm_multi_mode_run+0xb2>
				setTimer1(SECOND);
 80002c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002cc:	f000 ffa0 	bl	8001210 <setTimer1>
				countdown -= 1;
 80002d0:	4b8a      	ldr	r3, [pc, #552]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	4a89      	ldr	r2, [pc, #548]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 80002d8:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 80002da:	4b88      	ldr	r3, [pc, #544]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d10c      	bne.n	80002fc <fsm_multi_mode_run+0xa8>
					countdown = yelTime;
 80002e2:	4b89      	ldr	r3, [pc, #548]	; (8000508 <fsm_multi_mode_run+0x2b4>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a85      	ldr	r2, [pc, #532]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 80002e8:	6013      	str	r3, [r2, #0]
					sysStatus = RED__YEL;
 80002ea:	4b82      	ldr	r3, [pc, #520]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 80002ec:	2202      	movs	r2, #2
 80002ee:	701a      	strb	r2, [r3, #0]
					trafficLightRed(TRAFFIC_LIGHT_1);
 80002f0:	2000      	movs	r0, #0
 80002f2:	f001 fa8f 	bl	8001814 <trafficLightRed>
					trafficLightYel(TRAFFIC_LIGHT_2);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f001 fa66 	bl	80017c8 <trafficLightYel>
				}
				displayCountdown(countdown);
 80002fc:	4b7f      	ldr	r3, [pc, #508]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4618      	mov	r0, r3
 8000302:	f001 faad 	bl	8001860 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 8000306:	2001      	movs	r0, #1
 8000308:	f000 fc88 	bl	8000c1c <isButtonPressed>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	f000 81fb 	beq.w	800070a <fsm_multi_mode_run+0x4b6>
				auto_mode = 0;
 8000314:	4b7a      	ldr	r3, [pc, #488]	; (8000500 <fsm_multi_mode_run+0x2ac>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
				trafficLightYel(TRAFFIC_LIGHT_2);
			}
		}

		break;
 800031a:	e1f6      	b.n	800070a <fsm_multi_mode_run+0x4b6>
			if(isButtonPressed(BUTTON_1)) {
 800031c:	2001      	movs	r0, #1
 800031e:	f000 fc7d 	bl	8000c1c <isButtonPressed>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d015      	beq.n	8000354 <fsm_multi_mode_run+0x100>
				setTimer1(LED_BLINK);
 8000328:	2064      	movs	r0, #100	; 0x64
 800032a:	f000 ff71 	bl	8001210 <setTimer1>
				newGrnTime = grnTime;
 800032e:	4b72      	ldr	r3, [pc, #456]	; (80004f8 <fsm_multi_mode_run+0x2a4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a76      	ldr	r2, [pc, #472]	; (800050c <fsm_multi_mode_run+0x2b8>)
 8000334:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 8000336:	4b6f      	ldr	r3, [pc, #444]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 8000338:	2206      	movs	r2, #6
 800033a:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 800033c:	2000      	movs	r0, #0
 800033e:	f001 fa1d 	bl	800177c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 8000342:	2001      	movs	r0, #1
 8000344:	f001 fa1a 	bl	800177c <trafficLightGrn>
				displayCountdown(newGrnTime);
 8000348:	4b70      	ldr	r3, [pc, #448]	; (800050c <fsm_multi_mode_run+0x2b8>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4618      	mov	r0, r3
 800034e:	f001 fa87 	bl	8001860 <displayCountdown>
		break;
 8000352:	e1da      	b.n	800070a <fsm_multi_mode_run+0x4b6>
			else if(isButtonPressed(BUTTON_2)) {
 8000354:	2002      	movs	r0, #2
 8000356:	f000 fc61 	bl	8000c1c <isButtonPressed>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	f000 81d4 	beq.w	800070a <fsm_multi_mode_run+0x4b6>
				sysStatus = RED__YEL;
 8000362:	4b64      	ldr	r3, [pc, #400]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 8000364:	2202      	movs	r2, #2
 8000366:	701a      	strb	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
 8000368:	2000      	movs	r0, #0
 800036a:	f001 fa53 	bl	8001814 <trafficLightRed>
				trafficLightYel(TRAFFIC_LIGHT_2);
 800036e:	2001      	movs	r0, #1
 8000370:	f001 fa2a 	bl	80017c8 <trafficLightYel>
		break;
 8000374:	e1c9      	b.n	800070a <fsm_multi_mode_run+0x4b6>

	case RED__YEL:
		if(auto_mode == 1) {
 8000376:	4b62      	ldr	r3, [pc, #392]	; (8000500 <fsm_multi_mode_run+0x2ac>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d12d      	bne.n	80003da <fsm_multi_mode_run+0x186>
			if(timer1_flag == 1) {
 800037e:	4b61      	ldr	r3, [pc, #388]	; (8000504 <fsm_multi_mode_run+0x2b0>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d11e      	bne.n	80003c4 <fsm_multi_mode_run+0x170>
				setTimer1(SECOND);
 8000386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038a:	f000 ff41 	bl	8001210 <setTimer1>
				countdown--;
 800038e:	4b5b      	ldr	r3, [pc, #364]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a59      	ldr	r2, [pc, #356]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 8000396:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 8000398:	4b58      	ldr	r3, [pc, #352]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d10c      	bne.n	80003ba <fsm_multi_mode_run+0x166>
					countdown = grnTime;
 80003a0:	4b55      	ldr	r3, [pc, #340]	; (80004f8 <fsm_multi_mode_run+0x2a4>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a55      	ldr	r2, [pc, #340]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 80003a6:	6013      	str	r3, [r2, #0]
					sysStatus = GRN__RED;
 80003a8:	4b52      	ldr	r3, [pc, #328]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 80003aa:	2203      	movs	r2, #3
 80003ac:	701a      	strb	r2, [r3, #0]
					trafficLightGrn(TRAFFIC_LIGHT_1);
 80003ae:	2000      	movs	r0, #0
 80003b0:	f001 f9e4 	bl	800177c <trafficLightGrn>
					trafficLightRed(TRAFFIC_LIGHT_2);
 80003b4:	2001      	movs	r0, #1
 80003b6:	f001 fa2d 	bl	8001814 <trafficLightRed>
				}
				displayCountdown(countdown);
 80003ba:	4b50      	ldr	r3, [pc, #320]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fa4e 	bl	8001860 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 80003c4:	2001      	movs	r0, #1
 80003c6:	f000 fc29 	bl	8000c1c <isButtonPressed>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	f000 819e 	beq.w	800070e <fsm_multi_mode_run+0x4ba>
				auto_mode = 0;
 80003d2:	4b4b      	ldr	r3, [pc, #300]	; (8000500 <fsm_multi_mode_run+0x2ac>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
				sysStatus = GRN__RED;
				trafficLightGrn(TRAFFIC_LIGHT_1);
				trafficLightRed(TRAFFIC_LIGHT_2);
			}
		}
		break;
 80003d8:	e199      	b.n	800070e <fsm_multi_mode_run+0x4ba>
			if(isButtonPressed(BUTTON_1)) {
 80003da:	2001      	movs	r0, #1
 80003dc:	f000 fc1e 	bl	8000c1c <isButtonPressed>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d015      	beq.n	8000412 <fsm_multi_mode_run+0x1be>
				setTimer1(LED_BLINK);
 80003e6:	2064      	movs	r0, #100	; 0x64
 80003e8:	f000 ff12 	bl	8001210 <setTimer1>
				newGrnTime = grnTime;
 80003ec:	4b42      	ldr	r3, [pc, #264]	; (80004f8 <fsm_multi_mode_run+0x2a4>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a46      	ldr	r2, [pc, #280]	; (800050c <fsm_multi_mode_run+0x2b8>)
 80003f2:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 80003f4:	4b3f      	ldr	r3, [pc, #252]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 80003f6:	2206      	movs	r2, #6
 80003f8:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 80003fa:	2000      	movs	r0, #0
 80003fc:	f001 f9be 	bl	800177c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 8000400:	2001      	movs	r0, #1
 8000402:	f001 f9bb 	bl	800177c <trafficLightGrn>
				displayCountdown(newGrnTime);
 8000406:	4b41      	ldr	r3, [pc, #260]	; (800050c <fsm_multi_mode_run+0x2b8>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fa28 	bl	8001860 <displayCountdown>
		break;
 8000410:	e17d      	b.n	800070e <fsm_multi_mode_run+0x4ba>
			else if(isButtonPressed(BUTTON_2)) {
 8000412:	2002      	movs	r0, #2
 8000414:	f000 fc02 	bl	8000c1c <isButtonPressed>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	f000 8177 	beq.w	800070e <fsm_multi_mode_run+0x4ba>
				sysStatus = GRN__RED;
 8000420:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 8000426:	2000      	movs	r0, #0
 8000428:	f001 f9a8 	bl	800177c <trafficLightGrn>
				trafficLightRed(TRAFFIC_LIGHT_2);
 800042c:	2001      	movs	r0, #1
 800042e:	f001 f9f1 	bl	8001814 <trafficLightRed>
		break;
 8000432:	e16c      	b.n	800070e <fsm_multi_mode_run+0x4ba>

	case GRN__RED:
		if(auto_mode == 1) {
 8000434:	4b32      	ldr	r3, [pc, #200]	; (8000500 <fsm_multi_mode_run+0x2ac>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d12d      	bne.n	8000498 <fsm_multi_mode_run+0x244>
			if(timer1_flag == 1) {
 800043c:	4b31      	ldr	r3, [pc, #196]	; (8000504 <fsm_multi_mode_run+0x2b0>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d11e      	bne.n	8000482 <fsm_multi_mode_run+0x22e>
				setTimer1(SECOND);
 8000444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000448:	f000 fee2 	bl	8001210 <setTimer1>
				countdown--;
 800044c:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	4a2a      	ldr	r2, [pc, #168]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 8000454:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 8000456:	4b29      	ldr	r3, [pc, #164]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <fsm_multi_mode_run+0x224>
					countdown = yelTime;
 800045e:	4b2a      	ldr	r3, [pc, #168]	; (8000508 <fsm_multi_mode_run+0x2b4>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a26      	ldr	r2, [pc, #152]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 8000464:	6013      	str	r3, [r2, #0]
					sysStatus = YEL__RED;
 8000466:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 8000468:	2204      	movs	r2, #4
 800046a:	701a      	strb	r2, [r3, #0]
					trafficLightYel(TRAFFIC_LIGHT_1);
 800046c:	2000      	movs	r0, #0
 800046e:	f001 f9ab 	bl	80017c8 <trafficLightYel>
					trafficLightRed(TRAFFIC_LIGHT_2);
 8000472:	2001      	movs	r0, #1
 8000474:	f001 f9ce 	bl	8001814 <trafficLightRed>
				}
				displayCountdown(countdown);
 8000478:	4b20      	ldr	r3, [pc, #128]	; (80004fc <fsm_multi_mode_run+0x2a8>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4618      	mov	r0, r3
 800047e:	f001 f9ef 	bl	8001860 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 8000482:	2001      	movs	r0, #1
 8000484:	f000 fbca 	bl	8000c1c <isButtonPressed>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	f000 8141 	beq.w	8000712 <fsm_multi_mode_run+0x4be>
				auto_mode = 0;
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <fsm_multi_mode_run+0x2ac>)
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
				sysStatus = YEL__RED;
				trafficLightYel(TRAFFIC_LIGHT_1);
				trafficLightRed(TRAFFIC_LIGHT_2);
			}
		}
		break;
 8000496:	e13c      	b.n	8000712 <fsm_multi_mode_run+0x4be>
			if(isButtonPressed(BUTTON_1)) {
 8000498:	2001      	movs	r0, #1
 800049a:	f000 fbbf 	bl	8000c1c <isButtonPressed>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d015      	beq.n	80004d0 <fsm_multi_mode_run+0x27c>
				setTimer1(LED_BLINK);
 80004a4:	2064      	movs	r0, #100	; 0x64
 80004a6:	f000 feb3 	bl	8001210 <setTimer1>
				newGrnTime = grnTime;
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <fsm_multi_mode_run+0x2a4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a17      	ldr	r2, [pc, #92]	; (800050c <fsm_multi_mode_run+0x2b8>)
 80004b0:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 80004b4:	2206      	movs	r2, #6
 80004b6:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 80004b8:	2000      	movs	r0, #0
 80004ba:	f001 f95f 	bl	800177c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 80004be:	2001      	movs	r0, #1
 80004c0:	f001 f95c 	bl	800177c <trafficLightGrn>
				displayCountdown(newGrnTime);
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <fsm_multi_mode_run+0x2b8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 f9c9 	bl	8001860 <displayCountdown>
		break;
 80004ce:	e120      	b.n	8000712 <fsm_multi_mode_run+0x4be>
			else if(isButtonPressed(BUTTON_2)) {
 80004d0:	2002      	movs	r0, #2
 80004d2:	f000 fba3 	bl	8000c1c <isButtonPressed>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	f000 811a 	beq.w	8000712 <fsm_multi_mode_run+0x4be>
				sysStatus = YEL__RED;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <fsm_multi_mode_run+0x2a0>)
 80004e0:	2204      	movs	r2, #4
 80004e2:	701a      	strb	r2, [r3, #0]
				trafficLightYel(TRAFFIC_LIGHT_1);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f001 f96f 	bl	80017c8 <trafficLightYel>
				trafficLightRed(TRAFFIC_LIGHT_2);
 80004ea:	2001      	movs	r0, #1
 80004ec:	f001 f992 	bl	8001814 <trafficLightRed>
		break;
 80004f0:	e10f      	b.n	8000712 <fsm_multi_mode_run+0x4be>
 80004f2:	bf00      	nop
 80004f4:	200003c0 	.word	0x200003c0
 80004f8:	200002cc 	.word	0x200002cc
 80004fc:	200003c4 	.word	0x200003c4
 8000500:	200002d0 	.word	0x200002d0
 8000504:	20000704 	.word	0x20000704
 8000508:	200002c8 	.word	0x200002c8
 800050c:	200003b4 	.word	0x200003b4

	case YEL__RED:
		if(auto_mode == 1) {
 8000510:	4b84      	ldr	r3, [pc, #528]	; (8000724 <fsm_multi_mode_run+0x4d0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d12d      	bne.n	8000574 <fsm_multi_mode_run+0x320>
			if(timer1_flag == 1) {
 8000518:	4b83      	ldr	r3, [pc, #524]	; (8000728 <fsm_multi_mode_run+0x4d4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d11e      	bne.n	800055e <fsm_multi_mode_run+0x30a>
				setTimer1(SECOND);
 8000520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000524:	f000 fe74 	bl	8001210 <setTimer1>
				countdown--;
 8000528:	4b80      	ldr	r3, [pc, #512]	; (800072c <fsm_multi_mode_run+0x4d8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3b01      	subs	r3, #1
 800052e:	4a7f      	ldr	r2, [pc, #508]	; (800072c <fsm_multi_mode_run+0x4d8>)
 8000530:	6013      	str	r3, [r2, #0]
				if(countdown == 0) {
 8000532:	4b7e      	ldr	r3, [pc, #504]	; (800072c <fsm_multi_mode_run+0x4d8>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d10c      	bne.n	8000554 <fsm_multi_mode_run+0x300>
					countdown = grnTime;
 800053a:	4b7d      	ldr	r3, [pc, #500]	; (8000730 <fsm_multi_mode_run+0x4dc>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a7b      	ldr	r2, [pc, #492]	; (800072c <fsm_multi_mode_run+0x4d8>)
 8000540:	6013      	str	r3, [r2, #0]
					sysStatus = RED__GRN;
 8000542:	4b7c      	ldr	r3, [pc, #496]	; (8000734 <fsm_multi_mode_run+0x4e0>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
					trafficLightRed(TRAFFIC_LIGHT_1);
 8000548:	2000      	movs	r0, #0
 800054a:	f001 f963 	bl	8001814 <trafficLightRed>
					trafficLightGrn(TRAFFIC_LIGHT_2);
 800054e:	2001      	movs	r0, #1
 8000550:	f001 f914 	bl	800177c <trafficLightGrn>
				}
				displayCountdown(countdown);
 8000554:	4b75      	ldr	r3, [pc, #468]	; (800072c <fsm_multi_mode_run+0x4d8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f001 f981 	bl	8001860 <displayCountdown>
			}

			if(isButtonPressed(BUTTON_1)) {
 800055e:	2001      	movs	r0, #1
 8000560:	f000 fb5c 	bl	8000c1c <isButtonPressed>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	f000 80d5 	beq.w	8000716 <fsm_multi_mode_run+0x4c2>
				auto_mode = 0;
 800056c:	4b6d      	ldr	r3, [pc, #436]	; (8000724 <fsm_multi_mode_run+0x4d0>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
				sysStatus = RED__GRN;
				trafficLightRed(TRAFFIC_LIGHT_1);
				trafficLightGrn(TRAFFIC_LIGHT_2);
			}
		}
		break;
 8000572:	e0d0      	b.n	8000716 <fsm_multi_mode_run+0x4c2>
			if(isButtonPressed(BUTTON_1)) {
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fb51 	bl	8000c1c <isButtonPressed>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d015      	beq.n	80005ac <fsm_multi_mode_run+0x358>
				setTimer1(LED_BLINK);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 fe45 	bl	8001210 <setTimer1>
				newGrnTime = grnTime;
 8000586:	4b6a      	ldr	r3, [pc, #424]	; (8000730 <fsm_multi_mode_run+0x4dc>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a6b      	ldr	r2, [pc, #428]	; (8000738 <fsm_multi_mode_run+0x4e4>)
 800058c:	6013      	str	r3, [r2, #0]
				sysStatus = SET_GRN;
 800058e:	4b69      	ldr	r3, [pc, #420]	; (8000734 <fsm_multi_mode_run+0x4e0>)
 8000590:	2206      	movs	r2, #6
 8000592:	701a      	strb	r2, [r3, #0]
				trafficLightGrn(TRAFFIC_LIGHT_1);
 8000594:	2000      	movs	r0, #0
 8000596:	f001 f8f1 	bl	800177c <trafficLightGrn>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 800059a:	2001      	movs	r0, #1
 800059c:	f001 f8ee 	bl	800177c <trafficLightGrn>
				displayCountdown(newGrnTime);
 80005a0:	4b65      	ldr	r3, [pc, #404]	; (8000738 <fsm_multi_mode_run+0x4e4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 f95b 	bl	8001860 <displayCountdown>
		break;
 80005aa:	e0b4      	b.n	8000716 <fsm_multi_mode_run+0x4c2>
			else if(isButtonPressed(BUTTON_2)) {
 80005ac:	2002      	movs	r0, #2
 80005ae:	f000 fb35 	bl	8000c1c <isButtonPressed>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	f000 80ae 	beq.w	8000716 <fsm_multi_mode_run+0x4c2>
				sysStatus = RED__GRN;
 80005ba:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <fsm_multi_mode_run+0x4e0>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
				trafficLightRed(TRAFFIC_LIGHT_1);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f001 f927 	bl	8001814 <trafficLightRed>
				trafficLightGrn(TRAFFIC_LIGHT_2);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 f8d8 	bl	800177c <trafficLightGrn>
		break;
 80005cc:	e0a3      	b.n	8000716 <fsm_multi_mode_run+0x4c2>

	case SET_GRN:
		if(isButtonPressed(BUTTON_1)) {
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fb24 	bl	8000c1c <isButtonPressed>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d015      	beq.n	8000606 <fsm_multi_mode_run+0x3b2>
			setTimer1(LED_BLINK);
 80005da:	2064      	movs	r0, #100	; 0x64
 80005dc:	f000 fe18 	bl	8001210 <setTimer1>
			newYelTime = yelTime;
 80005e0:	4b56      	ldr	r3, [pc, #344]	; (800073c <fsm_multi_mode_run+0x4e8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a56      	ldr	r2, [pc, #344]	; (8000740 <fsm_multi_mode_run+0x4ec>)
 80005e6:	6013      	str	r3, [r2, #0]
			sysStatus = SET_YEL;
 80005e8:	4b52      	ldr	r3, [pc, #328]	; (8000734 <fsm_multi_mode_run+0x4e0>)
 80005ea:	2205      	movs	r2, #5
 80005ec:	701a      	strb	r2, [r3, #0]
			trafficLightYel(TRAFFIC_LIGHT_1);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f001 f8ea 	bl	80017c8 <trafficLightYel>
			trafficLightYel(TRAFFIC_LIGHT_2);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f001 f8e7 	bl	80017c8 <trafficLightYel>
			displayCountdown(newYelTime);
 80005fa:	4b51      	ldr	r3, [pc, #324]	; (8000740 <fsm_multi_mode_run+0x4ec>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f92e 	bl	8001860 <displayCountdown>
 8000604:	e021      	b.n	800064a <fsm_multi_mode_run+0x3f6>
		}
		else if(isButtonPressed(BUTTON_2)) {
 8000606:	2002      	movs	r0, #2
 8000608:	f000 fb08 	bl	8000c1c <isButtonPressed>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00a      	beq.n	8000628 <fsm_multi_mode_run+0x3d4>
			newGrnTime++;
 8000612:	4b49      	ldr	r3, [pc, #292]	; (8000738 <fsm_multi_mode_run+0x4e4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a47      	ldr	r2, [pc, #284]	; (8000738 <fsm_multi_mode_run+0x4e4>)
 800061a:	6013      	str	r3, [r2, #0]
			displayCountdown(newGrnTime);
 800061c:	4b46      	ldr	r3, [pc, #280]	; (8000738 <fsm_multi_mode_run+0x4e4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f91d 	bl	8001860 <displayCountdown>
 8000626:	e010      	b.n	800064a <fsm_multi_mode_run+0x3f6>
		}
		else if(isButtonPressed(BUTTON_3)) {
 8000628:	2003      	movs	r0, #3
 800062a:	f000 faf7 	bl	8000c1c <isButtonPressed>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00a      	beq.n	800064a <fsm_multi_mode_run+0x3f6>
			grnTime = newGrnTime;
 8000634:	4b40      	ldr	r3, [pc, #256]	; (8000738 <fsm_multi_mode_run+0x4e4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a3d      	ldr	r2, [pc, #244]	; (8000730 <fsm_multi_mode_run+0x4dc>)
 800063a:	6013      	str	r3, [r2, #0]
			redTime = grnTime + yelTime;
 800063c:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <fsm_multi_mode_run+0x4dc>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b3e      	ldr	r3, [pc, #248]	; (800073c <fsm_multi_mode_run+0x4e8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4413      	add	r3, r2
 8000646:	4a3f      	ldr	r2, [pc, #252]	; (8000744 <fsm_multi_mode_run+0x4f0>)
 8000648:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 800064a:	4b37      	ldr	r3, [pc, #220]	; (8000728 <fsm_multi_mode_run+0x4d4>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d163      	bne.n	800071a <fsm_multi_mode_run+0x4c6>
			setTimer1(LED_BLINK);
 8000652:	2064      	movs	r0, #100	; 0x64
 8000654:	f000 fddc 	bl	8001210 <setTimer1>
			trafficLightBlinkGrn(TRAFFIC_LIGHT_1);
 8000658:	2000      	movs	r0, #0
 800065a:	f001 f843 	bl	80016e4 <trafficLightBlinkGrn>
			trafficLightBlinkGrn(TRAFFIC_LIGHT_2);
 800065e:	2001      	movs	r0, #1
 8000660:	f001 f840 	bl	80016e4 <trafficLightBlinkGrn>
		}
		break;
 8000664:	e059      	b.n	800071a <fsm_multi_mode_run+0x4c6>

	case SET_YEL:
		if(isButtonPressed(BUTTON_1)) {
 8000666:	2001      	movs	r0, #1
 8000668:	f000 fad8 	bl	8000c1c <isButtonPressed>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d019      	beq.n	80006a6 <fsm_multi_mode_run+0x452>
			setTimer1(SECOND);
 8000672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000676:	f000 fdcb 	bl	8001210 <setTimer1>
			countdown = grnTime;
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <fsm_multi_mode_run+0x4dc>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a2b      	ldr	r2, [pc, #172]	; (800072c <fsm_multi_mode_run+0x4d8>)
 8000680:	6013      	str	r3, [r2, #0]
			auto_mode = 1;
 8000682:	4b28      	ldr	r3, [pc, #160]	; (8000724 <fsm_multi_mode_run+0x4d0>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
			sysStatus = RED__GRN;
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <fsm_multi_mode_run+0x4e0>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
			trafficLightRed(TRAFFIC_LIGHT_1);
 800068e:	2000      	movs	r0, #0
 8000690:	f001 f8c0 	bl	8001814 <trafficLightRed>
			trafficLightGrn(TRAFFIC_LIGHT_2);
 8000694:	2001      	movs	r0, #1
 8000696:	f001 f871 	bl	800177c <trafficLightGrn>
			displayCountdown(countdown);
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <fsm_multi_mode_run+0x4d8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f8de 	bl	8001860 <displayCountdown>
 80006a4:	e021      	b.n	80006ea <fsm_multi_mode_run+0x496>
		}
		else if(isButtonPressed(BUTTON_2)) {
 80006a6:	2002      	movs	r0, #2
 80006a8:	f000 fab8 	bl	8000c1c <isButtonPressed>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d00a      	beq.n	80006c8 <fsm_multi_mode_run+0x474>
			newYelTime++;
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <fsm_multi_mode_run+0x4ec>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <fsm_multi_mode_run+0x4ec>)
 80006ba:	6013      	str	r3, [r2, #0]
			displayCountdown(newYelTime);
 80006bc:	4b20      	ldr	r3, [pc, #128]	; (8000740 <fsm_multi_mode_run+0x4ec>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 f8cd 	bl	8001860 <displayCountdown>
 80006c6:	e010      	b.n	80006ea <fsm_multi_mode_run+0x496>
		}
		else if(isButtonPressed(BUTTON_3)) {
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 faa7 	bl	8000c1c <isButtonPressed>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00a      	beq.n	80006ea <fsm_multi_mode_run+0x496>
			yelTime = newYelTime;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <fsm_multi_mode_run+0x4ec>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a18      	ldr	r2, [pc, #96]	; (800073c <fsm_multi_mode_run+0x4e8>)
 80006da:	6013      	str	r3, [r2, #0]
			redTime = grnTime + yelTime;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <fsm_multi_mode_run+0x4dc>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <fsm_multi_mode_run+0x4e8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4413      	add	r3, r2
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <fsm_multi_mode_run+0x4f0>)
 80006e8:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <fsm_multi_mode_run+0x4d4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d115      	bne.n	800071e <fsm_multi_mode_run+0x4ca>
			setTimer1(LED_BLINK);
 80006f2:	2064      	movs	r0, #100	; 0x64
 80006f4:	f000 fd8c 	bl	8001210 <setTimer1>
			trafficLightBlinkYel(TRAFFIC_LIGHT_1);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f001 f819 	bl	8001730 <trafficLightBlinkYel>
			trafficLightBlinkYel(TRAFFIC_LIGHT_2);
 80006fe:	2001      	movs	r0, #1
 8000700:	f001 f816 	bl	8001730 <trafficLightBlinkYel>
		}
		break;
 8000704:	e00b      	b.n	800071e <fsm_multi_mode_run+0x4ca>

	default: break;
 8000706:	bf00      	nop
 8000708:	e00a      	b.n	8000720 <fsm_multi_mode_run+0x4cc>
		break;
 800070a:	bf00      	nop
 800070c:	e008      	b.n	8000720 <fsm_multi_mode_run+0x4cc>
		break;
 800070e:	bf00      	nop
 8000710:	e006      	b.n	8000720 <fsm_multi_mode_run+0x4cc>
		break;
 8000712:	bf00      	nop
 8000714:	e004      	b.n	8000720 <fsm_multi_mode_run+0x4cc>
		break;
 8000716:	bf00      	nop
 8000718:	e002      	b.n	8000720 <fsm_multi_mode_run+0x4cc>
		break;
 800071a:	bf00      	nop
 800071c:	e000      	b.n	8000720 <fsm_multi_mode_run+0x4cc>
		break;
 800071e:	bf00      	nop
	}
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200002d0 	.word	0x200002d0
 8000728:	20000704 	.word	0x20000704
 800072c:	200003c4 	.word	0x200003c4
 8000730:	200002cc 	.word	0x200002cc
 8000734:	200003c0 	.word	0x200003c0
 8000738:	200003b4 	.word	0x200003b4
 800073c:	200002c8 	.word	0x200002c8
 8000740:	200003b8 	.word	0x200003b8
 8000744:	200002c4 	.word	0x200002c4

08000748 <fsm_for_pedestrian>:

#include "fsm_for_pedestrian.h"

int timeOut;

void fsm_for_pedestrian(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 800074c:	4b82      	ldr	r3, [pc, #520]	; (8000958 <fsm_for_pedestrian+0x210>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b02      	cmp	r3, #2
 8000752:	f000 80a0 	beq.w	8000896 <fsm_for_pedestrian+0x14e>
 8000756:	2b02      	cmp	r3, #2
 8000758:	f300 80fc 	bgt.w	8000954 <fsm_for_pedestrian+0x20c>
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <fsm_for_pedestrian+0x1e>
 8000760:	2b01      	cmp	r3, #1
 8000762:	d03e      	beq.n	80007e2 <fsm_for_pedestrian+0x9a>
			}
		}

		break;
	}
}
 8000764:	e0f6      	b.n	8000954 <fsm_for_pedestrian+0x20c>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 8000766:	2000      	movs	r0, #0
 8000768:	f000 fa58 	bl	8000c1c <isButtonPressed>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	f000 80eb 	beq.w	800094a <fsm_for_pedestrian+0x202>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 8000774:	4b79      	ldr	r3, [pc, #484]	; (800095c <fsm_for_pedestrian+0x214>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b79      	ldr	r3, [pc, #484]	; (8000960 <fsm_for_pedestrian+0x218>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	441a      	add	r2, r3
 800077e:	4b79      	ldr	r3, [pc, #484]	; (8000964 <fsm_for_pedestrian+0x21c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000788:	fb02 f303 	mul.w	r3, r2, r3
 800078c:	4a76      	ldr	r2, [pc, #472]	; (8000968 <fsm_for_pedestrian+0x220>)
 800078e:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 8000790:	4b75      	ldr	r3, [pc, #468]	; (8000968 <fsm_for_pedestrian+0x220>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fd57 	bl	8001248 <setTimer2>
			setTimer3(TIMER_INIT);
 800079a:	200a      	movs	r0, #10
 800079c:	f000 fd70 	bl	8001280 <setTimer3>
			if(sysStatus == RED__GRN || sysStatus == RED__YEL) {
 80007a0:	4b72      	ldr	r3, [pc, #456]	; (800096c <fsm_for_pedestrian+0x224>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d003      	beq.n	80007b0 <fsm_for_pedestrian+0x68>
 80007a8:	4b70      	ldr	r3, [pc, #448]	; (800096c <fsm_for_pedestrian+0x224>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d107      	bne.n	80007c0 <fsm_for_pedestrian+0x78>
				pedestrianStatus = GRN;
 80007b0:	4b69      	ldr	r3, [pc, #420]	; (8000958 <fsm_for_pedestrian+0x210>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
				pedestrianLightGrn();
 80007b6:	f000 fb0b 	bl	8000dd0 <pedestrianLightGrn>
				grnBuzzer();
 80007ba:	f7ff fcc7 	bl	800014c <grnBuzzer>
		break;
 80007be:	e0c4      	b.n	800094a <fsm_for_pedestrian+0x202>
			else if(sysStatus == GRN__RED || sysStatus == YEL__RED) {
 80007c0:	4b6a      	ldr	r3, [pc, #424]	; (800096c <fsm_for_pedestrian+0x224>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d004      	beq.n	80007d2 <fsm_for_pedestrian+0x8a>
 80007c8:	4b68      	ldr	r3, [pc, #416]	; (800096c <fsm_for_pedestrian+0x224>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	f040 80bc 	bne.w	800094a <fsm_for_pedestrian+0x202>
				pedestrianStatus = RED;
 80007d2:	4b61      	ldr	r3, [pc, #388]	; (8000958 <fsm_for_pedestrian+0x210>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	701a      	strb	r2, [r3, #0]
				pedestrianLightRed();
 80007d8:	f000 fb12 	bl	8000e00 <pedestrianLightRed>
				redBuzzer();
 80007dc:	f7ff fcee 	bl	80001bc <redBuzzer>
		break;
 80007e0:	e0b3      	b.n	800094a <fsm_for_pedestrian+0x202>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 fa1a 	bl	8000c1c <isButtonPressed>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d012      	beq.n	8000814 <fsm_for_pedestrian+0xcc>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 80007ee:	4b5b      	ldr	r3, [pc, #364]	; (800095c <fsm_for_pedestrian+0x214>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b5b      	ldr	r3, [pc, #364]	; (8000960 <fsm_for_pedestrian+0x218>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	441a      	add	r2, r3
 80007f8:	4b5a      	ldr	r3, [pc, #360]	; (8000964 <fsm_for_pedestrian+0x21c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000802:	fb02 f303 	mul.w	r3, r2, r3
 8000806:	4a58      	ldr	r2, [pc, #352]	; (8000968 <fsm_for_pedestrian+0x220>)
 8000808:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 800080a:	4b57      	ldr	r3, [pc, #348]	; (8000968 <fsm_for_pedestrian+0x220>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fd1a 	bl	8001248 <setTimer2>
		if(sysStatus == SET_GRN || sysStatus == SET_YEL) {
 8000814:	4b55      	ldr	r3, [pc, #340]	; (800096c <fsm_for_pedestrian+0x224>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b06      	cmp	r3, #6
 800081a:	d003      	beq.n	8000824 <fsm_for_pedestrian+0xdc>
 800081c:	4b53      	ldr	r3, [pc, #332]	; (800096c <fsm_for_pedestrian+0x224>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b05      	cmp	r3, #5
 8000822:	d109      	bne.n	8000838 <fsm_for_pedestrian+0xf0>
			setTimer2(0);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 fd0f 	bl	8001248 <setTimer2>
			pedestrianStatus = WAIT;
 800082a:	4b4b      	ldr	r3, [pc, #300]	; (8000958 <fsm_for_pedestrian+0x210>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 8000830:	f000 fafe 	bl	8000e30 <pedestrianLightOff>
			stopBuzzer();
 8000834:	f7ff fcfa 	bl	800022c <stopBuzzer>
		if(timer2_flag == 1) {
 8000838:	4b4d      	ldr	r3, [pc, #308]	; (8000970 <fsm_for_pedestrian+0x228>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d109      	bne.n	8000854 <fsm_for_pedestrian+0x10c>
			setTimer2(0);
 8000840:	2000      	movs	r0, #0
 8000842:	f000 fd01 	bl	8001248 <setTimer2>
			pedestrianStatus = WAIT;
 8000846:	4b44      	ldr	r3, [pc, #272]	; (8000958 <fsm_for_pedestrian+0x210>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 800084c:	f000 faf0 	bl	8000e30 <pedestrianLightOff>
			stopBuzzer();
 8000850:	f7ff fcec 	bl	800022c <stopBuzzer>
		if(sysStatus == GRN__RED) {
 8000854:	4b45      	ldr	r3, [pc, #276]	; (800096c <fsm_for_pedestrian+0x224>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d106      	bne.n	800086a <fsm_for_pedestrian+0x122>
			pedestrianStatus = RED;
 800085c:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <fsm_for_pedestrian+0x210>)
 800085e:	2202      	movs	r2, #2
 8000860:	701a      	strb	r2, [r3, #0]
			pedestrianLightRed();
 8000862:	f000 facd 	bl	8000e00 <pedestrianLightRed>
			redBuzzer();
 8000866:	f7ff fca9 	bl	80001bc <redBuzzer>
		if(timer3_flag == 1) {
 800086a:	4b42      	ldr	r3, [pc, #264]	; (8000974 <fsm_for_pedestrian+0x22c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d16d      	bne.n	800094e <fsm_for_pedestrian+0x206>
			if(sysStatus == RED__YEL) {
 8000872:	4b3e      	ldr	r3, [pc, #248]	; (800096c <fsm_for_pedestrian+0x224>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d107      	bne.n	800088a <fsm_for_pedestrian+0x142>
				setTimer3(LED_BLINK);
 800087a:	2064      	movs	r0, #100	; 0x64
 800087c:	f000 fd00 	bl	8001280 <setTimer3>
				pedestrianLightBlinkGrn();
 8000880:	f000 fa76 	bl	8000d70 <pedestrianLightBlinkGrn>
				grnBuzzer();
 8000884:	f7ff fc62 	bl	800014c <grnBuzzer>
		break;
 8000888:	e061      	b.n	800094e <fsm_for_pedestrian+0x206>
				setTimer3(200);
 800088a:	20c8      	movs	r0, #200	; 0xc8
 800088c:	f000 fcf8 	bl	8001280 <setTimer3>
				grnBuzzer();
 8000890:	f7ff fc5c 	bl	800014c <grnBuzzer>
		break;
 8000894:	e05b      	b.n	800094e <fsm_for_pedestrian+0x206>
		if(isButtonPressed(PEDESTRIAN_BUTTON)) {
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f9c0 	bl	8000c1c <isButtonPressed>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d012      	beq.n	80008c8 <fsm_for_pedestrian+0x180>
			timeOut = (redTime + yelTime + grnTime) * SECOND;
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <fsm_for_pedestrian+0x214>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <fsm_for_pedestrian+0x218>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	441a      	add	r2, r3
 80008ac:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <fsm_for_pedestrian+0x21c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b6:	fb02 f303 	mul.w	r3, r2, r3
 80008ba:	4a2b      	ldr	r2, [pc, #172]	; (8000968 <fsm_for_pedestrian+0x220>)
 80008bc:	6013      	str	r3, [r2, #0]
			setTimer2(timeOut);
 80008be:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <fsm_for_pedestrian+0x220>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fcc0 	bl	8001248 <setTimer2>
		if(sysStatus == SET_GRN || sysStatus == SET_YEL) {
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <fsm_for_pedestrian+0x224>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	d003      	beq.n	80008d8 <fsm_for_pedestrian+0x190>
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <fsm_for_pedestrian+0x224>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d109      	bne.n	80008ec <fsm_for_pedestrian+0x1a4>
			setTimer2(0);
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 fcb5 	bl	8001248 <setTimer2>
			pedestrianStatus = WAIT;
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <fsm_for_pedestrian+0x210>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 80008e4:	f000 faa4 	bl	8000e30 <pedestrianLightOff>
			stopBuzzer();
 80008e8:	f7ff fca0 	bl	800022c <stopBuzzer>
		if(timer2_flag == 1) {
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <fsm_for_pedestrian+0x228>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d109      	bne.n	8000908 <fsm_for_pedestrian+0x1c0>
			setTimer2(0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 fca7 	bl	8001248 <setTimer2>
			pedestrianStatus = WAIT;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <fsm_for_pedestrian+0x210>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
			pedestrianLightOff();
 8000900:	f000 fa96 	bl	8000e30 <pedestrianLightOff>
			stopBuzzer();
 8000904:	f7ff fc92 	bl	800022c <stopBuzzer>
		if(sysStatus == RED__GRN) {
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <fsm_for_pedestrian+0x224>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d106      	bne.n	800091e <fsm_for_pedestrian+0x1d6>
			pedestrianStatus = GRN;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <fsm_for_pedestrian+0x210>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
			pedestrianLightGrn();
 8000916:	f000 fa5b 	bl	8000dd0 <pedestrianLightGrn>
			grnBuzzer();
 800091a:	f7ff fc17 	bl	800014c <grnBuzzer>
		if(timer3_flag == 1) {
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <fsm_for_pedestrian+0x22c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d115      	bne.n	8000952 <fsm_for_pedestrian+0x20a>
			if(sysStatus == YEL__RED) {
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <fsm_for_pedestrian+0x224>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b04      	cmp	r3, #4
 800092c:	d107      	bne.n	800093e <fsm_for_pedestrian+0x1f6>
				setTimer3(LED_BLINK);
 800092e:	2064      	movs	r0, #100	; 0x64
 8000930:	f000 fca6 	bl	8001280 <setTimer3>
				pedestrianLightBlinkRed();
 8000934:	f000 fa34 	bl	8000da0 <pedestrianLightBlinkRed>
				redBuzzer();
 8000938:	f7ff fc40 	bl	80001bc <redBuzzer>
		break;
 800093c:	e009      	b.n	8000952 <fsm_for_pedestrian+0x20a>
				setTimer3(200);
 800093e:	20c8      	movs	r0, #200	; 0xc8
 8000940:	f000 fc9e 	bl	8001280 <setTimer3>
				redBuzzer();
 8000944:	f7ff fc3a 	bl	80001bc <redBuzzer>
		break;
 8000948:	e003      	b.n	8000952 <fsm_for_pedestrian+0x20a>
		break;
 800094a:	bf00      	nop
 800094c:	e002      	b.n	8000954 <fsm_for_pedestrian+0x20c>
		break;
 800094e:	bf00      	nop
 8000950:	e000      	b.n	8000954 <fsm_for_pedestrian+0x20c>
		break;
 8000952:	bf00      	nop
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200003c1 	.word	0x200003c1
 800095c:	200002c4 	.word	0x200002c4
 8000960:	200002c8 	.word	0x200002c8
 8000964:	200002cc 	.word	0x200002cc
 8000968:	200003bc 	.word	0x200003bc
 800096c:	200003c0 	.word	0x200003c0
 8000970:	2000070c 	.word	0x2000070c
 8000974:	20000714 	.word	0x20000714

08000978 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a44      	ldr	r2, [pc, #272]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a4:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a3e      	ldr	r2, [pc, #248]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 80009aa:	f043 0320 	orr.w	r3, r3, #32
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b39      	ldr	r3, [pc, #228]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a38      	ldr	r2, [pc, #224]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <MX_GPIO_Init+0x12c>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80009f2:	482d      	ldr	r0, [pc, #180]	; (8000aa8 <MX_GPIO_Init+0x130>)
 80009f4:	f001 fae9 	bl	8001fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80009fe:	482b      	ldr	r0, [pc, #172]	; (8000aac <MX_GPIO_Init+0x134>)
 8000a00:	f001 fae3 	bl	8001fca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <MX_GPIO_Init+0x138>)
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4619      	mov	r1, r3
 8000a18:	4826      	ldr	r0, [pc, #152]	; (8000ab4 <MX_GPIO_Init+0x13c>)
 8000a1a:	f001 f93b 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000a1e:	2313      	movs	r3, #19
 8000a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <MX_GPIO_Init+0x130>)
 8000a32:	f001 f92f 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 8000a36:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <MX_GPIO_Init+0x130>)
 8000a50:	f001 f920 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000a54:	2301      	movs	r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4619      	mov	r1, r3
 8000a66:	4811      	ldr	r0, [pc, #68]	; (8000aac <MX_GPIO_Init+0x134>)
 8000a68:	f001 f914 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000a6c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	4809      	ldr	r0, [pc, #36]	; (8000aac <MX_GPIO_Init+0x134>)
 8000a86:	f001 f905 	bl	8001c94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	; 0x28
 8000a90:	f001 f8c9 	bl	8001c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	; 0x28
 8000a96:	f001 f8e2 	bl	8001c5e <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010800 	.word	0x40010800
 8000aac:	40010c00 	.word	0x40010c00
 8000ab0:	10110000 	.word	0x10110000
 8000ab4:	40011000 	.word	0x40011000

08000ab8 <buttonRead>:
static uint8_t flagForButtonHold[NO_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonHold[NO_OF_BUTTONS] = {0, 0, 0, 0};

void buttonRead(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e08e      	b.n	8000be2 <buttonRead+0x12a>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000ac4:	4a4b      	ldr	r2, [pc, #300]	; (8000bf4 <buttonRead+0x13c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	7819      	ldrb	r1, [r3, #0]
 8000acc:	4a4a      	ldr	r2, [pc, #296]	; (8000bf8 <buttonRead+0x140>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000ad6:	4a49      	ldr	r2, [pc, #292]	; (8000bfc <buttonRead+0x144>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	7819      	ldrb	r1, [r3, #0]
 8000ade:	4a45      	ldr	r2, [pc, #276]	; (8000bf4 <buttonRead+0x13c>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000ae8:	4a45      	ldr	r2, [pc, #276]	; (8000c00 <buttonRead+0x148>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000af0:	4944      	ldr	r1, [pc, #272]	; (8000c04 <buttonRead+0x14c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4610      	mov	r0, r2
 8000afc:	f001 fa4e 	bl	8001f9c <HAL_GPIO_ReadPin>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <buttonRead+0x144>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	460a      	mov	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
		if((debounceButtonBuffer2[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer0[i])) {
 8000b0e:	4a3a      	ldr	r2, [pc, #232]	; (8000bf8 <buttonRead+0x140>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	781a      	ldrb	r2, [r3, #0]
 8000b16:	4937      	ldr	r1, [pc, #220]	; (8000bf4 <buttonRead+0x13c>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	440b      	add	r3, r1
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d15c      	bne.n	8000bdc <buttonRead+0x124>
 8000b22:	4a34      	ldr	r2, [pc, #208]	; (8000bf4 <buttonRead+0x13c>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	4934      	ldr	r1, [pc, #208]	; (8000bfc <buttonRead+0x144>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	440b      	add	r3, r1
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d152      	bne.n	8000bdc <buttonRead+0x124>
			if(buttonBuffer[i] != debounceButtonBuffer0[i]) {
 8000b36:	4a34      	ldr	r2, [pc, #208]	; (8000c08 <buttonRead+0x150>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	492f      	ldr	r1, [pc, #188]	; (8000bfc <buttonRead+0x144>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	440b      	add	r3, r1
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d02d      	beq.n	8000ba6 <buttonRead+0xee>
				buttonBuffer[i] = debounceButtonBuffer0[i];
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <buttonRead+0x144>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	7819      	ldrb	r1, [r3, #0]
 8000b52:	4a2d      	ldr	r2, [pc, #180]	; (8000c08 <buttonRead+0x150>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	460a      	mov	r2, r1
 8000b5a:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000b5c:	4a2a      	ldr	r2, [pc, #168]	; (8000c08 <buttonRead+0x150>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d118      	bne.n	8000b9a <buttonRead+0xe2>
					counterForButtonHold[i] = DURATION_FOR_BUTTON_HOLD;
 8000b68:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <buttonRead+0x154>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(SYSTEM_DELAY > 0) counterForButtonHold[i] /= SYSTEM_DELAY;
 8000b74:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <buttonRead+0x154>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b7c:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <buttonRead+0x158>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	08db      	lsrs	r3, r3, #3
 8000b84:	b299      	uxth	r1, r3
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <buttonRead+0x154>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					flagForButtonPressed[i] = 1;
 8000b8e:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <buttonRead+0x15c>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e020      	b.n	8000bdc <buttonRead+0x124>
				}
				else {
					flagForButtonHold[i] = 0;
 8000b9a:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <buttonRead+0x160>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	e01a      	b.n	8000bdc <buttonRead+0x124>
				}
			}
			else {
				if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000ba6:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <buttonRead+0x150>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d114      	bne.n	8000bdc <buttonRead+0x124>
					counterForButtonHold[i]--;
 8000bb2:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <buttonRead+0x154>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	b299      	uxth	r1, r3
 8000bbe:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <buttonRead+0x154>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonHold[i] == 0) {
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <buttonRead+0x154>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d104      	bne.n	8000bdc <buttonRead+0x124>
						flagForButtonHold[i] = 1;
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <buttonRead+0x160>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3301      	adds	r3, #1
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	f77f af6d 	ble.w	8000ac4 <buttonRead+0xc>
					}
				}
			}
		}
	}
}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200002f4 	.word	0x200002f4
 8000bf8:	200002f8 	.word	0x200002f8
 8000bfc:	200002f0 	.word	0x200002f0
 8000c00:	200002d4 	.word	0x200002d4
 8000c04:	200002e4 	.word	0x200002e4
 8000c08:	200002ec 	.word	0x200002ec
 8000c0c:	200003d0 	.word	0x200003d0
 8000c10:	cccccccd 	.word	0xcccccccd
 8000c14:	200003c8 	.word	0x200003c8
 8000c18:	200003cc 	.word	0x200003cc

08000c1c <isButtonPressed>:

int isButtonPressed(int index) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if(index < 0 || index > NO_OF_BUTTONS) return 0;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db02      	blt.n	8000c30 <isButtonPressed+0x14>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	dd01      	ble.n	8000c34 <isButtonPressed+0x18>
 8000c30:	2300      	movs	r3, #0
 8000c32:	e00d      	b.n	8000c50 <isButtonPressed+0x34>
	if(flagForButtonPressed[index] == 1) {
 8000c34:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <isButtonPressed+0x40>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d106      	bne.n	8000c4e <isButtonPressed+0x32>
		flagForButtonPressed[index] = 0;
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <isButtonPressed+0x40>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
		return 1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <isButtonPressed+0x34>
	}
	return 0;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200003c8 	.word	0x200003c8

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c64:	f000 fea6 	bl	80019b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c68:	f000 f832 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6c:	f7ff fe84 	bl	8000978 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c70:	f000 fe12 	bl	8001898 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000c74:	f000 fc56 	bl	8001524 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000c78:	f000 fc08 	bl	800148c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c7c:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <main+0x58>)
 8000c7e:	f001 fe61 	bl	8002944 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c82:	2100      	movs	r1, #0
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <main+0x5c>)
 8000c86:	f001 ff07 	bl	8002a98 <HAL_TIM_PWM_Start>

  SCH_Add_Task(&buttonRead, 0, 10);
 8000c8a:	220a      	movs	r2, #10
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <main+0x60>)
 8000c90:	f000 f8e6 	bl	8000e60 <SCH_Add_Task>
  SCH_Add_Task(&timerRun, 10, 10);
 8000c94:	220a      	movs	r2, #10
 8000c96:	210a      	movs	r1, #10
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <main+0x64>)
 8000c9a:	f000 f8e1 	bl	8000e60 <SCH_Add_Task>
  SCH_Add_Task(&fsm_multi_mode_run, 20, 10);
 8000c9e:	220a      	movs	r2, #10
 8000ca0:	2114      	movs	r1, #20
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <main+0x68>)
 8000ca4:	f000 f8dc 	bl	8000e60 <SCH_Add_Task>
  SCH_Add_Task(&fsm_for_pedestrian, 30, 10);
 8000ca8:	220a      	movs	r2, #10
 8000caa:	211e      	movs	r1, #30
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <main+0x6c>)
 8000cae:	f000 f8d7 	bl	8000e60 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCH_Dispatch_Tasks();
 8000cb2:	f000 fa61 	bl	8001178 <SCH_Dispatch_Tasks>
 8000cb6:	e7fc      	b.n	8000cb2 <main+0x52>
 8000cb8:	2000071c 	.word	0x2000071c
 8000cbc:	20000764 	.word	0x20000764
 8000cc0:	08000ab9 	.word	0x08000ab9
 8000cc4:	080012b9 	.word	0x080012b9
 8000cc8:	08000255 	.word	0x08000255
 8000ccc:	08000749 	.word	0x08000749

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b090      	sub	sp, #64	; 0x40
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0318 	add.w	r3, r7, #24
 8000cda:	2228      	movs	r2, #40	; 0x28
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 ff20 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d02:	2300      	movs	r3, #0
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d06:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0c:	f107 0318 	add.w	r3, r7, #24
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 f9ad 	bl	8002070 <HAL_RCC_OscConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d1c:	f000 f823 	bl	8000d66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d20:	230f      	movs	r3, #15
 8000d22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d24:	2302      	movs	r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fc1a 	bl	8002574 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d46:	f000 f80e 	bl	8000d66 <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3740      	adds	r7, #64	; 0x40
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000d5a:	f000 fa43 	bl	80011e4 <SCH_Update>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6a:	b672      	cpsid	i
}
 8000d6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <Error_Handler+0x8>

08000d70 <pedestrianLightBlinkGrn>:
uint16_t pedestrianLightPin[NUM_OF_PORTS] = {
		D6_Pin,
		D7_Pin
};

void pedestrianLightBlinkGrn(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT]);
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <pedestrianLightBlinkGrn+0x28>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <pedestrianLightBlinkGrn+0x2c>)
 8000d7a:	8852      	ldrh	r2, [r2, #2]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 f93b 	bl	8001ffa <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <pedestrianLightBlinkGrn+0x28>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <pedestrianLightBlinkGrn+0x2c>)
 8000d8a:	8811      	ldrh	r1, [r2, #0]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 f91b 	bl	8001fca <HAL_GPIO_WritePin>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200002fc 	.word	0x200002fc
 8000d9c:	20000304 	.word	0x20000304

08000da0 <pedestrianLightBlinkRed>:

void pedestrianLightBlinkRed(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT]);
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <pedestrianLightBlinkRed+0x28>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <pedestrianLightBlinkRed+0x2c>)
 8000daa:	8812      	ldrh	r2, [r2, #0]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 f923 	bl	8001ffa <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <pedestrianLightBlinkRed+0x28>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <pedestrianLightBlinkRed+0x2c>)
 8000dba:	8851      	ldrh	r1, [r2, #2]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 f903 	bl	8001fca <HAL_GPIO_WritePin>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200002fc 	.word	0x200002fc
 8000dcc:	20000304 	.word	0x20000304

08000dd0 <pedestrianLightGrn>:

void pedestrianLightGrn(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], ON);
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <pedestrianLightGrn+0x28>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <pedestrianLightGrn+0x2c>)
 8000dda:	8851      	ldrh	r1, [r2, #2]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 f8f3 	bl	8001fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <pedestrianLightGrn+0x28>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <pedestrianLightGrn+0x2c>)
 8000dea:	8811      	ldrh	r1, [r2, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 f8eb 	bl	8001fca <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200002fc 	.word	0x200002fc
 8000dfc:	20000304 	.word	0x20000304

08000e00 <pedestrianLightRed>:

void pedestrianLightRed(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], ON);
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <pedestrianLightRed+0x28>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <pedestrianLightRed+0x2c>)
 8000e0a:	8811      	ldrh	r1, [r2, #0]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 f8db 	bl	8001fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <pedestrianLightRed+0x28>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <pedestrianLightRed+0x2c>)
 8000e1a:	8851      	ldrh	r1, [r2, #2]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 f8d3 	bl	8001fca <HAL_GPIO_WritePin>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200002fc 	.word	0x200002fc
 8000e2c:	20000304 	.word	0x20000304

08000e30 <pedestrianLightOff>:

void pedestrianLightOff(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pedestrianLightPort[GRN_LIGHT], pedestrianLightPin[GRN_LIGHT], OFF);
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <pedestrianLightOff+0x28>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <pedestrianLightOff+0x2c>)
 8000e3a:	8851      	ldrh	r1, [r2, #2]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f8c3 	bl	8001fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(pedestrianLightPort[RED_LIGHT], pedestrianLightPin[RED_LIGHT], OFF);
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <pedestrianLightOff+0x28>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <pedestrianLightOff+0x2c>)
 8000e4a:	8811      	ldrh	r1, [r2, #0]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 f8bb 	bl	8001fca <HAL_GPIO_WritePin>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200002fc 	.word	0x200002fc
 8000e5c:	20000304 	.word	0x20000304

08000e60 <SCH_Add_Task>:
		SCH_tasks_G[Index].Period = 0;
		SCH_tasks_G[Index].RunMe = 0;
	}
}

uint32_t SCH_Add_Task(void (* pFunction)(void), uint32_t DELAY, uint32_t PERIOD) {
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
	if(Size == SCH_MAX_TASKS - 1) return SCH_MAX_TASKS;
 8000e6c:	4b7b      	ldr	r3, [pc, #492]	; (800105c <SCH_Add_Task+0x1fc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b27      	cmp	r3, #39	; 0x27
 8000e72:	d101      	bne.n	8000e78 <SCH_Add_Task+0x18>
 8000e74:	2328      	movs	r3, #40	; 0x28
 8000e76:	e0ec      	b.n	8001052 <SCH_Add_Task+0x1f2>

	uint8_t flag = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	77fb      	strb	r3, [r7, #31]
	uint32_t Index = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
	if(SYSTEM_DELAY > 0) {
		DELAY /= SYSTEM_DELAY;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4a77      	ldr	r2, [pc, #476]	; (8001060 <SCH_Add_Task+0x200>)
 8000e84:	fba2 2303 	umull	r2, r3, r2, r3
 8000e88:	08db      	lsrs	r3, r3, #3
 8000e8a:	60bb      	str	r3, [r7, #8]
	}
	for(; Index < Size && flag == 0; Index++) {
 8000e8c:	e031      	b.n	8000ef2 <SCH_Add_Task+0x92>
		if(DELAY > SCH_tasks_G[Index].Delay) {
 8000e8e:	4975      	ldr	r1, [pc, #468]	; (8001064 <SCH_Add_Task+0x204>)
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d90c      	bls.n	8000ec0 <SCH_Add_Task+0x60>
			DELAY -= SCH_tasks_G[Index].Delay;
 8000ea6:	496f      	ldr	r1, [pc, #444]	; (8001064 <SCH_Add_Task+0x204>)
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	e015      	b.n	8000eec <SCH_Add_Task+0x8c>
		}
		else {
			flag = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	77fb      	strb	r3, [r7, #31]
			SCH_tasks_G[Index].Delay -= DELAY;
 8000ec4:	4967      	ldr	r1, [pc, #412]	; (8001064 <SCH_Add_Task+0x204>)
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad1      	subs	r1, r2, r3
 8000eda:	4862      	ldr	r0, [pc, #392]	; (8001064 <SCH_Add_Task+0x204>)
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4403      	add	r3, r0
 8000ee8:	3304      	adds	r3, #4
 8000eea:	6019      	str	r1, [r3, #0]
	for(; Index < Size && flag == 0; Index++) {
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	4b5a      	ldr	r3, [pc, #360]	; (800105c <SCH_Add_Task+0x1fc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d202      	bcs.n	8000f02 <SCH_Add_Task+0xa2>
 8000efc:	7ffb      	ldrb	r3, [r7, #31]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0c5      	beq.n	8000e8e <SCH_Add_Task+0x2e>
		}
	}
	if(flag == 1) {
 8000f02:	7ffb      	ldrb	r3, [r7, #31]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d16d      	bne.n	8000fe4 <SCH_Add_Task+0x184>
		Index -= 1;
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
		for(uint32_t Temp = Size; Temp > Index; Temp--) {
 8000f0e:	4b53      	ldr	r3, [pc, #332]	; (800105c <SCH_Add_Task+0x1fc>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e062      	b.n	8000fdc <SCH_Add_Task+0x17c>
			SCH_tasks_G[Temp].pTask = SCH_tasks_G[Temp - 1].pTask;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	1e5a      	subs	r2, r3, #1
 8000f1a:	4952      	ldr	r1, [pc, #328]	; (8001064 <SCH_Add_Task+0x204>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	484e      	ldr	r0, [pc, #312]	; (8001064 <SCH_Add_Task+0x204>)
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4403      	add	r3, r0
 8000f36:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[Temp].Delay = SCH_tasks_G[Temp - 1].Delay;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	4949      	ldr	r1, [pc, #292]	; (8001064 <SCH_Add_Task+0x204>)
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	3304      	adds	r3, #4
 8000f4a:	6819      	ldr	r1, [r3, #0]
 8000f4c:	4845      	ldr	r0, [pc, #276]	; (8001064 <SCH_Add_Task+0x204>)
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4403      	add	r3, r0
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[Temp].Period = SCH_tasks_G[Temp - 1].Period;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	4940      	ldr	r1, [pc, #256]	; (8001064 <SCH_Add_Task+0x204>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3308      	adds	r3, #8
 8000f70:	6819      	ldr	r1, [r3, #0]
 8000f72:	483c      	ldr	r0, [pc, #240]	; (8001064 <SCH_Add_Task+0x204>)
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4403      	add	r3, r0
 8000f80:	3308      	adds	r3, #8
 8000f82:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[Temp].RunMe = SCH_tasks_G[Temp - 1].RunMe;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	4936      	ldr	r1, [pc, #216]	; (8001064 <SCH_Add_Task+0x204>)
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	330c      	adds	r3, #12
 8000f96:	7818      	ldrb	r0, [r3, #0]
 8000f98:	4932      	ldr	r1, [pc, #200]	; (8001064 <SCH_Add_Task+0x204>)
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	330c      	adds	r3, #12
 8000fa8:	4602      	mov	r2, r0
 8000faa:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[Temp].TaskID = SCH_tasks_G[Temp - 1].RunMe + 1;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	1e5a      	subs	r2, r3, #1
 8000fb0:	492c      	ldr	r1, [pc, #176]	; (8001064 <SCH_Add_Task+0x204>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	330c      	adds	r3, #12
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	4927      	ldr	r1, [pc, #156]	; (8001064 <SCH_Add_Task+0x204>)
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3310      	adds	r3, #16
 8000fd4:	6018      	str	r0, [r3, #0]
		for(uint32_t Temp = Size; Temp > Index; Temp--) {
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d898      	bhi.n	8000f16 <SCH_Add_Task+0xb6>
		}
	}
	SCH_tasks_G[Index].pTask = pFunction;
 8000fe4:	491f      	ldr	r1, [pc, #124]	; (8001064 <SCH_Add_Task+0x204>)
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 8000ff6:	491b      	ldr	r1, [pc, #108]	; (8001064 <SCH_Add_Task+0x204>)
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	3304      	adds	r3, #4
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 800100a:	4916      	ldr	r1, [pc, #88]	; (8001064 <SCH_Add_Task+0x204>)
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	3308      	adds	r3, #8
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 800101e:	4911      	ldr	r1, [pc, #68]	; (8001064 <SCH_Add_Task+0x204>)
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	330c      	adds	r3, #12
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[Index].TaskID = Index;
 8001032:	490c      	ldr	r1, [pc, #48]	; (8001064 <SCH_Add_Task+0x204>)
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3310      	adds	r3, #16
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	601a      	str	r2, [r3, #0]

	Size += 1;
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <SCH_Add_Task+0x1fc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a03      	ldr	r2, [pc, #12]	; (800105c <SCH_Add_Task+0x1fc>)
 800104e:	6013      	str	r3, [r2, #0]

	return Index;
 8001050:	69bb      	ldr	r3, [r7, #24]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	200006fc 	.word	0x200006fc
 8001060:	cccccccd 	.word	0xcccccccd
 8001064:	200003d8 	.word	0x200003d8

08001068 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t TASK_INDEX) {
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[TASK_INDEX].pTask == 0) return;
 8001070:	493f      	ldr	r1, [pc, #252]	; (8001170 <SCH_Delete_Task+0x108>)
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d070      	beq.n	8001166 <SCH_Delete_Task+0xfe>

	for(uint32_t Temp = TASK_INDEX; Temp < Size - 1; Temp++) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e061      	b.n	800114e <SCH_Delete_Task+0xe6>
		SCH_tasks_G[Temp].pTask = SCH_tasks_G[Temp + 1].pTask;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	4938      	ldr	r1, [pc, #224]	; (8001170 <SCH_Delete_Task+0x108>)
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	6819      	ldr	r1, [r3, #0]
 800109c:	4834      	ldr	r0, [pc, #208]	; (8001170 <SCH_Delete_Task+0x108>)
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4403      	add	r3, r0
 80010aa:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Temp].Delay = SCH_tasks_G[Temp + 1].Delay;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	492f      	ldr	r1, [pc, #188]	; (8001170 <SCH_Delete_Task+0x108>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	440b      	add	r3, r1
 80010bc:	3304      	adds	r3, #4
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	482b      	ldr	r0, [pc, #172]	; (8001170 <SCH_Delete_Task+0x108>)
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4403      	add	r3, r0
 80010ce:	3304      	adds	r3, #4
 80010d0:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Temp].Period = SCH_tasks_G[Temp + 1].Period;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	4926      	ldr	r1, [pc, #152]	; (8001170 <SCH_Delete_Task+0x108>)
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	3308      	adds	r3, #8
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	4822      	ldr	r0, [pc, #136]	; (8001170 <SCH_Delete_Task+0x108>)
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4403      	add	r3, r0
 80010f4:	3308      	adds	r3, #8
 80010f6:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Temp].RunMe = SCH_tasks_G[Temp + 1].RunMe;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	491c      	ldr	r1, [pc, #112]	; (8001170 <SCH_Delete_Task+0x108>)
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	330c      	adds	r3, #12
 800110a:	7818      	ldrb	r0, [r3, #0]
 800110c:	4918      	ldr	r1, [pc, #96]	; (8001170 <SCH_Delete_Task+0x108>)
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	330c      	adds	r3, #12
 800111c:	4602      	mov	r2, r0
 800111e:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[Temp].TaskID = SCH_tasks_G[Temp + 1].TaskID - 1;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	4912      	ldr	r1, [pc, #72]	; (8001170 <SCH_Delete_Task+0x108>)
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3310      	adds	r3, #16
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1e59      	subs	r1, r3, #1
 8001136:	480e      	ldr	r0, [pc, #56]	; (8001170 <SCH_Delete_Task+0x108>)
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4403      	add	r3, r0
 8001144:	3310      	adds	r3, #16
 8001146:	6019      	str	r1, [r3, #0]
	for(uint32_t Temp = TASK_INDEX; Temp < Size - 1; Temp++) {
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3301      	adds	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <SCH_Delete_Task+0x10c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3b01      	subs	r3, #1
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	429a      	cmp	r2, r3
 8001158:	d397      	bcc.n	800108a <SCH_Delete_Task+0x22>
	}

	Size -= 1;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SCH_Delete_Task+0x10c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3b01      	subs	r3, #1
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <SCH_Delete_Task+0x10c>)
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	e000      	b.n	8001168 <SCH_Delete_Task+0x100>
	if(SCH_tasks_G[TASK_INDEX].pTask == 0) return;
 8001166:	bf00      	nop
}
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	200003d8 	.word	0x200003d8
 8001174:	200006fc 	.word	0x200006fc

08001178 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001178:	b598      	push	{r3, r4, r7, lr}
 800117a:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe == 1) {
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <SCH_Dispatch_Tasks+0x64>)
 800117e:	7b1b      	ldrb	r3, [r3, #12]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d129      	bne.n	80011d8 <SCH_Dispatch_Tasks+0x60>
		(*SCH_tasks_G[0].pTask)();
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <SCH_Dispatch_Tasks+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4798      	blx	r3

		if(SCH_tasks_G[0].Period > 0) {
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <SCH_Dispatch_Tasks+0x64>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01f      	beq.n	80011d2 <SCH_Dispatch_Tasks+0x5a>
			SCH_Add_Task(SCH_tasks_G[Current].pTask, SCH_tasks_G[Current].Period, SCH_tasks_G[Current].Period);
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <SCH_Dispatch_Tasks+0x68>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4911      	ldr	r1, [pc, #68]	; (80011dc <SCH_Dispatch_Tasks+0x64>)
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <SCH_Dispatch_Tasks+0x68>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <SCH_Dispatch_Tasks+0x64>)
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	3308      	adds	r3, #8
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <SCH_Dispatch_Tasks+0x68>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4c07      	ldr	r4, [pc, #28]	; (80011dc <SCH_Dispatch_Tasks+0x64>)
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4423      	add	r3, r4
 80011c8:	3308      	adds	r3, #8
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	f7ff fe47 	bl	8000e60 <SCH_Add_Task>
		}

		SCH_Delete_Task(0);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff ff48 	bl	8001068 <SCH_Delete_Task>
	}
}
 80011d8:	bf00      	nop
 80011da:	bd98      	pop	{r3, r4, r7, pc}
 80011dc:	200003d8 	.word	0x200003d8
 80011e0:	200006f8 	.word	0x200006f8

080011e4 <SCH_Update>:

void SCH_Update(void) {
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].Delay == 0) {
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <SCH_Update+0x28>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d103      	bne.n	80011f8 <SCH_Update+0x14>
		SCH_tasks_G[0].RunMe = 1;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SCH_Update+0x28>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	731a      	strb	r2, [r3, #12]
	}
	else {
		SCH_tasks_G[0].Delay--;
	}
}
 80011f6:	e004      	b.n	8001202 <SCH_Update+0x1e>
		SCH_tasks_G[0].Delay--;
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <SCH_Update+0x28>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4a03      	ldr	r2, [pc, #12]	; (800120c <SCH_Update+0x28>)
 8001200:	6053      	str	r3, [r2, #4]
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	200003d8 	.word	0x200003d8

08001210 <setTimer1>:
int timer2_flag = 0;

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer1_counter = duration / SYSTEM_DELAY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <setTimer1+0x2c>)
 800121c:	fb82 1203 	smull	r1, r2, r2, r3
 8001220:	1092      	asrs	r2, r2, #2
 8001222:	17db      	asrs	r3, r3, #31
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	4a06      	ldr	r2, [pc, #24]	; (8001240 <setTimer1+0x30>)
 8001228:	6013      	str	r3, [r2, #0]
	} else timer1_counter = duration;
	timer1_flag = 0;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <setTimer1+0x34>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	66666667 	.word	0x66666667
 8001240:	20000700 	.word	0x20000700
 8001244:	20000704 	.word	0x20000704

08001248 <setTimer2>:

void setTimer2(int duration) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer2_counter = duration / SYSTEM_DELAY;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <setTimer2+0x2c>)
 8001254:	fb82 1203 	smull	r1, r2, r2, r3
 8001258:	1092      	asrs	r2, r2, #2
 800125a:	17db      	asrs	r3, r3, #31
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	4a06      	ldr	r2, [pc, #24]	; (8001278 <setTimer2+0x30>)
 8001260:	6013      	str	r3, [r2, #0]
	} else timer2_counter = duration;
	timer2_flag = 0;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <setTimer2+0x34>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	66666667 	.word	0x66666667
 8001278:	20000708 	.word	0x20000708
 800127c:	2000070c 	.word	0x2000070c

08001280 <setTimer3>:


void setTimer3(int duration) {
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	if(SYSTEM_DELAY > 0) {
		timer3_counter = duration / SYSTEM_DELAY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <setTimer3+0x2c>)
 800128c:	fb82 1203 	smull	r1, r2, r2, r3
 8001290:	1092      	asrs	r2, r2, #2
 8001292:	17db      	asrs	r3, r3, #31
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <setTimer3+0x30>)
 8001298:	6013      	str	r3, [r2, #0]
	} else timer3_counter = duration;
	timer3_flag = 0;
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <setTimer3+0x34>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	66666667 	.word	0x66666667
 80012b0:	20000710 	.word	0x20000710
 80012b4:	20000714 	.word	0x20000714

080012b8 <timerRun>:

void timerRun(void) {
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <timerRun+0x6c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd0b      	ble.n	80012dc <timerRun+0x24>
		timer1_counter--;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <timerRun+0x6c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <timerRun+0x6c>)
 80012cc:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <timerRun+0x6c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dc02      	bgt.n	80012dc <timerRun+0x24>
			timer1_flag = 1;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <timerRun+0x70>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <timerRun+0x74>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	dd0b      	ble.n	80012fc <timerRun+0x44>
		timer2_counter--;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <timerRun+0x74>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <timerRun+0x74>)
 80012ec:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <timerRun+0x74>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dc02      	bgt.n	80012fc <timerRun+0x44>
			timer2_flag = 1;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <timerRun+0x78>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <timerRun+0x7c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dd0b      	ble.n	800131c <timerRun+0x64>
		timer3_counter--;
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <timerRun+0x7c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3b01      	subs	r3, #1
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <timerRun+0x7c>)
 800130c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <timerRun+0x7c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	dc02      	bgt.n	800131c <timerRun+0x64>
			timer3_flag = 1;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <timerRun+0x80>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000700 	.word	0x20000700
 8001328:	20000704 	.word	0x20000704
 800132c:	20000708 	.word	0x20000708
 8001330:	2000070c 	.word	0x2000070c
 8001334:	20000710 	.word	0x20000710
 8001338:	20000714 	.word	0x20000714

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_MspInit+0x5c>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_MspInit+0x5c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_MspInit+0x5c>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_MspInit+0x5c>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_MspInit+0x5c>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_MspInit+0x5c>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_MspInit+0x60>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_MspInit+0x60>)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e6:	f000 fb2b 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <TIM2_IRQHandler+0x10>)
 80013f6:	f001 fbf1 	bl	8002bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000071c 	.word	0x2000071c

08001404 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001408:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800140c:	f000 fe0e 	bl	800202c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <_sbrk+0x5c>)
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <_sbrk+0x60>)
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <_sbrk+0x64>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <_sbrk+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	429a      	cmp	r2, r3
 8001442:	d207      	bcs.n	8001454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001444:	f002 fb44 	bl	8003ad0 <__errno>
 8001448:	4603      	mov	r3, r0
 800144a:	220c      	movs	r2, #12
 800144c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001452:	e009      	b.n	8001468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <_sbrk+0x64>)
 8001464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20005000 	.word	0x20005000
 8001474:	00000400 	.word	0x00000400
 8001478:	20000718 	.word	0x20000718
 800147c:	20000808 	.word	0x20000808

08001480 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	463b      	mov	r3, r7
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_TIM2_Init+0x94>)
 80014aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_TIM2_Init+0x94>)
 80014b2:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80014b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_TIM2_Init+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_TIM2_Init+0x94>)
 80014c0:	2263      	movs	r2, #99	; 0x63
 80014c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_TIM2_Init+0x94>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_TIM2_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <MX_TIM2_Init+0x94>)
 80014d2:	f001 f9e7 	bl	80028a4 <HAL_TIM_Base_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014dc:	f7ff fc43 	bl	8000d66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	4619      	mov	r1, r3
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <MX_TIM2_Init+0x94>)
 80014ee:	f001 fd3b 	bl	8002f68 <HAL_TIM_ConfigClockSource>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014f8:	f7ff fc35 	bl	8000d66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_TIM2_Init+0x94>)
 800150a:	f002 f8b9 	bl	8003680 <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001514:	f7ff fc27 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000071c 	.word	0x2000071c

08001524 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	; 0x38
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	f107 0320 	add.w	r3, r7, #32
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	615a      	str	r2, [r3, #20]
 8001552:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001554:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <MX_TIM3_Init+0xe4>)
 8001556:	4a2d      	ldr	r2, [pc, #180]	; (800160c <MX_TIM3_Init+0xe8>)
 8001558:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800155a:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <MX_TIM3_Init+0xe4>)
 800155c:	223f      	movs	r2, #63	; 0x3f
 800155e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <MX_TIM3_Init+0xe4>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <MX_TIM3_Init+0xe4>)
 8001568:	f240 32e7 	movw	r2, #999	; 0x3e7
 800156c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <MX_TIM3_Init+0xe4>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <MX_TIM3_Init+0xe4>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800157a:	4823      	ldr	r0, [pc, #140]	; (8001608 <MX_TIM3_Init+0xe4>)
 800157c:	f001 f992 	bl	80028a4 <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001586:	f7ff fbee 	bl	8000d66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001594:	4619      	mov	r1, r3
 8001596:	481c      	ldr	r0, [pc, #112]	; (8001608 <MX_TIM3_Init+0xe4>)
 8001598:	f001 fce6 	bl	8002f68 <HAL_TIM_ConfigClockSource>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015a2:	f7ff fbe0 	bl	8000d66 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015a6:	4818      	ldr	r0, [pc, #96]	; (8001608 <MX_TIM3_Init+0xe4>)
 80015a8:	f001 fa1e 	bl	80029e8 <HAL_TIM_PWM_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015b2:	f7ff fbd8 	bl	8000d66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	4619      	mov	r1, r3
 80015c4:	4810      	ldr	r0, [pc, #64]	; (8001608 <MX_TIM3_Init+0xe4>)
 80015c6:	f002 f85b 	bl	8003680 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015d0:	f7ff fbc9 	bl	8000d66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d4:	2360      	movs	r3, #96	; 0x60
 80015d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM3_Init+0xe4>)
 80015ec:	f001 fbfe 	bl	8002dec <HAL_TIM_PWM_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015f6:	f7ff fbb6 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM3_Init+0xe4>)
 80015fc:	f000 f840 	bl	8001680 <HAL_TIM_MspPostInit>

}
 8001600:	bf00      	nop
 8001602:	3738      	adds	r7, #56	; 0x38
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000764 	.word	0x20000764
 800160c:	40000400 	.word	0x40000400

08001610 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001620:	d114      	bne.n	800164c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	201c      	movs	r0, #28
 8001640:	f000 faf1 	bl	8001c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001644:	201c      	movs	r0, #28
 8001646:	f000 fb0a 	bl	8001c5e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800164a:	e010      	b.n	800166e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_TIM_Base_MspInit+0x6c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10b      	bne.n	800166e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_TIM_Base_MspInit+0x68>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40000400 	.word	0x40000400

08001680 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_TIM_MspPostInit+0x58>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d117      	bne.n	80016d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_TIM_MspPostInit+0x5c>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <HAL_TIM_MspPostInit+0x5c>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_TIM_MspPostInit+0x5c>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 80016b8:	2340      	movs	r3, #64	; 0x40
 80016ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_TIM_MspPostInit+0x60>)
 80016cc:	f000 fae2 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40000400 	.word	0x40000400
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010800 	.word	0x40010800

080016e4 <trafficLightBlinkGrn>:
uint16_t trafficLightPin[NUM_OF_TRAFFIC_LIGHTS][NUM_OF_PORTS] = {
		{D2_Pin, D3_Pin},
		{D4_Pin, D5_Pin}
};

void trafficLightBlinkGrn(int index) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT]);
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <trafficLightBlinkGrn+0x44>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	490d      	ldr	r1, [pc, #52]	; (800172c <trafficLightBlinkGrn+0x48>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	885b      	ldrh	r3, [r3, #2]
 8001700:	4619      	mov	r1, r3
 8001702:	4610      	mov	r0, r2
 8001704:	f000 fc79 	bl	8001ffa <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], OFF);
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <trafficLightBlinkGrn+0x44>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <trafficLightBlinkGrn+0x48>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	f000 fc55 	bl	8001fca <HAL_GPIO_WritePin>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000030c 	.word	0x2000030c
 800172c:	2000031c 	.word	0x2000031c

08001730 <trafficLightBlinkYel>:

void trafficLightBlinkYel(int index) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT]);
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <trafficLightBlinkYel+0x44>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	490d      	ldr	r1, [pc, #52]	; (8001778 <trafficLightBlinkYel+0x48>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	885b      	ldrh	r3, [r3, #2]
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f000 fc53 	bl	8001ffa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT]);
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <trafficLightBlinkYel+0x44>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800175c:	4906      	ldr	r1, [pc, #24]	; (8001778 <trafficLightBlinkYel+0x48>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f000 fc47 	bl	8001ffa <HAL_GPIO_TogglePin>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000030c 	.word	0x2000030c
 8001778:	2000031c 	.word	0x2000031c

0800177c <trafficLightGrn>:
void trafficLightBlinkRed(int index) {
	HAL_GPIO_TogglePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT]);
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], OFF);
}

void trafficLightGrn(int index) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], ON);
 8001784:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <trafficLightGrn+0x44>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	6858      	ldr	r0, [r3, #4]
 800178e:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <trafficLightGrn+0x48>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	885b      	ldrh	r3, [r3, #2]
 8001798:	2201      	movs	r2, #1
 800179a:	4619      	mov	r1, r3
 800179c:	f000 fc15 	bl	8001fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], OFF);
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <trafficLightGrn+0x44>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <trafficLightGrn+0x48>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80017b0:	2200      	movs	r2, #0
 80017b2:	4619      	mov	r1, r3
 80017b4:	f000 fc09 	bl	8001fca <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000030c 	.word	0x2000030c
 80017c4:	2000031c 	.word	0x2000031c

080017c8 <trafficLightYel>:

void trafficLightYel(int index) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], ON);
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <trafficLightYel+0x44>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
 80017d8:	6858      	ldr	r0, [r3, #4]
 80017da:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <trafficLightYel+0x48>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	885b      	ldrh	r3, [r3, #2]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4619      	mov	r1, r3
 80017e8:	f000 fbef 	bl	8001fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], ON);
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <trafficLightYel+0x44>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <trafficLightYel+0x48>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4619      	mov	r1, r3
 8001800:	f000 fbe3 	bl	8001fca <HAL_GPIO_WritePin>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000030c 	.word	0x2000030c
 8001810:	2000031c 	.word	0x2000031c

08001814 <trafficLightRed>:

void trafficLightRed(int index) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trafficLightPort[index][RED_LIGHT], trafficLightPin[index][RED_LIGHT], ON);
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <trafficLightRed+0x44>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <trafficLightRed+0x48>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800182c:	2201      	movs	r2, #1
 800182e:	4619      	mov	r1, r3
 8001830:	f000 fbcb 	bl	8001fca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(trafficLightPort[index][GRN_LIGHT], trafficLightPin[index][GRN_LIGHT], OFF);
 8001834:	4a08      	ldr	r2, [pc, #32]	; (8001858 <trafficLightRed+0x44>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	6858      	ldr	r0, [r3, #4]
 800183e:	4a07      	ldr	r2, [pc, #28]	; (800185c <trafficLightRed+0x48>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	885b      	ldrh	r3, [r3, #2]
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	f000 fbbd 	bl	8001fca <HAL_GPIO_WritePin>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000030c 	.word	0x2000030c
 800185c:	2000031c 	.word	0x2000031c

08001860 <displayCountdown>:
 */


#include "uart_communication.h"

void displayCountdown(int value) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b090      	sub	sp, #64	; 0x40
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	char str[50];
	HAL_UART_Transmit(&huart2, (uint8_t *)str, sprintf(str, "!7SEG=%d#\r\n", value), 1000);
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <displayCountdown+0x30>)
 8001870:	4618      	mov	r0, r3
 8001872:	f002 f95f 	bl	8003b34 <siprintf>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	f107 010c 	add.w	r1, r7, #12
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	4804      	ldr	r0, [pc, #16]	; (8001894 <displayCountdown+0x34>)
 8001884:	f001 ffb9 	bl	80037fa <HAL_UART_Transmit>
}
 8001888:	bf00      	nop
 800188a:	3740      	adds	r7, #64	; 0x40
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	08004440 	.word	0x08004440
 8001894:	200007ac 	.word	0x200007ac

08001898 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART2_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART2_UART_Init+0x4c>)
 80018d0:	f001 ff46 	bl	8003760 <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f7ff fa44 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200007ac 	.word	0x200007ac
 80018e8:	40004400 	.word	0x40004400

080018ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <HAL_UART_MspInit+0x70>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d123      	bne.n	8001954 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_UART_MspInit+0x74>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	4a13      	ldr	r2, [pc, #76]	; (8001960 <HAL_UART_MspInit+0x74>)
 8001912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001916:	61d3      	str	r3, [r2, #28]
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_UART_MspInit+0x74>)
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_UART_MspInit+0x74>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <HAL_UART_MspInit+0x74>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_UART_MspInit+0x74>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800193c:	230c      	movs	r3, #12
 800193e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2302      	movs	r3, #2
 8001946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	4619      	mov	r1, r3
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <HAL_UART_MspInit+0x78>)
 8001950:	f000 f9a0 	bl	8001c94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001954:	bf00      	nop
 8001956:	3720      	adds	r7, #32
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40004400 	.word	0x40004400
 8001960:	40021000 	.word	0x40021000
 8001964:	40010800 	.word	0x40010800

08001968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196a:	490d      	ldr	r1, [pc, #52]	; (80019a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001980:	4c0a      	ldr	r4, [pc, #40]	; (80019ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800198e:	f7ff fd77 	bl	8001480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001992:	f002 f8a3 	bl	8003adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001996:	f7ff f963 	bl	8000c60 <main>
  bx lr
 800199a:	4770      	bx	lr
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 80019a4:	08004774 	.word	0x08004774
  ldr r2, =_sbss
 80019a8:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 80019ac:	20000804 	.word	0x20000804

080019b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC1_2_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_Init+0x28>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x28>)
 80019be:	f043 0310 	orr.w	r3, r3, #16
 80019c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 f923 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fcb4 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f93b 	bl	8001c7a <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a1c:	f000 f903 	bl	8001c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000308 	.word	0x20000308
 8001a38:	20000328 	.word	0x20000328
 8001a3c:	20000324 	.word	0x20000324

08001a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_IncTick+0x1c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_IncTick+0x20>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <HAL_IncTick+0x20>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000328 	.word	0x20000328
 8001a60:	200007f0 	.word	0x200007f0

08001a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <HAL_GetTick+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	200007f0 	.word	0x200007f0

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4906      	ldr	r1, [pc, #24]	; (8001b10 <__NVIC_EnableIRQ+0x34>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bdc:	d301      	bcc.n	8001be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00f      	b.n	8001c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <SysTick_Config+0x40>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bea:	210f      	movs	r1, #15
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf0:	f7ff ff90 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SysTick_Config+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <SysTick_Config+0x40>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff2d 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c38:	f7ff ff42 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f7ff ff90 	bl	8001b68 <NVIC_EncodePriority>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff5f 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff35 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffa2 	bl	8001bcc <SysTick_Config>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b08b      	sub	sp, #44	; 0x2c
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca6:	e169      	b.n	8001f7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 8158 	bne.w	8001f76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4a9a      	ldr	r2, [pc, #616]	; (8001f34 <HAL_GPIO_Init+0x2a0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d05e      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001cd0:	4a98      	ldr	r2, [pc, #608]	; (8001f34 <HAL_GPIO_Init+0x2a0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d875      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001cd6:	4a98      	ldr	r2, [pc, #608]	; (8001f38 <HAL_GPIO_Init+0x2a4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d058      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001cdc:	4a96      	ldr	r2, [pc, #600]	; (8001f38 <HAL_GPIO_Init+0x2a4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d86f      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001ce2:	4a96      	ldr	r2, [pc, #600]	; (8001f3c <HAL_GPIO_Init+0x2a8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d052      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001ce8:	4a94      	ldr	r2, [pc, #592]	; (8001f3c <HAL_GPIO_Init+0x2a8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d869      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001cee:	4a94      	ldr	r2, [pc, #592]	; (8001f40 <HAL_GPIO_Init+0x2ac>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d04c      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001cf4:	4a92      	ldr	r2, [pc, #584]	; (8001f40 <HAL_GPIO_Init+0x2ac>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d863      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001cfa:	4a92      	ldr	r2, [pc, #584]	; (8001f44 <HAL_GPIO_Init+0x2b0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d046      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001d00:	4a90      	ldr	r2, [pc, #576]	; (8001f44 <HAL_GPIO_Init+0x2b0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d85d      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	d82a      	bhi.n	8001d60 <HAL_GPIO_Init+0xcc>
 8001d0a:	2b12      	cmp	r3, #18
 8001d0c:	d859      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001d0e:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <HAL_GPIO_Init+0x80>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d8f 	.word	0x08001d8f
 8001d18:	08001d69 	.word	0x08001d69
 8001d1c:	08001d7b 	.word	0x08001d7b
 8001d20:	08001dbd 	.word	0x08001dbd
 8001d24:	08001dc3 	.word	0x08001dc3
 8001d28:	08001dc3 	.word	0x08001dc3
 8001d2c:	08001dc3 	.word	0x08001dc3
 8001d30:	08001dc3 	.word	0x08001dc3
 8001d34:	08001dc3 	.word	0x08001dc3
 8001d38:	08001dc3 	.word	0x08001dc3
 8001d3c:	08001dc3 	.word	0x08001dc3
 8001d40:	08001dc3 	.word	0x08001dc3
 8001d44:	08001dc3 	.word	0x08001dc3
 8001d48:	08001dc3 	.word	0x08001dc3
 8001d4c:	08001dc3 	.word	0x08001dc3
 8001d50:	08001dc3 	.word	0x08001dc3
 8001d54:	08001dc3 	.word	0x08001dc3
 8001d58:	08001d71 	.word	0x08001d71
 8001d5c:	08001d85 	.word	0x08001d85
 8001d60:	4a79      	ldr	r2, [pc, #484]	; (8001f48 <HAL_GPIO_Init+0x2b4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d66:	e02c      	b.n	8001dc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	623b      	str	r3, [r7, #32]
          break;
 8001d6e:	e029      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	3304      	adds	r3, #4
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	e024      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	3308      	adds	r3, #8
 8001d80:	623b      	str	r3, [r7, #32]
          break;
 8001d82:	e01f      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	330c      	adds	r3, #12
 8001d8a:	623b      	str	r3, [r7, #32]
          break;
 8001d8c:	e01a      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d96:	2304      	movs	r3, #4
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e013      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da4:	2308      	movs	r3, #8
 8001da6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	611a      	str	r2, [r3, #16]
          break;
 8001dae:	e009      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db0:	2308      	movs	r3, #8
 8001db2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	615a      	str	r2, [r3, #20]
          break;
 8001dba:	e003      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          break;
 8001dc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2bff      	cmp	r3, #255	; 0xff
 8001dc8:	d801      	bhi.n	8001dce <HAL_GPIO_Init+0x13a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	e001      	b.n	8001dd2 <HAL_GPIO_Init+0x13e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d802      	bhi.n	8001de0 <HAL_GPIO_Init+0x14c>
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	e002      	b.n	8001de6 <HAL_GPIO_Init+0x152>
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	3b08      	subs	r3, #8
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	210f      	movs	r1, #15
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	401a      	ands	r2, r3
 8001df8:	6a39      	ldr	r1, [r7, #32]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	431a      	orrs	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80b1 	beq.w	8001f76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a4c      	ldr	r2, [pc, #304]	; (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e2c:	4a48      	ldr	r2, [pc, #288]	; (8001f50 <HAL_GPIO_Init+0x2bc>)
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a40      	ldr	r2, [pc, #256]	; (8001f54 <HAL_GPIO_Init+0x2c0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d013      	beq.n	8001e80 <HAL_GPIO_Init+0x1ec>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a3f      	ldr	r2, [pc, #252]	; (8001f58 <HAL_GPIO_Init+0x2c4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00d      	beq.n	8001e7c <HAL_GPIO_Init+0x1e8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a3e      	ldr	r2, [pc, #248]	; (8001f5c <HAL_GPIO_Init+0x2c8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <HAL_GPIO_Init+0x1e4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3d      	ldr	r2, [pc, #244]	; (8001f60 <HAL_GPIO_Init+0x2cc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_GPIO_Init+0x1e0>
 8001e70:	2303      	movs	r3, #3
 8001e72:	e006      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e74:	2304      	movs	r3, #4
 8001e76:	e004      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e80:	2300      	movs	r3, #0
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	f002 0203 	and.w	r2, r2, #3
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	4093      	lsls	r3, r2
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e92:	492f      	ldr	r1, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x2bc>)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	492c      	ldr	r1, [pc, #176]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eba:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4928      	ldr	r1, [pc, #160]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed4:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4922      	ldr	r1, [pc, #136]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	491e      	ldr	r1, [pc, #120]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4918      	ldr	r1, [pc, #96]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	608b      	str	r3, [r1, #8]
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	4914      	ldr	r1, [pc, #80]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d021      	beq.n	8001f68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
 8001f30:	e021      	b.n	8001f76 <HAL_GPIO_Init+0x2e2>
 8001f32:	bf00      	nop
 8001f34:	10320000 	.word	0x10320000
 8001f38:	10310000 	.word	0x10310000
 8001f3c:	10220000 	.word	0x10220000
 8001f40:	10210000 	.word	0x10210000
 8001f44:	10120000 	.word	0x10120000
 8001f48:	10110000 	.word	0x10110000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40010800 	.word	0x40010800
 8001f58:	40010c00 	.word	0x40010c00
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	40011400 	.word	0x40011400
 8001f64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	4909      	ldr	r1, [pc, #36]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	3301      	adds	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f47f ae8e 	bne.w	8001ca8 <HAL_GPIO_Init+0x14>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	372c      	adds	r7, #44	; 0x2c
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	40010400 	.word	0x40010400

08001f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e001      	b.n	8001fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	807b      	strh	r3, [r7, #2]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fda:	787b      	ldrb	r3, [r7, #1]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe0:	887a      	ldrh	r2, [r7, #2]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fe6:	e003      	b.n	8001ff0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	041a      	lsls	r2, r3, #16
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	611a      	str	r2, [r3, #16]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b085      	sub	sp, #20
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800200c:	887a      	ldrh	r2, [r7, #2]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	041a      	lsls	r2, r3, #16
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43d9      	mvns	r1, r3
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	400b      	ands	r3, r1
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	611a      	str	r2, [r3, #16]
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f806 	bl	800205c <HAL_GPIO_EXTI_Callback>
  }
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40010400 	.word	0x40010400

0800205c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e272      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8087 	beq.w	800219e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002090:	4b92      	ldr	r3, [pc, #584]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	d00c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800209c:	4b8f      	ldr	r3, [pc, #572]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d112      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
 80020a8:	4b8c      	ldr	r3, [pc, #560]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d10b      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d06c      	beq.n	800219c <HAL_RCC_OscConfig+0x12c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d168      	bne.n	800219c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e24c      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x76>
 80020d8:	4b80      	ldr	r3, [pc, #512]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a7f      	ldr	r2, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e02e      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x98>
 80020ee:	4b7b      	ldr	r3, [pc, #492]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7a      	ldr	r2, [pc, #488]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b78      	ldr	r3, [pc, #480]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a77      	ldr	r2, [pc, #476]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e01d      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0xbc>
 8002112:	4b72      	ldr	r3, [pc, #456]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a71      	ldr	r2, [pc, #452]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 800212c:	4b6b      	ldr	r3, [pc, #428]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a6a      	ldr	r2, [pc, #424]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b68      	ldr	r3, [pc, #416]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a67      	ldr	r2, [pc, #412]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff fc8a 	bl	8001a64 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff fc86 	bl	8001a64 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e200      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b5d      	ldr	r3, [pc, #372]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0xe4>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fc76 	bl	8001a64 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fc72 	bl	8001a64 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1ec      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x10c>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d063      	beq.n	8002272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021aa:	4b4c      	ldr	r3, [pc, #304]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021b6:	4b49      	ldr	r3, [pc, #292]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d11c      	bne.n	80021fc <HAL_RCC_OscConfig+0x18c>
 80021c2:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d116      	bne.n	80021fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_RCC_OscConfig+0x176>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e1c0      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4939      	ldr	r1, [pc, #228]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	e03a      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff fc2b 	bl	8001a64 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002212:	f7ff fc27 	bl	8001a64 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e1a1      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4927      	ldr	r1, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
 8002244:	e015      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fc0a 	bl	8001a64 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002254:	f7ff fc06 	bl	8001a64 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e180      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03a      	beq.n	80022f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d019      	beq.n	80022ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7ff fbea 	bl	8001a64 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7ff fbe6 	bl	8001a64 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e160      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f000 fad8 	bl	8002868 <RCC_Delay>
 80022b8:	e01c      	b.n	80022f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7ff fbd0 	bl	8001a64 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c6:	e00f      	b.n	80022e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c8:	f7ff fbcc 	bl	8001a64 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d908      	bls.n	80022e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e146      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	42420000 	.word	0x42420000
 80022e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4b92      	ldr	r3, [pc, #584]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e9      	bne.n	80022c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a6 	beq.w	800244e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002306:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10d      	bne.n	800232e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a87      	ldr	r2, [pc, #540]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231c:	61d3      	str	r3, [r2, #28]
 800231e:	4b85      	ldr	r3, [pc, #532]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232a:	2301      	movs	r3, #1
 800232c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232e:	4b82      	ldr	r3, [pc, #520]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d118      	bne.n	800236c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233a:	4b7f      	ldr	r3, [pc, #508]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7e      	ldr	r2, [pc, #504]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002346:	f7ff fb8d 	bl	8001a64 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7ff fb89 	bl	8001a64 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e103      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b75      	ldr	r3, [pc, #468]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x312>
 8002374:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	e02d      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x334>
 800238a:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a69      	ldr	r2, [pc, #420]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6213      	str	r3, [r2, #32]
 8002396:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a66      	ldr	r2, [pc, #408]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 0304 	bic.w	r3, r3, #4
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	e01c      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d10c      	bne.n	80023c6 <HAL_RCC_OscConfig+0x356>
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a60      	ldr	r2, [pc, #384]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	e00b      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 80023c6:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a5a      	ldr	r2, [pc, #360]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	4b58      	ldr	r3, [pc, #352]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a57      	ldr	r2, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d015      	beq.n	8002412 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7ff fb3d 	bl	8001a64 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7ff fb39 	bl	8001a64 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0b1      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002404:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ee      	beq.n	80023ee <HAL_RCC_OscConfig+0x37e>
 8002410:	e014      	b.n	800243c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7ff fb27 	bl	8001a64 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7ff fb23 	bl	8001a64 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e09b      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002430:	4b40      	ldr	r3, [pc, #256]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ee      	bne.n	800241a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800243c:	7dfb      	ldrb	r3, [r7, #23]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d105      	bne.n	800244e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002442:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a3b      	ldr	r2, [pc, #236]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8087 	beq.w	8002566 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d061      	beq.n	8002528 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d146      	bne.n	80024fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246c:	4b33      	ldr	r3, [pc, #204]	; (800253c <HAL_RCC_OscConfig+0x4cc>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7ff faf7 	bl	8001a64 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7ff faf3 	bl	8001a64 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e06d      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d108      	bne.n	80024b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4921      	ldr	r1, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a19      	ldr	r1, [r3, #32]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	430b      	orrs	r3, r1
 80024c6:	491b      	ldr	r1, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fac7 	bl	8001a64 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff fac3 	bl	8001a64 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e03d      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x46a>
 80024f8:	e035      	b.n	8002566 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_RCC_OscConfig+0x4cc>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff fab0 	bl	8001a64 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7ff faac 	bl	8001a64 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e026      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x498>
 8002526:	e01e      	b.n	8002566 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e019      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
 800253c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x500>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	429a      	cmp	r2, r3
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0d0      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d910      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b67      	ldr	r3, [pc, #412]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	4965      	ldr	r1, [pc, #404]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d040      	beq.n	8002694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d115      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e073      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e06b      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4936      	ldr	r1, [pc, #216]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002664:	f7ff f9fe 	bl	8001a64 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7ff f9fa 	bl	8001a64 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e053      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 020c 	and.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d1eb      	bne.n	800266c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d210      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4922      	ldr	r1, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002702:	f000 f821 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x1c8>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1cc>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1d0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f95c 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40022000 	.word	0x40022000
 8002738:	40021000 	.word	0x40021000
 800273c:	08004720 	.word	0x08004720
 8002740:	20000308 	.word	0x20000308
 8002744:	20000324 	.word	0x20000324

08002748 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b490      	push	{r4, r7}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002750:	1d3c      	adds	r4, r7, #4
 8002752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002758:	f240 2301 	movw	r3, #513	; 0x201
 800275c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002772:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b04      	cmp	r3, #4
 8002780:	d002      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x40>
 8002782:	2b08      	cmp	r3, #8
 8002784:	d003      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x46>
 8002786:	e02b      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800278a:	623b      	str	r3, [r7, #32]
      break;
 800278c:	e02b      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	0c9b      	lsrs	r3, r3, #18
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3328      	adds	r3, #40	; 0x28
 8002798:	443b      	add	r3, r7
 800279a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800279e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0c5b      	lsrs	r3, r3, #17
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	3328      	adds	r3, #40	; 0x28
 80027b6:	443b      	add	r3, r7
 80027b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80027c2:	fb03 f202 	mul.w	r2, r3, r2
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	e004      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	623b      	str	r3, [r7, #32]
      break;
 80027de:	e002      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e2:	623b      	str	r3, [r7, #32]
      break;
 80027e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e6:	6a3b      	ldr	r3, [r7, #32]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3728      	adds	r7, #40	; 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc90      	pop	{r4, r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	0800444c 	.word	0x0800444c
 80027f8:	40021000 	.word	0x40021000
 80027fc:	007a1200 	.word	0x007a1200
 8002800:	003d0900 	.word	0x003d0900

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b02      	ldr	r3, [pc, #8]	; (8002814 <HAL_RCC_GetHCLKFreq+0x10>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	20000308 	.word	0x20000308

08002818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800281c:	f7ff fff2 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4903      	ldr	r1, [pc, #12]	; (800283c <HAL_RCC_GetPCLK1Freq+0x24>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	08004730 	.word	0x08004730

08002840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002844:	f7ff ffde 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	0adb      	lsrs	r3, r3, #11
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	08004730 	.word	0x08004730

08002868 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <RCC_Delay+0x34>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <RCC_Delay+0x38>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0a5b      	lsrs	r3, r3, #9
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002884:	bf00      	nop
  }
  while (Delay --);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	60fa      	str	r2, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f9      	bne.n	8002884 <RCC_Delay+0x1c>
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	20000308 	.word	0x20000308
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e041      	b.n	800293a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fea0 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f000 fc28 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d001      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e03a      	b.n	80029d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_TIM_Base_Start_IT+0x98>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00e      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x58>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002986:	d009      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x58>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x58>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d111      	bne.n	80029c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d010      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029be:	e007      	b.n	80029d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800

080029e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e041      	b.n	8002a7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f839 	bl	8002a86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f000 fb86 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_TIM_PWM_Start+0x24>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e022      	b.n	8002b02 <HAL_TIM_PWM_Start+0x6a>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d109      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0x3e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	e015      	b.n	8002b02 <HAL_TIM_PWM_Start+0x6a>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d109      	bne.n	8002af0 <HAL_TIM_PWM_Start+0x58>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e008      	b.n	8002b02 <HAL_TIM_PWM_Start+0x6a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	bf14      	ite	ne
 8002afc:	2301      	movne	r3, #1
 8002afe:	2300      	moveq	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e05e      	b.n	8002bc8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0x82>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b18:	e013      	b.n	8002b42 <HAL_TIM_PWM_Start+0xaa>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_PWM_Start+0x92>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b28:	e00b      	b.n	8002b42 <HAL_TIM_PWM_Start+0xaa>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Start+0xa2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b38:	e003      	b.n	8002b42 <HAL_TIM_PWM_Start+0xaa>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2201      	movs	r2, #1
 8002b48:	6839      	ldr	r1, [r7, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fd74 	bl	8003638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <HAL_TIM_PWM_Start+0x138>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d107      	bne.n	8002b6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_TIM_PWM_Start+0x138>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00e      	beq.n	8002b92 <HAL_TIM_PWM_Start+0xfa>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d009      	beq.n	8002b92 <HAL_TIM_PWM_Start+0xfa>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_TIM_PWM_Start+0x13c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_TIM_PWM_Start+0xfa>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_TIM_PWM_Start+0x140>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d111      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d010      	beq.n	8002bc6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	e007      	b.n	8002bc6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0201 	orr.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40012c00 	.word	0x40012c00
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	40000800 	.word	0x40000800

08002bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d122      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d11b      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0202 	mvn.w	r2, #2
 8002c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fa6f 	bl	8003102 <HAL_TIM_IC_CaptureCallback>
 8002c24:	e005      	b.n	8002c32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fa62 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fa71 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d122      	bne.n	8002c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d11b      	bne.n	8002c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0204 	mvn.w	r2, #4
 8002c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa45 	bl	8003102 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fa38 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fa47 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d122      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0208 	mvn.w	r2, #8
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa1b 	bl	8003102 <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa0e 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fa1d 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0210 	mvn.w	r2, #16
 8002d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2208      	movs	r2, #8
 8002d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f9f1 	bl	8003102 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f9e4 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f9f3 	bl	8003114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d10e      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0201 	mvn.w	r2, #1
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fd fff9 	bl	8000d52 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b80      	cmp	r3, #128	; 0x80
 8002d6c:	d10e      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	2b80      	cmp	r3, #128	; 0x80
 8002d7a:	d107      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fce1 	bl	800374e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d10e      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d107      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f9b7 	bl	8003126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d10e      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d107      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0220 	mvn.w	r2, #32
 8002ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fcac 	bl	800373c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e0ac      	b.n	8002f60 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	f200 809f 	bhi.w	8002f54 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e16:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08002f55 	.word	0x08002f55
 8002e24:	08002f55 	.word	0x08002f55
 8002e28:	08002f55 	.word	0x08002f55
 8002e2c:	08002e91 	.word	0x08002e91
 8002e30:	08002f55 	.word	0x08002f55
 8002e34:	08002f55 	.word	0x08002f55
 8002e38:	08002f55 	.word	0x08002f55
 8002e3c:	08002ed3 	.word	0x08002ed3
 8002e40:	08002f55 	.word	0x08002f55
 8002e44:	08002f55 	.word	0x08002f55
 8002e48:	08002f55 	.word	0x08002f55
 8002e4c:	08002f13 	.word	0x08002f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f9d0 	bl	80031fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0208 	orr.w	r2, r2, #8
 8002e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0204 	bic.w	r2, r2, #4
 8002e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6999      	ldr	r1, [r3, #24]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	619a      	str	r2, [r3, #24]
      break;
 8002e8e:	e062      	b.n	8002f56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fa16 	bl	80032c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6999      	ldr	r1, [r3, #24]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	021a      	lsls	r2, r3, #8
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	619a      	str	r2, [r3, #24]
      break;
 8002ed0:	e041      	b.n	8002f56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fa5f 	bl	800339c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0208 	orr.w	r2, r2, #8
 8002eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0204 	bic.w	r2, r2, #4
 8002efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69d9      	ldr	r1, [r3, #28]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	61da      	str	r2, [r3, #28]
      break;
 8002f10:	e021      	b.n	8002f56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 faa9 	bl	8003470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69d9      	ldr	r1, [r3, #28]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	021a      	lsls	r2, r3, #8
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	61da      	str	r2, [r3, #28]
      break;
 8002f52:	e000      	b.n	8002f56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIM_ConfigClockSource+0x18>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e0b3      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x180>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fa6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb8:	d03e      	beq.n	8003038 <HAL_TIM_ConfigClockSource+0xd0>
 8002fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fbe:	f200 8087 	bhi.w	80030d0 <HAL_TIM_ConfigClockSource+0x168>
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc6:	f000 8085 	beq.w	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fce:	d87f      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x168>
 8002fd0:	2b70      	cmp	r3, #112	; 0x70
 8002fd2:	d01a      	beq.n	800300a <HAL_TIM_ConfigClockSource+0xa2>
 8002fd4:	2b70      	cmp	r3, #112	; 0x70
 8002fd6:	d87b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x168>
 8002fd8:	2b60      	cmp	r3, #96	; 0x60
 8002fda:	d050      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x116>
 8002fdc:	2b60      	cmp	r3, #96	; 0x60
 8002fde:	d877      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x168>
 8002fe0:	2b50      	cmp	r3, #80	; 0x50
 8002fe2:	d03c      	beq.n	800305e <HAL_TIM_ConfigClockSource+0xf6>
 8002fe4:	2b50      	cmp	r3, #80	; 0x50
 8002fe6:	d873      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x168>
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d058      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x136>
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d86f      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x168>
 8002ff0:	2b30      	cmp	r3, #48	; 0x30
 8002ff2:	d064      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x156>
 8002ff4:	2b30      	cmp	r3, #48	; 0x30
 8002ff6:	d86b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x168>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d060      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x156>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d867      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x168>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d05c      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x156>
 8003004:	2b10      	cmp	r3, #16
 8003006:	d05a      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003008:	e062      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6899      	ldr	r1, [r3, #8]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f000 faee 	bl	80035fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800302c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	609a      	str	r2, [r3, #8]
      break;
 8003036:	e04e      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6899      	ldr	r1, [r3, #8]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f000 fad7 	bl	80035fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800305a:	609a      	str	r2, [r3, #8]
      break;
 800305c:	e03b      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	461a      	mov	r2, r3
 800306c:	f000 fa4e 	bl	800350c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2150      	movs	r1, #80	; 0x50
 8003076:	4618      	mov	r0, r3
 8003078:	f000 faa5 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 800307c:	e02b      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	461a      	mov	r2, r3
 800308c:	f000 fa6c 	bl	8003568 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2160      	movs	r1, #96	; 0x60
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fa95 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 800309c:	e01b      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f000 fa2e 	bl	800350c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2140      	movs	r1, #64	; 0x40
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fa85 	bl	80035c6 <TIM_ITRx_SetConfig>
      break;
 80030bc:	e00b      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f000 fa7c 	bl	80035c6 <TIM_ITRx_SetConfig>
        break;
 80030ce:	e002      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <TIM_Base_SetConfig+0xb8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00b      	beq.n	8003168 <TIM_Base_SetConfig+0x30>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003156:	d007      	beq.n	8003168 <TIM_Base_SetConfig+0x30>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <TIM_Base_SetConfig+0xbc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_Base_SetConfig+0x30>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <TIM_Base_SetConfig+0xc0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <TIM_Base_SetConfig+0xb8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00b      	beq.n	800319a <TIM_Base_SetConfig+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0x62>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <TIM_Base_SetConfig+0xbc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0x62>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <TIM_Base_SetConfig+0xc0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a07      	ldr	r2, [pc, #28]	; (80031f0 <TIM_Base_SetConfig+0xb8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d103      	bne.n	80031e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	615a      	str	r2, [r3, #20]
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800

080031fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f023 0201 	bic.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f023 0302 	bic.w	r3, r3, #2
 8003244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <TIM_OC1_SetConfig+0xc8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d10c      	bne.n	8003272 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f023 0308 	bic.w	r3, r3, #8
 800325e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <TIM_OC1_SetConfig+0xc8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d111      	bne.n	800329e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	621a      	str	r2, [r3, #32]
}
 80032b8:	bf00      	nop
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40012c00 	.word	0x40012c00

080032c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f023 0210 	bic.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f023 0320 	bic.w	r3, r3, #32
 8003312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <TIM_OC2_SetConfig+0xd0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d10d      	bne.n	8003344 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a14      	ldr	r2, [pc, #80]	; (8003398 <TIM_OC2_SetConfig+0xd0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d113      	bne.n	8003374 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	40012c00 	.word	0x40012c00

0800339c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <TIM_OC3_SetConfig+0xd0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10d      	bne.n	8003416 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a14      	ldr	r2, [pc, #80]	; (800346c <TIM_OC3_SetConfig+0xd0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d113      	bne.n	8003446 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800342c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00

08003470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a0f      	ldr	r2, [pc, #60]	; (8003508 <TIM_OC4_SetConfig+0x98>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d109      	bne.n	80034e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	40012c00 	.word	0x40012c00

0800350c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0201 	bic.w	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f023 030a 	bic.w	r3, r3, #10
 8003548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f023 0210 	bic.w	r2, r3, #16
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003592:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	031b      	lsls	r3, r3, #12
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	621a      	str	r2, [r3, #32]
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f043 0307 	orr.w	r3, r3, #7
 80035e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b087      	sub	sp, #28
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003614:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	021a      	lsls	r2, r3, #8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	431a      	orrs	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	609a      	str	r2, [r3, #8]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2201      	movs	r2, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1a      	ldr	r2, [r3, #32]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	43db      	mvns	r3, r3
 800365a:	401a      	ands	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1a      	ldr	r2, [r3, #32]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003694:	2302      	movs	r3, #2
 8003696:	e046      	b.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a16      	ldr	r2, [pc, #88]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e4:	d009      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a12      	ldr	r2, [pc, #72]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a10      	ldr	r2, [pc, #64]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d10c      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4313      	orrs	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800

0800373c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e03f      	b.n	80037f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fe f8b0 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f905 	bl	80039b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b08a      	sub	sp, #40	; 0x28
 80037fe:	af02      	add	r7, sp, #8
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b20      	cmp	r3, #32
 8003818:	d17c      	bne.n	8003914 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_UART_Transmit+0x2c>
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e075      	b.n	8003916 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_UART_Transmit+0x3e>
 8003834:	2302      	movs	r3, #2
 8003836:	e06e      	b.n	8003916 <HAL_UART_Transmit+0x11c>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2221      	movs	r2, #33	; 0x21
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800384e:	f7fe f909 	bl	8001a64 <HAL_GetTick>
 8003852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003868:	d108      	bne.n	800387c <HAL_UART_Transmit+0x82>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d104      	bne.n	800387c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	e003      	b.n	8003884 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800388c:	e02a      	b.n	80038e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f840 	bl	800391e <UART_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e036      	b.n	8003916 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	3302      	adds	r3, #2
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	e007      	b.n	80038d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	3301      	adds	r3, #1
 80038d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1cf      	bne.n	800388e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2140      	movs	r1, #64	; 0x40
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f810 	bl	800391e <UART_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e006      	b.n	8003916 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392e:	e02c      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003936:	d028      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <UART_WaitOnFlagUntilTimeout+0x30>
 800393e:	f7fe f891 	bl	8001a64 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	429a      	cmp	r2, r3
 800394c:	d21d      	bcs.n	800398a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800395c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e00f      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d0c3      	beq.n	8003930 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039ee:	f023 030c 	bic.w	r3, r3, #12
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <UART_SetConfig+0x114>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d103      	bne.n	8003a24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a1c:	f7fe ff10 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	e002      	b.n	8003a2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7fe fef8 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8003a28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009a      	lsls	r2, r3, #2
 8003a34:	441a      	add	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	4a22      	ldr	r2, [pc, #136]	; (8003acc <UART_SetConfig+0x118>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	0119      	lsls	r1, r3, #4
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <UART_SetConfig+0x118>)
 8003a62:	fba3 0302 	umull	r0, r3, r3, r2
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2064      	movs	r0, #100	; 0x64
 8003a6a:	fb00 f303 	mul.w	r3, r0, r3
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	3332      	adds	r3, #50	; 0x32
 8003a74:	4a15      	ldr	r2, [pc, #84]	; (8003acc <UART_SetConfig+0x118>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a80:	4419      	add	r1, r3
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	009a      	lsls	r2, r3, #2
 8003a8c:	441a      	add	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a98:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <UART_SetConfig+0x118>)
 8003a9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2064      	movs	r0, #100	; 0x64
 8003aa2:	fb00 f303 	mul.w	r3, r0, r3
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	3332      	adds	r3, #50	; 0x32
 8003aac:	4a07      	ldr	r2, [pc, #28]	; (8003acc <UART_SetConfig+0x118>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	f003 020f 	and.w	r2, r3, #15
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	440a      	add	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ac0:	bf00      	nop
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	51eb851f 	.word	0x51eb851f

08003ad0 <__errno>:
 8003ad0:	4b01      	ldr	r3, [pc, #4]	; (8003ad8 <__errno+0x8>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	2000032c 	.word	0x2000032c

08003adc <__libc_init_array>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	2600      	movs	r6, #0
 8003ae0:	4d0c      	ldr	r5, [pc, #48]	; (8003b14 <__libc_init_array+0x38>)
 8003ae2:	4c0d      	ldr	r4, [pc, #52]	; (8003b18 <__libc_init_array+0x3c>)
 8003ae4:	1b64      	subs	r4, r4, r5
 8003ae6:	10a4      	asrs	r4, r4, #2
 8003ae8:	42a6      	cmp	r6, r4
 8003aea:	d109      	bne.n	8003b00 <__libc_init_array+0x24>
 8003aec:	f000 fc9c 	bl	8004428 <_init>
 8003af0:	2600      	movs	r6, #0
 8003af2:	4d0a      	ldr	r5, [pc, #40]	; (8003b1c <__libc_init_array+0x40>)
 8003af4:	4c0a      	ldr	r4, [pc, #40]	; (8003b20 <__libc_init_array+0x44>)
 8003af6:	1b64      	subs	r4, r4, r5
 8003af8:	10a4      	asrs	r4, r4, #2
 8003afa:	42a6      	cmp	r6, r4
 8003afc:	d105      	bne.n	8003b0a <__libc_init_array+0x2e>
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b04:	4798      	blx	r3
 8003b06:	3601      	adds	r6, #1
 8003b08:	e7ee      	b.n	8003ae8 <__libc_init_array+0xc>
 8003b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0e:	4798      	blx	r3
 8003b10:	3601      	adds	r6, #1
 8003b12:	e7f2      	b.n	8003afa <__libc_init_array+0x1e>
 8003b14:	0800476c 	.word	0x0800476c
 8003b18:	0800476c 	.word	0x0800476c
 8003b1c:	0800476c 	.word	0x0800476c
 8003b20:	08004770 	.word	0x08004770

08003b24 <memset>:
 8003b24:	4603      	mov	r3, r0
 8003b26:	4402      	add	r2, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <siprintf>:
 8003b34:	b40e      	push	{r1, r2, r3}
 8003b36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b3a:	b500      	push	{lr}
 8003b3c:	b09c      	sub	sp, #112	; 0x70
 8003b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b40:	9002      	str	r0, [sp, #8]
 8003b42:	9006      	str	r0, [sp, #24]
 8003b44:	9107      	str	r1, [sp, #28]
 8003b46:	9104      	str	r1, [sp, #16]
 8003b48:	4808      	ldr	r0, [pc, #32]	; (8003b6c <siprintf+0x38>)
 8003b4a:	4909      	ldr	r1, [pc, #36]	; (8003b70 <siprintf+0x3c>)
 8003b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b50:	9105      	str	r1, [sp, #20]
 8003b52:	6800      	ldr	r0, [r0, #0]
 8003b54:	a902      	add	r1, sp, #8
 8003b56:	9301      	str	r3, [sp, #4]
 8003b58:	f000 f868 	bl	8003c2c <_svfiprintf_r>
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	9b02      	ldr	r3, [sp, #8]
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	b01c      	add	sp, #112	; 0x70
 8003b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b68:	b003      	add	sp, #12
 8003b6a:	4770      	bx	lr
 8003b6c:	2000032c 	.word	0x2000032c
 8003b70:	ffff0208 	.word	0xffff0208

08003b74 <__ssputs_r>:
 8003b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b78:	688e      	ldr	r6, [r1, #8]
 8003b7a:	4682      	mov	sl, r0
 8003b7c:	429e      	cmp	r6, r3
 8003b7e:	460c      	mov	r4, r1
 8003b80:	4690      	mov	r8, r2
 8003b82:	461f      	mov	r7, r3
 8003b84:	d838      	bhi.n	8003bf8 <__ssputs_r+0x84>
 8003b86:	898a      	ldrh	r2, [r1, #12]
 8003b88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b8c:	d032      	beq.n	8003bf4 <__ssputs_r+0x80>
 8003b8e:	6825      	ldr	r5, [r4, #0]
 8003b90:	6909      	ldr	r1, [r1, #16]
 8003b92:	3301      	adds	r3, #1
 8003b94:	eba5 0901 	sub.w	r9, r5, r1
 8003b98:	6965      	ldr	r5, [r4, #20]
 8003b9a:	444b      	add	r3, r9
 8003b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ba4:	106d      	asrs	r5, r5, #1
 8003ba6:	429d      	cmp	r5, r3
 8003ba8:	bf38      	it	cc
 8003baa:	461d      	movcc	r5, r3
 8003bac:	0553      	lsls	r3, r2, #21
 8003bae:	d531      	bpl.n	8003c14 <__ssputs_r+0xa0>
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	f000 fb6f 	bl	8004294 <_malloc_r>
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	b950      	cbnz	r0, 8003bd0 <__ssputs_r+0x5c>
 8003bba:	230c      	movs	r3, #12
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bc0:	f8ca 3000 	str.w	r3, [sl]
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bca:	81a3      	strh	r3, [r4, #12]
 8003bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd0:	464a      	mov	r2, r9
 8003bd2:	6921      	ldr	r1, [r4, #16]
 8003bd4:	f000 face 	bl	8004174 <memcpy>
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be2:	81a3      	strh	r3, [r4, #12]
 8003be4:	6126      	str	r6, [r4, #16]
 8003be6:	444e      	add	r6, r9
 8003be8:	6026      	str	r6, [r4, #0]
 8003bea:	463e      	mov	r6, r7
 8003bec:	6165      	str	r5, [r4, #20]
 8003bee:	eba5 0509 	sub.w	r5, r5, r9
 8003bf2:	60a5      	str	r5, [r4, #8]
 8003bf4:	42be      	cmp	r6, r7
 8003bf6:	d900      	bls.n	8003bfa <__ssputs_r+0x86>
 8003bf8:	463e      	mov	r6, r7
 8003bfa:	4632      	mov	r2, r6
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	6820      	ldr	r0, [r4, #0]
 8003c00:	f000 fac6 	bl	8004190 <memmove>
 8003c04:	68a3      	ldr	r3, [r4, #8]
 8003c06:	2000      	movs	r0, #0
 8003c08:	1b9b      	subs	r3, r3, r6
 8003c0a:	60a3      	str	r3, [r4, #8]
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	4433      	add	r3, r6
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	e7db      	b.n	8003bcc <__ssputs_r+0x58>
 8003c14:	462a      	mov	r2, r5
 8003c16:	f000 fbb1 	bl	800437c <_realloc_r>
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	d1e1      	bne.n	8003be4 <__ssputs_r+0x70>
 8003c20:	4650      	mov	r0, sl
 8003c22:	6921      	ldr	r1, [r4, #16]
 8003c24:	f000 face 	bl	80041c4 <_free_r>
 8003c28:	e7c7      	b.n	8003bba <__ssputs_r+0x46>
	...

08003c2c <_svfiprintf_r>:
 8003c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c30:	4698      	mov	r8, r3
 8003c32:	898b      	ldrh	r3, [r1, #12]
 8003c34:	4607      	mov	r7, r0
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	460d      	mov	r5, r1
 8003c3a:	4614      	mov	r4, r2
 8003c3c:	b09d      	sub	sp, #116	; 0x74
 8003c3e:	d50e      	bpl.n	8003c5e <_svfiprintf_r+0x32>
 8003c40:	690b      	ldr	r3, [r1, #16]
 8003c42:	b963      	cbnz	r3, 8003c5e <_svfiprintf_r+0x32>
 8003c44:	2140      	movs	r1, #64	; 0x40
 8003c46:	f000 fb25 	bl	8004294 <_malloc_r>
 8003c4a:	6028      	str	r0, [r5, #0]
 8003c4c:	6128      	str	r0, [r5, #16]
 8003c4e:	b920      	cbnz	r0, 8003c5a <_svfiprintf_r+0x2e>
 8003c50:	230c      	movs	r3, #12
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c58:	e0d1      	b.n	8003dfe <_svfiprintf_r+0x1d2>
 8003c5a:	2340      	movs	r3, #64	; 0x40
 8003c5c:	616b      	str	r3, [r5, #20]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9309      	str	r3, [sp, #36]	; 0x24
 8003c62:	2320      	movs	r3, #32
 8003c64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c68:	2330      	movs	r3, #48	; 0x30
 8003c6a:	f04f 0901 	mov.w	r9, #1
 8003c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e18 <_svfiprintf_r+0x1ec>
 8003c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	469a      	mov	sl, r3
 8003c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c82:	b10a      	cbz	r2, 8003c88 <_svfiprintf_r+0x5c>
 8003c84:	2a25      	cmp	r2, #37	; 0x25
 8003c86:	d1f9      	bne.n	8003c7c <_svfiprintf_r+0x50>
 8003c88:	ebba 0b04 	subs.w	fp, sl, r4
 8003c8c:	d00b      	beq.n	8003ca6 <_svfiprintf_r+0x7a>
 8003c8e:	465b      	mov	r3, fp
 8003c90:	4622      	mov	r2, r4
 8003c92:	4629      	mov	r1, r5
 8003c94:	4638      	mov	r0, r7
 8003c96:	f7ff ff6d 	bl	8003b74 <__ssputs_r>
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	f000 80aa 	beq.w	8003df4 <_svfiprintf_r+0x1c8>
 8003ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ca2:	445a      	add	r2, fp
 8003ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80a2 	beq.w	8003df4 <_svfiprintf_r+0x1c8>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cba:	f10a 0a01 	add.w	sl, sl, #1
 8003cbe:	9304      	str	r3, [sp, #16]
 8003cc0:	9307      	str	r3, [sp, #28]
 8003cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8003cc8:	4654      	mov	r4, sl
 8003cca:	2205      	movs	r2, #5
 8003ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd0:	4851      	ldr	r0, [pc, #324]	; (8003e18 <_svfiprintf_r+0x1ec>)
 8003cd2:	f000 fa41 	bl	8004158 <memchr>
 8003cd6:	9a04      	ldr	r2, [sp, #16]
 8003cd8:	b9d8      	cbnz	r0, 8003d12 <_svfiprintf_r+0xe6>
 8003cda:	06d0      	lsls	r0, r2, #27
 8003cdc:	bf44      	itt	mi
 8003cde:	2320      	movmi	r3, #32
 8003ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ce4:	0711      	lsls	r1, r2, #28
 8003ce6:	bf44      	itt	mi
 8003ce8:	232b      	movmi	r3, #43	; 0x2b
 8003cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cee:	f89a 3000 	ldrb.w	r3, [sl]
 8003cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf4:	d015      	beq.n	8003d22 <_svfiprintf_r+0xf6>
 8003cf6:	4654      	mov	r4, sl
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f04f 0c0a 	mov.w	ip, #10
 8003cfe:	9a07      	ldr	r2, [sp, #28]
 8003d00:	4621      	mov	r1, r4
 8003d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d06:	3b30      	subs	r3, #48	; 0x30
 8003d08:	2b09      	cmp	r3, #9
 8003d0a:	d94e      	bls.n	8003daa <_svfiprintf_r+0x17e>
 8003d0c:	b1b0      	cbz	r0, 8003d3c <_svfiprintf_r+0x110>
 8003d0e:	9207      	str	r2, [sp, #28]
 8003d10:	e014      	b.n	8003d3c <_svfiprintf_r+0x110>
 8003d12:	eba0 0308 	sub.w	r3, r0, r8
 8003d16:	fa09 f303 	lsl.w	r3, r9, r3
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	46a2      	mov	sl, r4
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	e7d2      	b.n	8003cc8 <_svfiprintf_r+0x9c>
 8003d22:	9b03      	ldr	r3, [sp, #12]
 8003d24:	1d19      	adds	r1, r3, #4
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	9103      	str	r1, [sp, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bfbb      	ittet	lt
 8003d2e:	425b      	neglt	r3, r3
 8003d30:	f042 0202 	orrlt.w	r2, r2, #2
 8003d34:	9307      	strge	r3, [sp, #28]
 8003d36:	9307      	strlt	r3, [sp, #28]
 8003d38:	bfb8      	it	lt
 8003d3a:	9204      	strlt	r2, [sp, #16]
 8003d3c:	7823      	ldrb	r3, [r4, #0]
 8003d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d40:	d10c      	bne.n	8003d5c <_svfiprintf_r+0x130>
 8003d42:	7863      	ldrb	r3, [r4, #1]
 8003d44:	2b2a      	cmp	r3, #42	; 0x2a
 8003d46:	d135      	bne.n	8003db4 <_svfiprintf_r+0x188>
 8003d48:	9b03      	ldr	r3, [sp, #12]
 8003d4a:	3402      	adds	r4, #2
 8003d4c:	1d1a      	adds	r2, r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	9203      	str	r2, [sp, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bfb8      	it	lt
 8003d56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d5a:	9305      	str	r3, [sp, #20]
 8003d5c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003e1c <_svfiprintf_r+0x1f0>
 8003d60:	2203      	movs	r2, #3
 8003d62:	4650      	mov	r0, sl
 8003d64:	7821      	ldrb	r1, [r4, #0]
 8003d66:	f000 f9f7 	bl	8004158 <memchr>
 8003d6a:	b140      	cbz	r0, 8003d7e <_svfiprintf_r+0x152>
 8003d6c:	2340      	movs	r3, #64	; 0x40
 8003d6e:	eba0 000a 	sub.w	r0, r0, sl
 8003d72:	fa03 f000 	lsl.w	r0, r3, r0
 8003d76:	9b04      	ldr	r3, [sp, #16]
 8003d78:	3401      	adds	r4, #1
 8003d7a:	4303      	orrs	r3, r0
 8003d7c:	9304      	str	r3, [sp, #16]
 8003d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d82:	2206      	movs	r2, #6
 8003d84:	4826      	ldr	r0, [pc, #152]	; (8003e20 <_svfiprintf_r+0x1f4>)
 8003d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d8a:	f000 f9e5 	bl	8004158 <memchr>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d038      	beq.n	8003e04 <_svfiprintf_r+0x1d8>
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <_svfiprintf_r+0x1f8>)
 8003d94:	bb1b      	cbnz	r3, 8003dde <_svfiprintf_r+0x1b2>
 8003d96:	9b03      	ldr	r3, [sp, #12]
 8003d98:	3307      	adds	r3, #7
 8003d9a:	f023 0307 	bic.w	r3, r3, #7
 8003d9e:	3308      	adds	r3, #8
 8003da0:	9303      	str	r3, [sp, #12]
 8003da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da4:	4433      	add	r3, r6
 8003da6:	9309      	str	r3, [sp, #36]	; 0x24
 8003da8:	e767      	b.n	8003c7a <_svfiprintf_r+0x4e>
 8003daa:	460c      	mov	r4, r1
 8003dac:	2001      	movs	r0, #1
 8003dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8003db2:	e7a5      	b.n	8003d00 <_svfiprintf_r+0xd4>
 8003db4:	2300      	movs	r3, #0
 8003db6:	f04f 0c0a 	mov.w	ip, #10
 8003dba:	4619      	mov	r1, r3
 8003dbc:	3401      	adds	r4, #1
 8003dbe:	9305      	str	r3, [sp, #20]
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dc6:	3a30      	subs	r2, #48	; 0x30
 8003dc8:	2a09      	cmp	r2, #9
 8003dca:	d903      	bls.n	8003dd4 <_svfiprintf_r+0x1a8>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0c5      	beq.n	8003d5c <_svfiprintf_r+0x130>
 8003dd0:	9105      	str	r1, [sp, #20]
 8003dd2:	e7c3      	b.n	8003d5c <_svfiprintf_r+0x130>
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ddc:	e7f0      	b.n	8003dc0 <_svfiprintf_r+0x194>
 8003dde:	ab03      	add	r3, sp, #12
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	462a      	mov	r2, r5
 8003de4:	4638      	mov	r0, r7
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <_svfiprintf_r+0x1fc>)
 8003de8:	a904      	add	r1, sp, #16
 8003dea:	f3af 8000 	nop.w
 8003dee:	1c42      	adds	r2, r0, #1
 8003df0:	4606      	mov	r6, r0
 8003df2:	d1d6      	bne.n	8003da2 <_svfiprintf_r+0x176>
 8003df4:	89ab      	ldrh	r3, [r5, #12]
 8003df6:	065b      	lsls	r3, r3, #25
 8003df8:	f53f af2c 	bmi.w	8003c54 <_svfiprintf_r+0x28>
 8003dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dfe:	b01d      	add	sp, #116	; 0x74
 8003e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e04:	ab03      	add	r3, sp, #12
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	462a      	mov	r2, r5
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <_svfiprintf_r+0x1fc>)
 8003e0e:	a904      	add	r1, sp, #16
 8003e10:	f000 f87c 	bl	8003f0c <_printf_i>
 8003e14:	e7eb      	b.n	8003dee <_svfiprintf_r+0x1c2>
 8003e16:	bf00      	nop
 8003e18:	08004738 	.word	0x08004738
 8003e1c:	0800473e 	.word	0x0800473e
 8003e20:	08004742 	.word	0x08004742
 8003e24:	00000000 	.word	0x00000000
 8003e28:	08003b75 	.word	0x08003b75

08003e2c <_printf_common>:
 8003e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e30:	4616      	mov	r6, r2
 8003e32:	4699      	mov	r9, r3
 8003e34:	688a      	ldr	r2, [r1, #8]
 8003e36:	690b      	ldr	r3, [r1, #16]
 8003e38:	4607      	mov	r7, r0
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	bfb8      	it	lt
 8003e3e:	4613      	movlt	r3, r2
 8003e40:	6033      	str	r3, [r6, #0]
 8003e42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e46:	460c      	mov	r4, r1
 8003e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e4c:	b10a      	cbz	r2, 8003e52 <_printf_common+0x26>
 8003e4e:	3301      	adds	r3, #1
 8003e50:	6033      	str	r3, [r6, #0]
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	0699      	lsls	r1, r3, #26
 8003e56:	bf42      	ittt	mi
 8003e58:	6833      	ldrmi	r3, [r6, #0]
 8003e5a:	3302      	addmi	r3, #2
 8003e5c:	6033      	strmi	r3, [r6, #0]
 8003e5e:	6825      	ldr	r5, [r4, #0]
 8003e60:	f015 0506 	ands.w	r5, r5, #6
 8003e64:	d106      	bne.n	8003e74 <_printf_common+0x48>
 8003e66:	f104 0a19 	add.w	sl, r4, #25
 8003e6a:	68e3      	ldr	r3, [r4, #12]
 8003e6c:	6832      	ldr	r2, [r6, #0]
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	42ab      	cmp	r3, r5
 8003e72:	dc28      	bgt.n	8003ec6 <_printf_common+0x9a>
 8003e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e78:	1e13      	subs	r3, r2, #0
 8003e7a:	6822      	ldr	r2, [r4, #0]
 8003e7c:	bf18      	it	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	0692      	lsls	r2, r2, #26
 8003e82:	d42d      	bmi.n	8003ee0 <_printf_common+0xb4>
 8003e84:	4649      	mov	r1, r9
 8003e86:	4638      	mov	r0, r7
 8003e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e8c:	47c0      	blx	r8
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d020      	beq.n	8003ed4 <_printf_common+0xa8>
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	68e5      	ldr	r5, [r4, #12]
 8003e96:	f003 0306 	and.w	r3, r3, #6
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	bf18      	it	ne
 8003e9e:	2500      	movne	r5, #0
 8003ea0:	6832      	ldr	r2, [r6, #0]
 8003ea2:	f04f 0600 	mov.w	r6, #0
 8003ea6:	68a3      	ldr	r3, [r4, #8]
 8003ea8:	bf08      	it	eq
 8003eaa:	1aad      	subeq	r5, r5, r2
 8003eac:	6922      	ldr	r2, [r4, #16]
 8003eae:	bf08      	it	eq
 8003eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	bfc4      	itt	gt
 8003eb8:	1a9b      	subgt	r3, r3, r2
 8003eba:	18ed      	addgt	r5, r5, r3
 8003ebc:	341a      	adds	r4, #26
 8003ebe:	42b5      	cmp	r5, r6
 8003ec0:	d11a      	bne.n	8003ef8 <_printf_common+0xcc>
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e008      	b.n	8003ed8 <_printf_common+0xac>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4652      	mov	r2, sl
 8003eca:	4649      	mov	r1, r9
 8003ecc:	4638      	mov	r0, r7
 8003ece:	47c0      	blx	r8
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d103      	bne.n	8003edc <_printf_common+0xb0>
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003edc:	3501      	adds	r5, #1
 8003ede:	e7c4      	b.n	8003e6a <_printf_common+0x3e>
 8003ee0:	2030      	movs	r0, #48	; 0x30
 8003ee2:	18e1      	adds	r1, r4, r3
 8003ee4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eee:	4422      	add	r2, r4
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ef6:	e7c5      	b.n	8003e84 <_printf_common+0x58>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	4622      	mov	r2, r4
 8003efc:	4649      	mov	r1, r9
 8003efe:	4638      	mov	r0, r7
 8003f00:	47c0      	blx	r8
 8003f02:	3001      	adds	r0, #1
 8003f04:	d0e6      	beq.n	8003ed4 <_printf_common+0xa8>
 8003f06:	3601      	adds	r6, #1
 8003f08:	e7d9      	b.n	8003ebe <_printf_common+0x92>
	...

08003f0c <_printf_i>:
 8003f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f10:	7e0f      	ldrb	r7, [r1, #24]
 8003f12:	4691      	mov	r9, r2
 8003f14:	2f78      	cmp	r7, #120	; 0x78
 8003f16:	4680      	mov	r8, r0
 8003f18:	460c      	mov	r4, r1
 8003f1a:	469a      	mov	sl, r3
 8003f1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f22:	d807      	bhi.n	8003f34 <_printf_i+0x28>
 8003f24:	2f62      	cmp	r7, #98	; 0x62
 8003f26:	d80a      	bhi.n	8003f3e <_printf_i+0x32>
 8003f28:	2f00      	cmp	r7, #0
 8003f2a:	f000 80d9 	beq.w	80040e0 <_printf_i+0x1d4>
 8003f2e:	2f58      	cmp	r7, #88	; 0x58
 8003f30:	f000 80a4 	beq.w	800407c <_printf_i+0x170>
 8003f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f3c:	e03a      	b.n	8003fb4 <_printf_i+0xa8>
 8003f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f42:	2b15      	cmp	r3, #21
 8003f44:	d8f6      	bhi.n	8003f34 <_printf_i+0x28>
 8003f46:	a101      	add	r1, pc, #4	; (adr r1, 8003f4c <_printf_i+0x40>)
 8003f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f4c:	08003fa5 	.word	0x08003fa5
 8003f50:	08003fb9 	.word	0x08003fb9
 8003f54:	08003f35 	.word	0x08003f35
 8003f58:	08003f35 	.word	0x08003f35
 8003f5c:	08003f35 	.word	0x08003f35
 8003f60:	08003f35 	.word	0x08003f35
 8003f64:	08003fb9 	.word	0x08003fb9
 8003f68:	08003f35 	.word	0x08003f35
 8003f6c:	08003f35 	.word	0x08003f35
 8003f70:	08003f35 	.word	0x08003f35
 8003f74:	08003f35 	.word	0x08003f35
 8003f78:	080040c7 	.word	0x080040c7
 8003f7c:	08003fe9 	.word	0x08003fe9
 8003f80:	080040a9 	.word	0x080040a9
 8003f84:	08003f35 	.word	0x08003f35
 8003f88:	08003f35 	.word	0x08003f35
 8003f8c:	080040e9 	.word	0x080040e9
 8003f90:	08003f35 	.word	0x08003f35
 8003f94:	08003fe9 	.word	0x08003fe9
 8003f98:	08003f35 	.word	0x08003f35
 8003f9c:	08003f35 	.word	0x08003f35
 8003fa0:	080040b1 	.word	0x080040b1
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	1d1a      	adds	r2, r3, #4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	602a      	str	r2, [r5, #0]
 8003fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0a4      	b.n	8004102 <_printf_i+0x1f6>
 8003fb8:	6820      	ldr	r0, [r4, #0]
 8003fba:	6829      	ldr	r1, [r5, #0]
 8003fbc:	0606      	lsls	r6, r0, #24
 8003fbe:	f101 0304 	add.w	r3, r1, #4
 8003fc2:	d50a      	bpl.n	8003fda <_printf_i+0xce>
 8003fc4:	680e      	ldr	r6, [r1, #0]
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	2e00      	cmp	r6, #0
 8003fca:	da03      	bge.n	8003fd4 <_printf_i+0xc8>
 8003fcc:	232d      	movs	r3, #45	; 0x2d
 8003fce:	4276      	negs	r6, r6
 8003fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd4:	230a      	movs	r3, #10
 8003fd6:	485e      	ldr	r0, [pc, #376]	; (8004150 <_printf_i+0x244>)
 8003fd8:	e019      	b.n	800400e <_printf_i+0x102>
 8003fda:	680e      	ldr	r6, [r1, #0]
 8003fdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	bf18      	it	ne
 8003fe4:	b236      	sxthne	r6, r6
 8003fe6:	e7ef      	b.n	8003fc8 <_printf_i+0xbc>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	6820      	ldr	r0, [r4, #0]
 8003fec:	1d19      	adds	r1, r3, #4
 8003fee:	6029      	str	r1, [r5, #0]
 8003ff0:	0601      	lsls	r1, r0, #24
 8003ff2:	d501      	bpl.n	8003ff8 <_printf_i+0xec>
 8003ff4:	681e      	ldr	r6, [r3, #0]
 8003ff6:	e002      	b.n	8003ffe <_printf_i+0xf2>
 8003ff8:	0646      	lsls	r6, r0, #25
 8003ffa:	d5fb      	bpl.n	8003ff4 <_printf_i+0xe8>
 8003ffc:	881e      	ldrh	r6, [r3, #0]
 8003ffe:	2f6f      	cmp	r7, #111	; 0x6f
 8004000:	bf0c      	ite	eq
 8004002:	2308      	moveq	r3, #8
 8004004:	230a      	movne	r3, #10
 8004006:	4852      	ldr	r0, [pc, #328]	; (8004150 <_printf_i+0x244>)
 8004008:	2100      	movs	r1, #0
 800400a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800400e:	6865      	ldr	r5, [r4, #4]
 8004010:	2d00      	cmp	r5, #0
 8004012:	bfa8      	it	ge
 8004014:	6821      	ldrge	r1, [r4, #0]
 8004016:	60a5      	str	r5, [r4, #8]
 8004018:	bfa4      	itt	ge
 800401a:	f021 0104 	bicge.w	r1, r1, #4
 800401e:	6021      	strge	r1, [r4, #0]
 8004020:	b90e      	cbnz	r6, 8004026 <_printf_i+0x11a>
 8004022:	2d00      	cmp	r5, #0
 8004024:	d04d      	beq.n	80040c2 <_printf_i+0x1b6>
 8004026:	4615      	mov	r5, r2
 8004028:	fbb6 f1f3 	udiv	r1, r6, r3
 800402c:	fb03 6711 	mls	r7, r3, r1, r6
 8004030:	5dc7      	ldrb	r7, [r0, r7]
 8004032:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004036:	4637      	mov	r7, r6
 8004038:	42bb      	cmp	r3, r7
 800403a:	460e      	mov	r6, r1
 800403c:	d9f4      	bls.n	8004028 <_printf_i+0x11c>
 800403e:	2b08      	cmp	r3, #8
 8004040:	d10b      	bne.n	800405a <_printf_i+0x14e>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	07de      	lsls	r6, r3, #31
 8004046:	d508      	bpl.n	800405a <_printf_i+0x14e>
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	6861      	ldr	r1, [r4, #4]
 800404c:	4299      	cmp	r1, r3
 800404e:	bfde      	ittt	le
 8004050:	2330      	movle	r3, #48	; 0x30
 8004052:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004056:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800405a:	1b52      	subs	r2, r2, r5
 800405c:	6122      	str	r2, [r4, #16]
 800405e:	464b      	mov	r3, r9
 8004060:	4621      	mov	r1, r4
 8004062:	4640      	mov	r0, r8
 8004064:	f8cd a000 	str.w	sl, [sp]
 8004068:	aa03      	add	r2, sp, #12
 800406a:	f7ff fedf 	bl	8003e2c <_printf_common>
 800406e:	3001      	adds	r0, #1
 8004070:	d14c      	bne.n	800410c <_printf_i+0x200>
 8004072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004076:	b004      	add	sp, #16
 8004078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407c:	4834      	ldr	r0, [pc, #208]	; (8004150 <_printf_i+0x244>)
 800407e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004082:	6829      	ldr	r1, [r5, #0]
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	f851 6b04 	ldr.w	r6, [r1], #4
 800408a:	6029      	str	r1, [r5, #0]
 800408c:	061d      	lsls	r5, r3, #24
 800408e:	d514      	bpl.n	80040ba <_printf_i+0x1ae>
 8004090:	07df      	lsls	r7, r3, #31
 8004092:	bf44      	itt	mi
 8004094:	f043 0320 	orrmi.w	r3, r3, #32
 8004098:	6023      	strmi	r3, [r4, #0]
 800409a:	b91e      	cbnz	r6, 80040a4 <_printf_i+0x198>
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	f023 0320 	bic.w	r3, r3, #32
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	2310      	movs	r3, #16
 80040a6:	e7af      	b.n	8004008 <_printf_i+0xfc>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	f043 0320 	orr.w	r3, r3, #32
 80040ae:	6023      	str	r3, [r4, #0]
 80040b0:	2378      	movs	r3, #120	; 0x78
 80040b2:	4828      	ldr	r0, [pc, #160]	; (8004154 <_printf_i+0x248>)
 80040b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040b8:	e7e3      	b.n	8004082 <_printf_i+0x176>
 80040ba:	0659      	lsls	r1, r3, #25
 80040bc:	bf48      	it	mi
 80040be:	b2b6      	uxthmi	r6, r6
 80040c0:	e7e6      	b.n	8004090 <_printf_i+0x184>
 80040c2:	4615      	mov	r5, r2
 80040c4:	e7bb      	b.n	800403e <_printf_i+0x132>
 80040c6:	682b      	ldr	r3, [r5, #0]
 80040c8:	6826      	ldr	r6, [r4, #0]
 80040ca:	1d18      	adds	r0, r3, #4
 80040cc:	6961      	ldr	r1, [r4, #20]
 80040ce:	6028      	str	r0, [r5, #0]
 80040d0:	0635      	lsls	r5, r6, #24
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	d501      	bpl.n	80040da <_printf_i+0x1ce>
 80040d6:	6019      	str	r1, [r3, #0]
 80040d8:	e002      	b.n	80040e0 <_printf_i+0x1d4>
 80040da:	0670      	lsls	r0, r6, #25
 80040dc:	d5fb      	bpl.n	80040d6 <_printf_i+0x1ca>
 80040de:	8019      	strh	r1, [r3, #0]
 80040e0:	2300      	movs	r3, #0
 80040e2:	4615      	mov	r5, r2
 80040e4:	6123      	str	r3, [r4, #16]
 80040e6:	e7ba      	b.n	800405e <_printf_i+0x152>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	2100      	movs	r1, #0
 80040ec:	1d1a      	adds	r2, r3, #4
 80040ee:	602a      	str	r2, [r5, #0]
 80040f0:	681d      	ldr	r5, [r3, #0]
 80040f2:	6862      	ldr	r2, [r4, #4]
 80040f4:	4628      	mov	r0, r5
 80040f6:	f000 f82f 	bl	8004158 <memchr>
 80040fa:	b108      	cbz	r0, 8004100 <_printf_i+0x1f4>
 80040fc:	1b40      	subs	r0, r0, r5
 80040fe:	6060      	str	r0, [r4, #4]
 8004100:	6863      	ldr	r3, [r4, #4]
 8004102:	6123      	str	r3, [r4, #16]
 8004104:	2300      	movs	r3, #0
 8004106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410a:	e7a8      	b.n	800405e <_printf_i+0x152>
 800410c:	462a      	mov	r2, r5
 800410e:	4649      	mov	r1, r9
 8004110:	4640      	mov	r0, r8
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	47d0      	blx	sl
 8004116:	3001      	adds	r0, #1
 8004118:	d0ab      	beq.n	8004072 <_printf_i+0x166>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	079b      	lsls	r3, r3, #30
 800411e:	d413      	bmi.n	8004148 <_printf_i+0x23c>
 8004120:	68e0      	ldr	r0, [r4, #12]
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	4298      	cmp	r0, r3
 8004126:	bfb8      	it	lt
 8004128:	4618      	movlt	r0, r3
 800412a:	e7a4      	b.n	8004076 <_printf_i+0x16a>
 800412c:	2301      	movs	r3, #1
 800412e:	4632      	mov	r2, r6
 8004130:	4649      	mov	r1, r9
 8004132:	4640      	mov	r0, r8
 8004134:	47d0      	blx	sl
 8004136:	3001      	adds	r0, #1
 8004138:	d09b      	beq.n	8004072 <_printf_i+0x166>
 800413a:	3501      	adds	r5, #1
 800413c:	68e3      	ldr	r3, [r4, #12]
 800413e:	9903      	ldr	r1, [sp, #12]
 8004140:	1a5b      	subs	r3, r3, r1
 8004142:	42ab      	cmp	r3, r5
 8004144:	dcf2      	bgt.n	800412c <_printf_i+0x220>
 8004146:	e7eb      	b.n	8004120 <_printf_i+0x214>
 8004148:	2500      	movs	r5, #0
 800414a:	f104 0619 	add.w	r6, r4, #25
 800414e:	e7f5      	b.n	800413c <_printf_i+0x230>
 8004150:	08004749 	.word	0x08004749
 8004154:	0800475a 	.word	0x0800475a

08004158 <memchr>:
 8004158:	4603      	mov	r3, r0
 800415a:	b510      	push	{r4, lr}
 800415c:	b2c9      	uxtb	r1, r1
 800415e:	4402      	add	r2, r0
 8004160:	4293      	cmp	r3, r2
 8004162:	4618      	mov	r0, r3
 8004164:	d101      	bne.n	800416a <memchr+0x12>
 8004166:	2000      	movs	r0, #0
 8004168:	e003      	b.n	8004172 <memchr+0x1a>
 800416a:	7804      	ldrb	r4, [r0, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	428c      	cmp	r4, r1
 8004170:	d1f6      	bne.n	8004160 <memchr+0x8>
 8004172:	bd10      	pop	{r4, pc}

08004174 <memcpy>:
 8004174:	440a      	add	r2, r1
 8004176:	4291      	cmp	r1, r2
 8004178:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800417c:	d100      	bne.n	8004180 <memcpy+0xc>
 800417e:	4770      	bx	lr
 8004180:	b510      	push	{r4, lr}
 8004182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004186:	4291      	cmp	r1, r2
 8004188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800418c:	d1f9      	bne.n	8004182 <memcpy+0xe>
 800418e:	bd10      	pop	{r4, pc}

08004190 <memmove>:
 8004190:	4288      	cmp	r0, r1
 8004192:	b510      	push	{r4, lr}
 8004194:	eb01 0402 	add.w	r4, r1, r2
 8004198:	d902      	bls.n	80041a0 <memmove+0x10>
 800419a:	4284      	cmp	r4, r0
 800419c:	4623      	mov	r3, r4
 800419e:	d807      	bhi.n	80041b0 <memmove+0x20>
 80041a0:	1e43      	subs	r3, r0, #1
 80041a2:	42a1      	cmp	r1, r4
 80041a4:	d008      	beq.n	80041b8 <memmove+0x28>
 80041a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ae:	e7f8      	b.n	80041a2 <memmove+0x12>
 80041b0:	4601      	mov	r1, r0
 80041b2:	4402      	add	r2, r0
 80041b4:	428a      	cmp	r2, r1
 80041b6:	d100      	bne.n	80041ba <memmove+0x2a>
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041c2:	e7f7      	b.n	80041b4 <memmove+0x24>

080041c4 <_free_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4605      	mov	r5, r0
 80041c8:	2900      	cmp	r1, #0
 80041ca:	d040      	beq.n	800424e <_free_r+0x8a>
 80041cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d0:	1f0c      	subs	r4, r1, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bfb8      	it	lt
 80041d6:	18e4      	addlt	r4, r4, r3
 80041d8:	f000 f910 	bl	80043fc <__malloc_lock>
 80041dc:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <_free_r+0x8c>)
 80041de:	6813      	ldr	r3, [r2, #0]
 80041e0:	b933      	cbnz	r3, 80041f0 <_free_r+0x2c>
 80041e2:	6063      	str	r3, [r4, #4]
 80041e4:	6014      	str	r4, [r2, #0]
 80041e6:	4628      	mov	r0, r5
 80041e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ec:	f000 b90c 	b.w	8004408 <__malloc_unlock>
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	d908      	bls.n	8004206 <_free_r+0x42>
 80041f4:	6820      	ldr	r0, [r4, #0]
 80041f6:	1821      	adds	r1, r4, r0
 80041f8:	428b      	cmp	r3, r1
 80041fa:	bf01      	itttt	eq
 80041fc:	6819      	ldreq	r1, [r3, #0]
 80041fe:	685b      	ldreq	r3, [r3, #4]
 8004200:	1809      	addeq	r1, r1, r0
 8004202:	6021      	streq	r1, [r4, #0]
 8004204:	e7ed      	b.n	80041e2 <_free_r+0x1e>
 8004206:	461a      	mov	r2, r3
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b10b      	cbz	r3, 8004210 <_free_r+0x4c>
 800420c:	42a3      	cmp	r3, r4
 800420e:	d9fa      	bls.n	8004206 <_free_r+0x42>
 8004210:	6811      	ldr	r1, [r2, #0]
 8004212:	1850      	adds	r0, r2, r1
 8004214:	42a0      	cmp	r0, r4
 8004216:	d10b      	bne.n	8004230 <_free_r+0x6c>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	4401      	add	r1, r0
 800421c:	1850      	adds	r0, r2, r1
 800421e:	4283      	cmp	r3, r0
 8004220:	6011      	str	r1, [r2, #0]
 8004222:	d1e0      	bne.n	80041e6 <_free_r+0x22>
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4401      	add	r1, r0
 800422a:	6011      	str	r1, [r2, #0]
 800422c:	6053      	str	r3, [r2, #4]
 800422e:	e7da      	b.n	80041e6 <_free_r+0x22>
 8004230:	d902      	bls.n	8004238 <_free_r+0x74>
 8004232:	230c      	movs	r3, #12
 8004234:	602b      	str	r3, [r5, #0]
 8004236:	e7d6      	b.n	80041e6 <_free_r+0x22>
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	1821      	adds	r1, r4, r0
 800423c:	428b      	cmp	r3, r1
 800423e:	bf01      	itttt	eq
 8004240:	6819      	ldreq	r1, [r3, #0]
 8004242:	685b      	ldreq	r3, [r3, #4]
 8004244:	1809      	addeq	r1, r1, r0
 8004246:	6021      	streq	r1, [r4, #0]
 8004248:	6063      	str	r3, [r4, #4]
 800424a:	6054      	str	r4, [r2, #4]
 800424c:	e7cb      	b.n	80041e6 <_free_r+0x22>
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	200007f4 	.word	0x200007f4

08004254 <sbrk_aligned>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	4e0e      	ldr	r6, [pc, #56]	; (8004290 <sbrk_aligned+0x3c>)
 8004258:	460c      	mov	r4, r1
 800425a:	6831      	ldr	r1, [r6, #0]
 800425c:	4605      	mov	r5, r0
 800425e:	b911      	cbnz	r1, 8004266 <sbrk_aligned+0x12>
 8004260:	f000 f8bc 	bl	80043dc <_sbrk_r>
 8004264:	6030      	str	r0, [r6, #0]
 8004266:	4621      	mov	r1, r4
 8004268:	4628      	mov	r0, r5
 800426a:	f000 f8b7 	bl	80043dc <_sbrk_r>
 800426e:	1c43      	adds	r3, r0, #1
 8004270:	d00a      	beq.n	8004288 <sbrk_aligned+0x34>
 8004272:	1cc4      	adds	r4, r0, #3
 8004274:	f024 0403 	bic.w	r4, r4, #3
 8004278:	42a0      	cmp	r0, r4
 800427a:	d007      	beq.n	800428c <sbrk_aligned+0x38>
 800427c:	1a21      	subs	r1, r4, r0
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f8ac 	bl	80043dc <_sbrk_r>
 8004284:	3001      	adds	r0, #1
 8004286:	d101      	bne.n	800428c <sbrk_aligned+0x38>
 8004288:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800428c:	4620      	mov	r0, r4
 800428e:	bd70      	pop	{r4, r5, r6, pc}
 8004290:	200007f8 	.word	0x200007f8

08004294 <_malloc_r>:
 8004294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004298:	1ccd      	adds	r5, r1, #3
 800429a:	f025 0503 	bic.w	r5, r5, #3
 800429e:	3508      	adds	r5, #8
 80042a0:	2d0c      	cmp	r5, #12
 80042a2:	bf38      	it	cc
 80042a4:	250c      	movcc	r5, #12
 80042a6:	2d00      	cmp	r5, #0
 80042a8:	4607      	mov	r7, r0
 80042aa:	db01      	blt.n	80042b0 <_malloc_r+0x1c>
 80042ac:	42a9      	cmp	r1, r5
 80042ae:	d905      	bls.n	80042bc <_malloc_r+0x28>
 80042b0:	230c      	movs	r3, #12
 80042b2:	2600      	movs	r6, #0
 80042b4:	603b      	str	r3, [r7, #0]
 80042b6:	4630      	mov	r0, r6
 80042b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042bc:	4e2e      	ldr	r6, [pc, #184]	; (8004378 <_malloc_r+0xe4>)
 80042be:	f000 f89d 	bl	80043fc <__malloc_lock>
 80042c2:	6833      	ldr	r3, [r6, #0]
 80042c4:	461c      	mov	r4, r3
 80042c6:	bb34      	cbnz	r4, 8004316 <_malloc_r+0x82>
 80042c8:	4629      	mov	r1, r5
 80042ca:	4638      	mov	r0, r7
 80042cc:	f7ff ffc2 	bl	8004254 <sbrk_aligned>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	4604      	mov	r4, r0
 80042d4:	d14d      	bne.n	8004372 <_malloc_r+0xde>
 80042d6:	6834      	ldr	r4, [r6, #0]
 80042d8:	4626      	mov	r6, r4
 80042da:	2e00      	cmp	r6, #0
 80042dc:	d140      	bne.n	8004360 <_malloc_r+0xcc>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	4631      	mov	r1, r6
 80042e2:	4638      	mov	r0, r7
 80042e4:	eb04 0803 	add.w	r8, r4, r3
 80042e8:	f000 f878 	bl	80043dc <_sbrk_r>
 80042ec:	4580      	cmp	r8, r0
 80042ee:	d13a      	bne.n	8004366 <_malloc_r+0xd2>
 80042f0:	6821      	ldr	r1, [r4, #0]
 80042f2:	3503      	adds	r5, #3
 80042f4:	1a6d      	subs	r5, r5, r1
 80042f6:	f025 0503 	bic.w	r5, r5, #3
 80042fa:	3508      	adds	r5, #8
 80042fc:	2d0c      	cmp	r5, #12
 80042fe:	bf38      	it	cc
 8004300:	250c      	movcc	r5, #12
 8004302:	4638      	mov	r0, r7
 8004304:	4629      	mov	r1, r5
 8004306:	f7ff ffa5 	bl	8004254 <sbrk_aligned>
 800430a:	3001      	adds	r0, #1
 800430c:	d02b      	beq.n	8004366 <_malloc_r+0xd2>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	442b      	add	r3, r5
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	e00e      	b.n	8004334 <_malloc_r+0xa0>
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	1b52      	subs	r2, r2, r5
 800431a:	d41e      	bmi.n	800435a <_malloc_r+0xc6>
 800431c:	2a0b      	cmp	r2, #11
 800431e:	d916      	bls.n	800434e <_malloc_r+0xba>
 8004320:	1961      	adds	r1, r4, r5
 8004322:	42a3      	cmp	r3, r4
 8004324:	6025      	str	r5, [r4, #0]
 8004326:	bf18      	it	ne
 8004328:	6059      	strne	r1, [r3, #4]
 800432a:	6863      	ldr	r3, [r4, #4]
 800432c:	bf08      	it	eq
 800432e:	6031      	streq	r1, [r6, #0]
 8004330:	5162      	str	r2, [r4, r5]
 8004332:	604b      	str	r3, [r1, #4]
 8004334:	4638      	mov	r0, r7
 8004336:	f104 060b 	add.w	r6, r4, #11
 800433a:	f000 f865 	bl	8004408 <__malloc_unlock>
 800433e:	f026 0607 	bic.w	r6, r6, #7
 8004342:	1d23      	adds	r3, r4, #4
 8004344:	1af2      	subs	r2, r6, r3
 8004346:	d0b6      	beq.n	80042b6 <_malloc_r+0x22>
 8004348:	1b9b      	subs	r3, r3, r6
 800434a:	50a3      	str	r3, [r4, r2]
 800434c:	e7b3      	b.n	80042b6 <_malloc_r+0x22>
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	42a3      	cmp	r3, r4
 8004352:	bf0c      	ite	eq
 8004354:	6032      	streq	r2, [r6, #0]
 8004356:	605a      	strne	r2, [r3, #4]
 8004358:	e7ec      	b.n	8004334 <_malloc_r+0xa0>
 800435a:	4623      	mov	r3, r4
 800435c:	6864      	ldr	r4, [r4, #4]
 800435e:	e7b2      	b.n	80042c6 <_malloc_r+0x32>
 8004360:	4634      	mov	r4, r6
 8004362:	6876      	ldr	r6, [r6, #4]
 8004364:	e7b9      	b.n	80042da <_malloc_r+0x46>
 8004366:	230c      	movs	r3, #12
 8004368:	4638      	mov	r0, r7
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	f000 f84c 	bl	8004408 <__malloc_unlock>
 8004370:	e7a1      	b.n	80042b6 <_malloc_r+0x22>
 8004372:	6025      	str	r5, [r4, #0]
 8004374:	e7de      	b.n	8004334 <_malloc_r+0xa0>
 8004376:	bf00      	nop
 8004378:	200007f4 	.word	0x200007f4

0800437c <_realloc_r>:
 800437c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004380:	4680      	mov	r8, r0
 8004382:	4614      	mov	r4, r2
 8004384:	460e      	mov	r6, r1
 8004386:	b921      	cbnz	r1, 8004392 <_realloc_r+0x16>
 8004388:	4611      	mov	r1, r2
 800438a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800438e:	f7ff bf81 	b.w	8004294 <_malloc_r>
 8004392:	b92a      	cbnz	r2, 80043a0 <_realloc_r+0x24>
 8004394:	f7ff ff16 	bl	80041c4 <_free_r>
 8004398:	4625      	mov	r5, r4
 800439a:	4628      	mov	r0, r5
 800439c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a0:	f000 f838 	bl	8004414 <_malloc_usable_size_r>
 80043a4:	4284      	cmp	r4, r0
 80043a6:	4607      	mov	r7, r0
 80043a8:	d802      	bhi.n	80043b0 <_realloc_r+0x34>
 80043aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043ae:	d812      	bhi.n	80043d6 <_realloc_r+0x5a>
 80043b0:	4621      	mov	r1, r4
 80043b2:	4640      	mov	r0, r8
 80043b4:	f7ff ff6e 	bl	8004294 <_malloc_r>
 80043b8:	4605      	mov	r5, r0
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d0ed      	beq.n	800439a <_realloc_r+0x1e>
 80043be:	42bc      	cmp	r4, r7
 80043c0:	4622      	mov	r2, r4
 80043c2:	4631      	mov	r1, r6
 80043c4:	bf28      	it	cs
 80043c6:	463a      	movcs	r2, r7
 80043c8:	f7ff fed4 	bl	8004174 <memcpy>
 80043cc:	4631      	mov	r1, r6
 80043ce:	4640      	mov	r0, r8
 80043d0:	f7ff fef8 	bl	80041c4 <_free_r>
 80043d4:	e7e1      	b.n	800439a <_realloc_r+0x1e>
 80043d6:	4635      	mov	r5, r6
 80043d8:	e7df      	b.n	800439a <_realloc_r+0x1e>
	...

080043dc <_sbrk_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	2300      	movs	r3, #0
 80043e0:	4d05      	ldr	r5, [pc, #20]	; (80043f8 <_sbrk_r+0x1c>)
 80043e2:	4604      	mov	r4, r0
 80043e4:	4608      	mov	r0, r1
 80043e6:	602b      	str	r3, [r5, #0]
 80043e8:	f7fd f814 	bl	8001414 <_sbrk>
 80043ec:	1c43      	adds	r3, r0, #1
 80043ee:	d102      	bne.n	80043f6 <_sbrk_r+0x1a>
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	b103      	cbz	r3, 80043f6 <_sbrk_r+0x1a>
 80043f4:	6023      	str	r3, [r4, #0]
 80043f6:	bd38      	pop	{r3, r4, r5, pc}
 80043f8:	200007fc 	.word	0x200007fc

080043fc <__malloc_lock>:
 80043fc:	4801      	ldr	r0, [pc, #4]	; (8004404 <__malloc_lock+0x8>)
 80043fe:	f000 b811 	b.w	8004424 <__retarget_lock_acquire_recursive>
 8004402:	bf00      	nop
 8004404:	20000800 	.word	0x20000800

08004408 <__malloc_unlock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_unlock+0x8>)
 800440a:	f000 b80c 	b.w	8004426 <__retarget_lock_release_recursive>
 800440e:	bf00      	nop
 8004410:	20000800 	.word	0x20000800

08004414 <_malloc_usable_size_r>:
 8004414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004418:	1f18      	subs	r0, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	bfbc      	itt	lt
 800441e:	580b      	ldrlt	r3, [r1, r0]
 8004420:	18c0      	addlt	r0, r0, r3
 8004422:	4770      	bx	lr

08004424 <__retarget_lock_acquire_recursive>:
 8004424:	4770      	bx	lr

08004426 <__retarget_lock_release_recursive>:
 8004426:	4770      	bx	lr

08004428 <_init>:
 8004428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442a:	bf00      	nop
 800442c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442e:	bc08      	pop	{r3}
 8004430:	469e      	mov	lr, r3
 8004432:	4770      	bx	lr

08004434 <_fini>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	bf00      	nop
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr
